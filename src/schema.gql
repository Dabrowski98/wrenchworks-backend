# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcceptWorkshopDeviceInput {
  deviceId: BigInt!
  deviceName: String!
}

type Address {
  addressId: BigInt!
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  postCode: String!
  region: String!
  street: String
  user: User
  workshop: Workshop
}

type AddressAvgAggregate {
  addressId: Float
}

type AddressCountAggregate {
  _all: Int!
  addressId: Int!
  buildingNo: Int!
  city: Int!
  country: Int!
  flatNo: Int!
  postCode: Int!
  region: Int!
  street: Int!
}

input AddressCreateInput {
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  postCode: String!
  region: String!
  street: String
}

input AddressCreateNestedOneWithoutUserInput {
  create: AddressCreateWithoutUserInput
}

input AddressCreateNestedOneWithoutWorkshopInput {
  create: AddressCreateWithoutWorkshopInput
}

input AddressCreateWithoutUserInput {
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  postCode: String!
  region: String!
  street: String
}

input AddressCreateWithoutWorkshopInput {
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  postCode: String!
  region: String!
  street: String
}

type AddressMaxAggregate {
  addressId: BigInt
  buildingNo: String
  city: String
  country: String
  flatNo: String
  postCode: String
  region: String
  street: String
}

type AddressMinAggregate {
  addressId: BigInt
  buildingNo: String
  city: String
  country: String
  flatNo: String
  postCode: String
  region: String
  street: String
}

input AddressNullableRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressOrderByWithRelationInput {
  addressId: SortOrder
  buildingNo: SortOrder
  city: SortOrder
  country: SortOrder
  flatNo: SortOrderInput
  postCode: SortOrder
  region: SortOrder
  street: SortOrderInput
  user: UserOrderByWithRelationInput
  workshop: WorkshopOrderByWithRelationInput
}

type AddressSumAggregate {
  addressId: BigInt
}

input AddressUpdateInput {
  buildingNo: String
  city: String
  country: String
  flatNo: String
  postCode: String
  region: String
  street: String
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  addressId: BigIntFilter
  buildingNo: StringFilter
  city: StringFilter
  country: StringFilter
  flatNo: StringNullableFilter
  postCode: StringFilter
  region: StringFilter
  street: StringNullableFilter
  user: UserNullableRelationFilter
  workshop: WorkshopNullableRelationFilter
}

input AddressWhereUniqueInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  addressId: BigInt
  buildingNo: StringFilter
  city: StringFilter
  country: StringFilter
  flatNo: StringNullableFilter
  postCode: StringFilter
  region: StringFilter
  street: StringNullableFilter
  user: UserNullableRelationFilter
  workshop: WorkshopNullableRelationFilter
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BigIntFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntFilter
  notIn: [String!]
}

input BigIntNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntNullableFilter
  notIn: [String!]
}

enum BodyColors {
  BLACK
  BLUE
  BROWN
  GRAY
  GREEN
  OTHER
  RED
  SILVER
  WHITE
  YELLOW
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreateAdminInput {
  address: AddressCreateNestedOneWithoutUserInput
  avatarURL: String
  email: String!
  firstName: String
  lastName: String
  password: String!
  telephoneNumber: String!
  username: String!
}

type Customer {
  NIP: String
  _count: CustomerCount!
  companyName: String
  createdAt: DateTime!
  createdBy: String

  """Note: Fill this field in Service layer."""
  creationSource: CustomerCreationSource!
  customerId: BigInt!
  deletedAt: DateTime
  description: String
  email: String
  firstName: String
  guest: Guest
  guestId: BigInt
  isVerified: Boolean!
  services: [Service!]
  telephoneNumber: String

  """Note: Optional because it defaults to 0.00"""
  totalDue: Decimal!
  updatedAt: DateTime
  updatedBy: String
  user: User
  userId: BigInt
  vehicles: [Vehicle!]
  workshop: Workshop!
  workshopId: BigInt!
}

type CustomerAvgAggregate {
  createdBy: Float
  customerId: Float
  guestId: Float
  totalDue: Decimal
  updatedBy: Float
  userId: Float
  workshopId: Float
}

type CustomerCount {
  services: Int!
  vehicles: Int!
}

type CustomerCountAggregate {
  NIP: Int!
  _all: Int!
  companyName: Int!
  createdAt: Int!
  createdBy: Int!
  creationSource: Int!
  customerId: Int!
  deletedAt: Int!
  description: Int!
  email: Int!
  firstName: Int!
  guestId: Int!
  isVerified: Int!
  telephoneNumber: Int!
  totalDue: Int!
  updatedAt: Int!
  updatedBy: Int!
  userId: Int!
  workshopId: Int!
}

input CustomerCreateNestedManyWithoutVehiclesInput {
  connect: [CustomerWhereUniqueInput!]
}

enum CustomerCreationSource {
  GUEST
  USER
  WORKSHOP
}

input CustomerListRelationFilter {
  every: CustomerWhereInput
  none: CustomerWhereInput
  some: CustomerWhereInput
}

type CustomerMaxAggregate {
  NIP: String
  companyName: String
  createdAt: DateTime
  createdBy: String
  creationSource: CustomerCreationSource
  customerId: BigInt
  deletedAt: DateTime
  description: String
  email: String
  firstName: String
  guestId: BigInt
  isVerified: Boolean
  telephoneNumber: String
  totalDue: Decimal
  updatedAt: DateTime
  updatedBy: String
  userId: BigInt
  workshopId: BigInt
}

type CustomerMinAggregate {
  NIP: String
  companyName: String
  createdAt: DateTime
  createdBy: String
  creationSource: CustomerCreationSource
  customerId: BigInt
  deletedAt: DateTime
  description: String
  email: String
  firstName: String
  guestId: BigInt
  isVerified: Boolean
  telephoneNumber: String
  totalDue: Decimal
  updatedAt: DateTime
  updatedBy: String
  userId: BigInt
  workshopId: BigInt
}

input CustomerNullableRelationFilter {
  is: CustomerWhereInput
  isNot: CustomerWhereInput
}

input CustomerOrderByRelationAggregateInput {
  _count: SortOrder
}

input CustomerOrderByWithRelationInput {
  NIP: SortOrderInput
  companyName: SortOrderInput
  creationSource: SortOrder
  customerId: SortOrder
  description: SortOrderInput
  email: SortOrderInput
  firstName: SortOrderInput
  guest: GuestOrderByWithRelationInput
  guestId: SortOrderInput
  isVerified: SortOrder
  services: ServiceOrderByRelationAggregateInput
  telephoneNumber: SortOrderInput
  totalDue: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
  vehicles: VehicleOrderByRelationAggregateInput
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
}

input CustomerRelationFilter {
  is: CustomerWhereInput
  isNot: CustomerWhereInput
}

type CustomerSumAggregate {
  createdBy: String
  customerId: BigInt
  guestId: BigInt
  totalDue: Decimal
  updatedBy: String
  userId: BigInt
  workshopId: BigInt
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  NIP: StringNullableFilter
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  companyName: StringNullableFilter
  creationSource: EnumCustomerCreationSourceFilter
  customerId: BigIntFilter
  description: StringNullableFilter
  email: StringNullableFilter
  firstName: StringNullableFilter
  guest: GuestNullableRelationFilter
  guestId: BigIntNullableFilter
  isVerified: BoolFilter
  services: ServiceListRelationFilter
  telephoneNumber: StringNullableFilter
  totalDue: DecimalFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  vehicles: VehicleListRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input CustomerWhereUniqueInput {
  AND: [CustomerWhereInput!]
  NIP: StringNullableFilter
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  companyName: StringNullableFilter
  creationSource: EnumCustomerCreationSourceFilter
  customerId: BigInt
  description: StringNullableFilter
  email: StringNullableFilter
  firstName: StringNullableFilter
  guest: GuestNullableRelationFilter
  guestId: BigInt
  isVerified: BoolFilter
  services: ServiceListRelationFilter
  telephoneNumber: StringNullableFilter
  totalDue: DecimalFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  vehicles: VehicleListRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input DecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

type DeletePayload {
  success: Boolean!
}

type Employee {
  _count: EmployeeCount!
  createdAt: DateTime!
  createdBy: String
  deletedAt: DateTime
  employeeId: BigInt!
  joinWorkshopRequests: [JoinWorkshopRequest!]

  """Note: Optional because field defaults to now()"""
  joinedAt: DateTime!
  login: String!
  nickname: BigInt
  refreshToken: String

  """Note: Connect or Create only allowed"""
  services: [Service!]
  tasks: [Task!]
  updatedAt: DateTime
  updatedBy: String

  """Note: Depends solely on join workshop request status."""
  user: User
  userId: BigInt
  workshop: Workshop!
  workshopId: BigInt!
}

type EmployeeAvgAggregate {
  createdBy: Float
  employeeId: Float
  updatedBy: Float
  userId: Float
  workshopId: Float
}

type EmployeeCount {
  joinWorkshopRequests: Int!
  services: Int!
  tasks: Int!
}

type EmployeeCountAggregate {
  _all: Int!
  createdAt: Int!
  createdBy: Int!
  deletedAt: Int!
  employeeId: Int!
  joinedAt: Int!
  login: Int!
  nickname: Int!
  refreshToken: Int!
  updatedAt: Int!
  updatedBy: Int!
  userId: Int!
  workshopId: Int!
}

input EmployeeListRelationFilter {
  every: EmployeeWhereInput
  none: EmployeeWhereInput
  some: EmployeeWhereInput
}

input EmployeeLoginWorkshopIdCompoundUniqueInput {
  login: String!
  workshopId: BigInt!
}

type EmployeeMaxAggregate {
  createdAt: DateTime
  createdBy: String
  deletedAt: DateTime
  employeeId: BigInt
  joinedAt: DateTime
  login: String
  nickname: BigInt
  refreshToken: String
  updatedAt: DateTime
  updatedBy: String
  userId: BigInt
  workshopId: BigInt
}

type EmployeeMinAggregate {
  createdAt: DateTime
  createdBy: String
  deletedAt: DateTime
  employeeId: BigInt
  joinedAt: DateTime
  login: String
  nickname: BigInt
  refreshToken: String
  updatedAt: DateTime
  updatedBy: String
  userId: BigInt
  workshopId: BigInt
}

input EmployeeOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmployeeOrderByWithRelationInput {
  employeeId: SortOrder
  joinWorkshopRequests: JoinWorkshopRequestOrderByRelationAggregateInput
  joinedAt: SortOrder
  login: SortOrder
  nickname: SortOrderInput
  password: SortOrder
  refreshToken: SortOrderInput
  services: ServiceOrderByRelationAggregateInput
  tasks: TaskOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
}

input EmployeeRelationFilter {
  is: EmployeeWhereInput
  isNot: EmployeeWhereInput
}

type EmployeeSumAggregate {
  createdBy: String
  employeeId: BigInt
  updatedBy: String
  userId: BigInt
  workshopId: BigInt
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  employeeId: BigIntFilter
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  joinedAt: DateTimeFilter
  login: StringFilter
  nickname: StringNullableFilter
  password: StringFilter
  refreshToken: StringNullableFilter
  services: ServiceListRelationFilter
  tasks: TaskListRelationFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input EmployeeWhereUniqueInput {
  AND: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  employeeId: BigInt
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  joinedAt: DateTimeFilter
  login: StringFilter
  login_workshopId: EmployeeLoginWorkshopIdCompoundUniqueInput
  nickname: StringNullableFilter
  password: StringFilter
  refreshToken: StringNullableFilter
  services: ServiceListRelationFilter
  tasks: TaskListRelationFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input EnumBodyColorsNullableFilter {
  equals: BodyColors
  in: [BodyColors!]
  not: NestedEnumBodyColorsNullableFilter
  notIn: [BodyColors!]
}

input EnumCustomerCreationSourceFilter {
  equals: CustomerCreationSource
  in: [CustomerCreationSource!]
  not: NestedEnumCustomerCreationSourceFilter
  notIn: [CustomerCreationSource!]
}

input EnumFuelTypeNullableFilter {
  equals: FuelType
  in: [FuelType!]
  not: NestedEnumFuelTypeNullableFilter
  notIn: [FuelType!]
}

input EnumJoinWorkshopRequestStatusFilter {
  equals: JoinWorkshopRequestStatus
  in: [JoinWorkshopRequestStatus!]
  not: NestedEnumJoinWorkshopRequestStatusFilter
  notIn: [JoinWorkshopRequestStatus!]
}

input EnumReviewsResponsesStatusFilter {
  equals: ReviewsResponsesStatus
  in: [ReviewsResponsesStatus!]
  not: NestedEnumReviewsResponsesStatusFilter
  notIn: [ReviewsResponsesStatus!]
}

input EnumReviewsStatusFilter {
  equals: ReviewsStatus
  in: [ReviewsStatus!]
  not: NestedEnumReviewsStatusFilter
  notIn: [ReviewsStatus!]
}

input EnumServiceRequestStatusNullableFilter {
  equals: ServiceRequestStatus
  in: [ServiceRequestStatus!]
  not: NestedEnumServiceRequestStatusNullableFilter
  notIn: [ServiceRequestStatus!]
}

input EnumServicesStatusNullableFilter {
  equals: ServicesStatus
  in: [ServicesStatus!]
  not: NestedEnumServicesStatusNullableFilter
  notIn: [ServicesStatus!]
}

input EnumTasksStatusNullableFilter {
  equals: TasksStatus
  in: [TasksStatus!]
  not: NestedEnumTasksStatusNullableFilter
  notIn: [TasksStatus!]
}

input EnumUserReportTypeFilter {
  equals: UserReportType
  in: [UserReportType!]
  not: NestedEnumUserReportTypeFilter
  notIn: [UserReportType!]
}

input EnumUserReportsReportedEntityTypeFilter {
  equals: UserReportsReportedEntityType
  in: [UserReportsReportedEntityType!]
  not: NestedEnumUserReportsReportedEntityTypeFilter
  notIn: [UserReportsReportedEntityType!]
}

input EnumUserReportsStatusFilter {
  equals: UserReportsStatus
  in: [UserReportsStatus!]
  not: NestedEnumUserReportsStatusFilter
  notIn: [UserReportsStatus!]
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

input EnumUsersStatusNullableFilter {
  equals: UsersStatus
  in: [UsersStatus!]
  not: NestedEnumUsersStatusNullableFilter
  notIn: [UsersStatus!]
}

input EnumWorkshopsDetailsStatusNullableFilter {
  equals: WorkshopsDetailsStatus
  in: [WorkshopsDetailsStatus!]
  not: NestedEnumWorkshopsDetailsStatusNullableFilter
  notIn: [WorkshopsDetailsStatus!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

enum FuelType {
  CNG
  DIESEL
  ELECTRIC
  HYBRID
  LPG
  OTHER
  PETROL
  ROCKET
}

"""
Note: When service request is accepted guest is removed and customer is updated with service request id. Updated and deleted automatically.
"""
type Guest {
  NIP: String
  companyName: String
  customer: Customer
  email: String
  firstName: String!
  guestId: BigInt!
  serviceRequest: ServiceRequest
  telephoneNumber: String
  vehicle: Vehicle
}

type GuestAvgAggregate {
  guestId: Float
}

type GuestCountAggregate {
  NIP: Int!
  _all: Int!
  companyName: Int!
  email: Int!
  firstName: Int!
  guestId: Int!
  telephoneNumber: Int!
}

input GuestCreateInput {
  NIP: String
  companyName: String
  email: String
  firstName: String!
  guestId: BigInt
  serviceRequest: ServiceRequestCreateNestedOneWithoutGuestInput
  telephoneNumber: String
  vehicle: VehicleCreateNestedOneWithoutGuestInput
}

type GuestMaxAggregate {
  NIP: String
  companyName: String
  email: String
  firstName: String
  guestId: BigInt
  telephoneNumber: String
}

type GuestMinAggregate {
  NIP: String
  companyName: String
  email: String
  firstName: String
  guestId: BigInt
  telephoneNumber: String
}

input GuestNullableRelationFilter {
  is: GuestWhereInput
  isNot: GuestWhereInput
}

input GuestOrderByWithRelationInput {
  NIP: SortOrderInput
  companyName: SortOrderInput
  customer: CustomerOrderByWithRelationInput
  email: SortOrderInput
  firstName: SortOrder
  guestId: SortOrder
  serviceRequest: ServiceRequestOrderByWithRelationInput
  telephoneNumber: SortOrderInput
  vehicle: VehicleOrderByWithRelationInput
}

enum GuestScalarFieldEnum {
  NIP
  companyName
  email
  firstName
  guestId
  telephoneNumber
}

type GuestSumAggregate {
  guestId: BigInt
}

input GuestUpdateInput {
  NIP: String
  companyName: String
  email: String
  guestId: BigInt
}

input GuestWhereInput {
  AND: [GuestWhereInput!]
  NIP: StringNullableFilter
  NOT: [GuestWhereInput!]
  OR: [GuestWhereInput!]
  companyName: StringNullableFilter
  customer: CustomerNullableRelationFilter
  email: StringNullableFilter
  firstName: StringFilter
  guestId: BigIntFilter
  serviceRequest: ServiceRequestNullableRelationFilter
  telephoneNumber: StringNullableFilter
  vehicle: VehicleNullableRelationFilter
}

input GuestWhereUniqueInput {
  AND: [GuestWhereInput!]
  NIP: StringNullableFilter
  NOT: [GuestWhereInput!]
  OR: [GuestWhereInput!]
  companyName: StringNullableFilter
  customer: CustomerNullableRelationFilter
  email: StringNullableFilter
  firstName: StringFilter
  guestId: BigInt
  serviceRequest: ServiceRequestNullableRelationFilter
  telephoneNumber: StringNullableFilter
  vehicle: VehicleNullableRelationFilter
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Job {
  _count: JobCount!
  categoryId: BigInt!
  description: String

  """Note: Optional because field defaults to false"""
  isPopular: Boolean!
  jobCategory: JobCategory!
  jobId: BigInt!
  jobWorkshops: [WorkshopJob!]
  name: String
  serviceRequests: [ServiceRequest!]
}

type JobCategory {
  _count: JobCategoryCount!
  categoryId: BigInt!
  children: [JobCategory!]
  description: String

  """Note: Optional because field defaults to false"""
  isPopular: Boolean!
  jobs: [Job!]
  name: String!
  parent: JobCategory
  parentId: BigInt
  workshops: [Workshop!]
}

type JobCategoryAvgAggregate {
  categoryId: Float
  parentId: Float
}

type JobCategoryCount {
  children: Int!
  jobs: Int!
  workshops: Int!
}

type JobCategoryCountAggregate {
  _all: Int!
  categoryId: Int!
  description: Int!
  isPopular: Int!
  name: Int!
  parentId: Int!
}

input JobCategoryCreateNestedManyWithoutWorkshopsInput {
  connect: [JobCategoryWhereUniqueInput!]
}

input JobCategoryListRelationFilter {
  every: JobCategoryWhereInput
  none: JobCategoryWhereInput
  some: JobCategoryWhereInput
}

type JobCategoryMaxAggregate {
  categoryId: BigInt
  description: String
  isPopular: Boolean
  name: String
  parentId: BigInt
}

type JobCategoryMinAggregate {
  categoryId: BigInt
  description: String
  isPopular: Boolean
  name: String
  parentId: BigInt
}

input JobCategoryNullableRelationFilter {
  is: JobCategoryWhereInput
  isNot: JobCategoryWhereInput
}

input JobCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input JobCategoryRelationFilter {
  is: JobCategoryWhereInput
  isNot: JobCategoryWhereInput
}

type JobCategorySumAggregate {
  categoryId: BigInt
  parentId: BigInt
}

input JobCategoryWhereInput {
  AND: [JobCategoryWhereInput!]
  NOT: [JobCategoryWhereInput!]
  OR: [JobCategoryWhereInput!]
  categoryId: BigIntFilter
  children: JobCategoryListRelationFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobs: JobListRelationFilter
  name: StringFilter
  parent: JobCategoryNullableRelationFilter
  parentId: BigIntNullableFilter
  workshops: WorkshopListRelationFilter
}

input JobCategoryWhereUniqueInput {
  AND: [JobCategoryWhereInput!]
  NOT: [JobCategoryWhereInput!]
  OR: [JobCategoryWhereInput!]
  categoryId: BigInt
  children: JobCategoryListRelationFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobs: JobListRelationFilter
  name: StringFilter
  parent: JobCategoryNullableRelationFilter
  parentId: BigIntNullableFilter
  workshops: WorkshopListRelationFilter
}

type JobCount {
  jobWorkshops: Int!
  serviceRequests: Int!
}

input JobCreateNestedManyWithoutServiceRequestsInput {
  connect: [JobWhereUniqueInput!]
}

input JobCreateNestedOneWithoutJobWorkshopsInput {
  connect: JobWhereUniqueInput
}

input JobListRelationFilter {
  every: JobWhereInput
  none: JobWhereInput
  some: JobWhereInput
}

input JobOrderByRelationAggregateInput {
  _count: SortOrder
}

input JobRelationFilter {
  is: JobWhereInput
  isNot: JobWhereInput
}

input JobWhereInput {
  AND: [JobWhereInput!]
  NOT: [JobWhereInput!]
  OR: [JobWhereInput!]
  categoryId: BigIntFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobCategory: JobCategoryRelationFilter
  jobId: BigIntFilter
  jobWorkshops: WorkshopJobListRelationFilter
  name: StringNullableFilter
  serviceRequests: ServiceRequestListRelationFilter
}

input JobWhereUniqueInput {
  AND: [JobWhereInput!]
  NOT: [JobWhereInput!]
  OR: [JobWhereInput!]
  categoryId: BigIntFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobCategory: JobCategoryRelationFilter
  jobId: BigInt
  jobWorkshops: WorkshopJobListRelationFilter
  name: StringNullableFilter
  serviceRequests: ServiceRequestListRelationFilter
}

"""Note: Do not allow receiver to update this model apart from status."""
type JoinWorkshopRequest {
  createdAt: DateTime!
  createdBy: String
  employee: Employee!
  employeeId: BigInt!
  joinWorkshopRequestId: BigInt!
  message: String
  receiverId: BigInt!
  resolvedAt: DateTime

  """Note: Optional because field defaults to PENDING"""
  status: JoinWorkshopRequestStatus!
  updatedAt: DateTime
  updatedBy: String
  user: User!
  workshop: Workshop!
  workshopId: BigInt!
}

input JoinWorkshopRequestCreateManyEmployeeInput {
  joinWorkshopRequestId: BigInt
  message: String
  receiverId: BigInt!
  workshopId: BigInt!
}

input JoinWorkshopRequestCreateManyEmployeeInputEnvelope {
  data: [JoinWorkshopRequestCreateManyEmployeeInput!]!
  skipDuplicates: Boolean
}

input JoinWorkshopRequestCreateNestedManyWithoutEmployeeInput {
  create: [JoinWorkshopRequestCreateWithoutEmployeeInput!]
  createMany: JoinWorkshopRequestCreateManyEmployeeInputEnvelope
}

input JoinWorkshopRequestCreateWithoutEmployeeInput {
  joinWorkshopRequestId: BigInt
  message: String
  user: UserCreateNestedOneWithoutJoinWorkshopRequestsInput!
  workshop: WorkshopCreateNestedOneWithoutJoinWorkshopRequestsInput!
}

input JoinWorkshopRequestListRelationFilter {
  every: JoinWorkshopRequestWhereInput
  none: JoinWorkshopRequestWhereInput
  some: JoinWorkshopRequestWhereInput
}

input JoinWorkshopRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

enum JoinWorkshopRequestStatus {
  ACCEPTED
  DENIED
  PENDING
}

input JoinWorkshopRequestWhereInput {
  AND: [JoinWorkshopRequestWhereInput!]
  NOT: [JoinWorkshopRequestWhereInput!]
  OR: [JoinWorkshopRequestWhereInput!]
  employee: EmployeeRelationFilter
  employeeId: BigIntFilter
  joinWorkshopRequestId: BigIntFilter
  message: StringNullableFilter
  receiverId: BigIntFilter
  status: EnumJoinWorkshopRequestStatusFilter
  user: UserRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input LoginEmployeeInput {
  login: String!
  password: String!
  workshopId: BigInt!
}

type LoginEmployeeResponse {
  accessToken: String!
  employee: Employee!
  refreshToken: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

type LoginUserResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Mutation {
  acceptDeviceRegistration(acceptWorkshopDeviceInput: AcceptWorkshopDeviceInput!): WorkshopDevice!
  changeEmployeePassword(changeEmployeePasswordInput: ChangePasswordInput!): Boolean!
  changeUserPassword(changeUserPasswordInput: ChangePasswordInput!): Boolean!
  createAddress(data: AddressCreateInput!): Address!
  createAdmin(createAdminInput: CreateAdminInput!): User!
  createGuest(data: GuestCreateInput!): Guest!
  deleteAddress(addressId: BigInt!): DeletePayload!
  deleteEmployee(employeeId: BigInt!): Boolean!
  deleteGuest(where: GuestWhereUniqueInput!): Guest!
  deleteWorkshop(workshopId: BigInt!): DeletePayload!
  generateDeviceOTP: String!
  loginEmployeeByUser(loginEmployeeInput: LoginEmployeeInput!): LoginEmployeeResponse!
  loginEmployeeByWorkshop(loginEmployeeInput: LoginEmployeeInput!): LoginEmployeeResponse!
  loginUser(loginUserInput: LoginUserInput!): LoginUserResponse!
  logoutAllUserSessions(userId: BigInt): Boolean!
  logoutAnotherEmployee(employeeId: BigInt!): Boolean!
  logoutEmployee(refreshToken: String!): Boolean!
  logoutUser(refreshToken: String!): Boolean!
  refreshTokens(refreshToken: String!): LoginUserResponse!
  registerEmployee(registerEmployeeInput: RegisterEmployeeInput!): Employee!
  registerUser(registerUserInput: RegisterUserInput!): User!
  registerWorkshop(registerWorkshopInput: RegisterWorkshopInput!): RegisterWorkshopResponse!
  removeDevice(deviceId: BigInt!): Boolean!
  requestDeviceRegistration(requestDeviceRegistrationInput: RequestDeviceRegistrationInput!): Boolean!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  updateGuest(data: GuestUpdateInput!, where: GuestWhereUniqueInput!): Guest!
}

input NestedBigIntFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntFilter
  notIn: [String!]
}

input NestedBigIntNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntNullableFilter
  notIn: [String!]
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedDecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input NestedEnumBodyColorsNullableFilter {
  equals: BodyColors
  in: [BodyColors!]
  not: NestedEnumBodyColorsNullableFilter
  notIn: [BodyColors!]
}

input NestedEnumCustomerCreationSourceFilter {
  equals: CustomerCreationSource
  in: [CustomerCreationSource!]
  not: NestedEnumCustomerCreationSourceFilter
  notIn: [CustomerCreationSource!]
}

input NestedEnumFuelTypeNullableFilter {
  equals: FuelType
  in: [FuelType!]
  not: NestedEnumFuelTypeNullableFilter
  notIn: [FuelType!]
}

input NestedEnumJoinWorkshopRequestStatusFilter {
  equals: JoinWorkshopRequestStatus
  in: [JoinWorkshopRequestStatus!]
  not: NestedEnumJoinWorkshopRequestStatusFilter
  notIn: [JoinWorkshopRequestStatus!]
}

input NestedEnumReviewsResponsesStatusFilter {
  equals: ReviewsResponsesStatus
  in: [ReviewsResponsesStatus!]
  not: NestedEnumReviewsResponsesStatusFilter
  notIn: [ReviewsResponsesStatus!]
}

input NestedEnumReviewsStatusFilter {
  equals: ReviewsStatus
  in: [ReviewsStatus!]
  not: NestedEnumReviewsStatusFilter
  notIn: [ReviewsStatus!]
}

input NestedEnumServiceRequestStatusNullableFilter {
  equals: ServiceRequestStatus
  in: [ServiceRequestStatus!]
  not: NestedEnumServiceRequestStatusNullableFilter
  notIn: [ServiceRequestStatus!]
}

input NestedEnumServicesStatusNullableFilter {
  equals: ServicesStatus
  in: [ServicesStatus!]
  not: NestedEnumServicesStatusNullableFilter
  notIn: [ServicesStatus!]
}

input NestedEnumTasksStatusNullableFilter {
  equals: TasksStatus
  in: [TasksStatus!]
  not: NestedEnumTasksStatusNullableFilter
  notIn: [TasksStatus!]
}

input NestedEnumUserReportTypeFilter {
  equals: UserReportType
  in: [UserReportType!]
  not: NestedEnumUserReportTypeFilter
  notIn: [UserReportType!]
}

input NestedEnumUserReportsReportedEntityTypeFilter {
  equals: UserReportsReportedEntityType
  in: [UserReportsReportedEntityType!]
  not: NestedEnumUserReportsReportedEntityTypeFilter
  notIn: [UserReportsReportedEntityType!]
}

input NestedEnumUserReportsStatusFilter {
  equals: UserReportsStatus
  in: [UserReportsStatus!]
  not: NestedEnumUserReportsStatusFilter
  notIn: [UserReportsStatus!]
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

input NestedEnumUsersStatusNullableFilter {
  equals: UsersStatus
  in: [UsersStatus!]
  not: NestedEnumUsersStatusNullableFilter
  notIn: [UsersStatus!]
}

input NestedEnumWorkshopsDetailsStatusNullableFilter {
  equals: WorkshopsDetailsStatus
  in: [WorkshopsDetailsStatus!]
  not: NestedEnumWorkshopsDetailsStatusNullableFilter
  notIn: [WorkshopsDetailsStatus!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

enum NullsOrder {
  first
  last
}

type Query {
  AdminTest: String!
  UserTest: String!
  address(addressId: BigInt!): Address!
  addresses: [Address!]!
  findAllUsers: [User!]!
  findEmployee(where: EmployeeWhereUniqueInput!): Employee!
  findUserByEmail(email: String!, options: [Boolean!]!): User!
  findUserById(options: [Boolean!], userId: BigInt!): User!
  findUsers(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  guest(where: GuestWhereUniqueInput!): Guest
  guests(cursor: GuestWhereUniqueInput, distinct: [GuestScalarFieldEnum!], orderBy: [GuestOrderByWithRelationInput!], skip: Int, take: Int, where: GuestWhereInput): [Guest!]!
  workshop(workshopId: BigInt!): Workshop!
  workshops(cursor: WorkshopWhereUniqueInput, distinct: [WorkshopScalarFieldEnum!], orderBy: [WorkshopOrderByWithRelationInput!], skip: Int, take: Int, where: WorkshopWhereInput): [Workshop!]!
}

input RegisterEmployeeInput {
  joinWorkshopRequests: JoinWorkshopRequestCreateNestedManyWithoutEmployeeInput
  joinedAt: DateTime
  login: String!
  nickname: BigInt
  password: String!
}

input RegisterUserInput {
  address: AddressCreateNestedOneWithoutUserInput
  avatarURL: String
  email: String!
  firstName: String
  lastName: String
  password: String!
  telephoneNumber: String!
  username: String!
}

input RegisterWorkshopInput {
  address: AddressCreateNestedOneWithoutWorkshopInput
  email: String!
  isManagingWork: Boolean
  isOfferingService: Boolean
  jobCategories: JobCategoryCreateNestedManyWithoutWorkshopsInput
  ownerEmployee: RegisterEmployeeInput!
  password: String!
  telephoneNumber: String!
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
  workshopJobs: WorkshopJobCreateNestedManyWithoutWorkshopInput
}

type RegisterWorkshopResponse {
  ownerEmployee: Employee!
  workshop: Workshop!
}

input RequestDeviceRegistrationInput {
  code: String!
  deviceName: String!
  deviceSerialNumber: String!
}

type Review {
  _count: ReviewCount!
  createdAt: DateTime!
  originalRating: Decimal
  originalReviewText: String

  """Note: Optional because field defaults to 0.00"""
  rating: Decimal!
  reviewId: BigInt!
  reviewResponses: [ReviewResponse!]
  reviewText: String!

  """Note: Optional because field defaults to PENDING"""
  status: ReviewsStatus!
  updatedAt: DateTime
  user: User!
  userId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ReviewAvgAggregate {
  originalRating: Decimal
  rating: Decimal
  reviewId: Float
  userId: Float
  workshopId: Float
}

type ReviewCount {
  reviewResponses: Int!
}

type ReviewCountAggregate {
  _all: Int!
  createdAt: Int!
  originalRating: Int!
  originalReviewText: Int!
  rating: Int!
  reviewId: Int!
  reviewText: Int!
  status: Int!
  updatedAt: Int!
  userId: Int!
  workshopId: Int!
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

type ReviewMaxAggregate {
  createdAt: DateTime
  originalRating: Decimal
  originalReviewText: String
  rating: Decimal
  reviewId: BigInt
  reviewText: String
  status: ReviewsStatus
  updatedAt: DateTime
  userId: BigInt
  workshopId: BigInt
}

type ReviewMinAggregate {
  createdAt: DateTime
  originalRating: Decimal
  originalReviewText: String
  rating: Decimal
  reviewId: BigInt
  reviewText: String
  status: ReviewsStatus
  updatedAt: DateTime
  userId: BigInt
  workshopId: BigInt
}

input ReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewRelationFilter {
  is: ReviewWhereInput
  isNot: ReviewWhereInput
}

type ReviewResponse {
  _count: ReviewResponseCount!
  childrenResponses: [ReviewResponse!]
  createdAt: DateTime!
  originalResponseText: String
  parentResponse: ReviewResponse
  parentResponseId: BigInt
  responseText: String!
  review: Review!
  reviewId: BigInt!
  reviewResponseId: BigInt!

  """Note: Optional because field defaults to pending"""
  status: ReviewsResponsesStatus!
  updatedAt: DateTime
  user: User!
  userId: BigInt!
}

type ReviewResponseCount {
  childrenResponses: Int!
}

input ReviewResponseListRelationFilter {
  every: ReviewResponseWhereInput
  none: ReviewResponseWhereInput
  some: ReviewResponseWhereInput
}

input ReviewResponseNullableRelationFilter {
  is: ReviewResponseWhereInput
  isNot: ReviewResponseWhereInput
}

input ReviewResponseOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewResponseWhereInput {
  AND: [ReviewResponseWhereInput!]
  NOT: [ReviewResponseWhereInput!]
  OR: [ReviewResponseWhereInput!]
  childrenResponses: ReviewResponseListRelationFilter
  originalResponseText: StringNullableFilter
  parentResponse: ReviewResponseNullableRelationFilter
  parentResponseId: BigIntNullableFilter
  responseText: StringFilter
  review: ReviewRelationFilter
  reviewId: BigIntFilter
  reviewResponseId: BigIntFilter
  status: EnumReviewsResponsesStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
}

type ReviewSumAggregate {
  originalRating: Decimal
  rating: Decimal
  reviewId: BigInt
  userId: BigInt
  workshopId: BigInt
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  originalRating: DecimalNullableFilter
  originalReviewText: StringNullableFilter
  rating: DecimalFilter
  reviewId: BigIntFilter
  reviewResponses: ReviewResponseListRelationFilter
  reviewText: StringFilter
  status: EnumReviewsStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

enum ReviewsResponsesStatus {
  ACCEPTED
  DENIED
  PENDING
}

enum ReviewsStatus {
  ACCEPTED
  DENIED
  PENDING
}

type Service {
  _count: ServiceCount!
  addedAt: DateTime!
  addedBy: String
  customer: Customer!
  customerId: BigInt!
  deletedAt: DateTime
  description: String
  employee: Employee!
  employeeId: BigInt!

  """Note: Optional because field defaults to false"""
  payedOff: Boolean!

  """Note: Optional because field defaults to 0.00"""
  paymentAmount: Decimal!
  resolvedAt: DateTime
  resolvedBy: String
  serviceEndDate: DateTime
  serviceId: BigInt!
  serviceRequest: ServiceRequest
  serviceRequestId: BigInt

  """Note: Optional because field defaults to now()"""
  serviceStartDate: DateTime!
  status: ServicesStatus
  tasks: [Task!]
  updatedAt: DateTime
  updatedBy: String
  vehicle: Vehicle!
  vehicleId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ServiceAvgAggregate {
  addedBy: Float
  customerId: Float
  employeeId: Float
  paymentAmount: Decimal
  resolvedBy: Float
  serviceId: Float
  serviceRequestId: Float
  updatedBy: Float
  vehicleId: Float
  workshopId: Float
}

type ServiceCount {
  tasks: Int!
}

type ServiceCountAggregate {
  _all: Int!
  addedAt: Int!
  addedBy: Int!
  customerId: Int!
  deletedAt: Int!
  description: Int!
  employeeId: Int!
  payedOff: Int!
  paymentAmount: Int!
  resolvedAt: Int!
  resolvedBy: Int!
  serviceEndDate: Int!
  serviceId: Int!
  serviceRequestId: Int!
  serviceStartDate: Int!
  status: Int!
  updatedAt: Int!
  updatedBy: Int!
  vehicleId: Int!
  workshopId: Int!
}

input ServiceListRelationFilter {
  every: ServiceWhereInput
  none: ServiceWhereInput
  some: ServiceWhereInput
}

type ServiceMaxAggregate {
  addedAt: DateTime
  addedBy: String
  customerId: BigInt
  deletedAt: DateTime
  description: String
  employeeId: BigInt
  payedOff: Boolean
  paymentAmount: Decimal
  resolvedAt: DateTime
  resolvedBy: String
  serviceEndDate: DateTime
  serviceId: BigInt
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  updatedAt: DateTime
  updatedBy: String
  vehicleId: BigInt
  workshopId: BigInt
}

type ServiceMinAggregate {
  addedAt: DateTime
  addedBy: String
  customerId: BigInt
  deletedAt: DateTime
  description: String
  employeeId: BigInt
  payedOff: Boolean
  paymentAmount: Decimal
  resolvedAt: DateTime
  resolvedBy: String
  serviceEndDate: DateTime
  serviceId: BigInt
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  updatedAt: DateTime
  updatedBy: String
  vehicleId: BigInt
  workshopId: BigInt
}

input ServiceNullableRelationFilter {
  is: ServiceWhereInput
  isNot: ServiceWhereInput
}

input ServiceOrderByRelationAggregateInput {
  _count: SortOrder
}

input ServiceOrderByWithRelationInput {
  addedAt: SortOrder
  addedBy: SortOrderInput
  customer: CustomerOrderByWithRelationInput
  customerId: SortOrder
  description: SortOrderInput
  employee: EmployeeOrderByWithRelationInput
  employeeId: SortOrder
  payedOff: SortOrder
  paymentAmount: SortOrder
  serviceEndDate: SortOrderInput
  serviceId: SortOrder
  serviceRequest: ServiceRequestOrderByWithRelationInput
  serviceRequestId: SortOrderInput
  serviceStartDate: SortOrder
  status: SortOrderInput
  tasks: TaskOrderByRelationAggregateInput
  vehicle: VehicleOrderByWithRelationInput
  vehicleId: SortOrder
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
}

input ServiceRelationFilter {
  is: ServiceWhereInput
  isNot: ServiceWhereInput
}

type ServiceRequest {
  _count: ServiceRequestCount!
  approvedService: Service
  approvedServiceId: BigInt
  createdAt: DateTime!
  deletedAt: DateTime
  description: String

  """
  Note: Cannot fill guest while creating service request, because sr with guest can only be created by guest creation.
  """
  guest: Guest
  guestId: BigInt
  jobs: [Job!]
  resolvedAt: DateTime
  resolvedBy: String
  serviceRequestId: BigInt!

  """Note: Optional because field defaults to pending"""
  status: ServiceRequestStatus
  user: User
  userId: BigInt
  vehicle: Vehicle!
  vehicleId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ServiceRequestAvgAggregate {
  approvedServiceId: Float
  guestId: Float
  resolvedBy: Float
  serviceRequestId: Float
  userId: Float
  vehicleId: Float
  workshopId: Float
}

type ServiceRequestCount {
  jobs: Int!
}

type ServiceRequestCountAggregate {
  _all: Int!
  approvedServiceId: Int!
  createdAt: Int!
  deletedAt: Int!
  description: Int!
  guestId: Int!
  resolvedAt: Int!
  resolvedBy: Int!
  serviceRequestId: Int!
  status: Int!
  userId: Int!
  vehicleId: Int!
  workshopId: Int!
}

input ServiceRequestCreateNestedOneWithoutGuestInput {
  create: ServiceRequestCreateWithoutGuestInput
}

input ServiceRequestCreateWithoutGuestInput {
  description: String
  jobs: JobCreateNestedManyWithoutServiceRequestsInput
  user: UserCreateNestedOneWithoutServiceRequestsInput
  vehicle: VehicleCreateNestedOneWithoutServiceRequestsInput!
  workshop: WorkshopCreateNestedOneWithoutServiceRequestsInput!
}

input ServiceRequestListRelationFilter {
  every: ServiceRequestWhereInput
  none: ServiceRequestWhereInput
  some: ServiceRequestWhereInput
}

type ServiceRequestMaxAggregate {
  approvedServiceId: BigInt
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  guestId: BigInt
  resolvedAt: DateTime
  resolvedBy: String
  serviceRequestId: BigInt
  status: ServiceRequestStatus
  userId: BigInt
  vehicleId: BigInt
  workshopId: BigInt
}

type ServiceRequestMinAggregate {
  approvedServiceId: BigInt
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  guestId: BigInt
  resolvedAt: DateTime
  resolvedBy: String
  serviceRequestId: BigInt
  status: ServiceRequestStatus
  userId: BigInt
  vehicleId: BigInt
  workshopId: BigInt
}

input ServiceRequestNullableRelationFilter {
  is: ServiceRequestWhereInput
  isNot: ServiceRequestWhereInput
}

input ServiceRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input ServiceRequestOrderByWithRelationInput {
  approvedService: ServiceOrderByWithRelationInput
  approvedServiceId: SortOrderInput
  description: SortOrderInput
  guest: GuestOrderByWithRelationInput
  guestId: SortOrderInput
  jobs: JobOrderByRelationAggregateInput
  serviceRequestId: SortOrder
  status: SortOrderInput
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
  vehicle: VehicleOrderByWithRelationInput
  vehicleId: SortOrder
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
}

enum ServiceRequestStatus {
  ACCEPTED
  CANCELLED
  PENDING
  REJECTED
}

type ServiceRequestSumAggregate {
  approvedServiceId: BigInt
  guestId: BigInt
  resolvedBy: String
  serviceRequestId: BigInt
  userId: BigInt
  vehicleId: BigInt
  workshopId: BigInt
}

input ServiceRequestWhereInput {
  AND: [ServiceRequestWhereInput!]
  NOT: [ServiceRequestWhereInput!]
  OR: [ServiceRequestWhereInput!]
  approvedService: ServiceNullableRelationFilter
  approvedServiceId: BigIntNullableFilter
  description: StringNullableFilter
  guest: GuestNullableRelationFilter
  guestId: BigIntNullableFilter
  jobs: JobListRelationFilter
  serviceRequestId: BigIntFilter
  status: EnumServiceRequestStatusNullableFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  vehicle: VehicleRelationFilter
  vehicleId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

type ServiceSumAggregate {
  addedBy: String
  customerId: BigInt
  employeeId: BigInt
  paymentAmount: Decimal
  resolvedBy: String
  serviceId: BigInt
  serviceRequestId: BigInt
  updatedBy: String
  vehicleId: BigInt
  workshopId: BigInt
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  addedAt: DateTimeFilter
  addedBy: BigIntNullableFilter
  customer: CustomerRelationFilter
  customerId: BigIntFilter
  description: StringNullableFilter
  employee: EmployeeRelationFilter
  employeeId: BigIntFilter
  payedOff: BoolFilter
  paymentAmount: DecimalFilter
  serviceEndDate: DateTimeNullableFilter
  serviceId: BigIntFilter
  serviceRequest: ServiceRequestNullableRelationFilter
  serviceRequestId: BigIntNullableFilter
  serviceStartDate: DateTimeFilter
  status: EnumServicesStatusNullableFilter
  tasks: TaskListRelationFilter
  vehicle: VehicleRelationFilter
  vehicleId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

enum ServicesStatus {
  CANCELLED
  COMPLETED
  PENDING
}

type SessionData {
  deviceId: String!
  deviceInfo: String
  deviceName: String
  deviceSerialNumber: String
  expiresAt: DateTime!
  ipAddress: String
  issuedAt: DateTime!
  refreshToken: String!
  sessionDataId: String!
  user: User!
  userId: BigInt!
}

input SessionDataListRelationFilter {
  every: SessionDataWhereInput
  none: SessionDataWhereInput
  some: SessionDataWhereInput
}

input SessionDataOrderByRelationAggregateInput {
  _count: SortOrder
}

input SessionDataWhereInput {
  AND: [SessionDataWhereInput!]
  NOT: [SessionDataWhereInput!]
  OR: [SessionDataWhereInput!]
  deviceId: StringFilter
  deviceInfo: StringNullableFilter
  deviceName: StringNullableFilter
  deviceSerialNumber: StringNullableFilter
  expiresAt: DateTimeFilter
  ipAddress: StringNullableFilter
  issuedAt: DateTimeFilter
  refreshToken: StringFilter
  sessionDataId: StringFilter
  user: UserRelationFilter
  userId: BigIntFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  _count: TaskCount!
  createdAt: DateTime!
  createdBy: String
  customName: String
  description: String!
  employees: [Employee!]

  """Note: Optional because field defaults to 0.00"""
  executionTime: Float!

  """Note: Optional because field defaults to 0.00"""
  partsCost: Decimal!
  resolvedAt: DateTime
  resolvedBy: String
  service: Service!
  serviceId: BigInt!

  """Note: Optional because field defaults to pending"""
  status: TasksStatus
  taskId: BigInt!
  updatedAt: DateTime
  updatedBy: String
  workshopJob: WorkshopJob!
  workshopJobId: BigInt!
}

type TaskCount {
  employees: Int!
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

input TaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  customName: StringNullableFilter
  description: StringFilter
  employees: EmployeeListRelationFilter
  executionTime: FloatFilter
  partsCost: DecimalFilter
  service: ServiceRelationFilter
  serviceId: BigIntFilter
  status: EnumTasksStatusNullableFilter
  taskId: BigIntFilter
  workshopJob: WorkshopJobRelationFilter
  workshopJobId: BigIntFilter
}

enum TasksStatus {
  CANCELLED
  COMPLETED
  PENDING
}

"""Note: CREATE USER ONLY IF PHONE NUMBER IS CONFIRMED."""
type User {
  _count: UserCount!
  address: Address
  addressId: String
  avatarURL: String
  createdAt: DateTime!
  customers: [Customer!]
  deletedAt: DateTime
  email: String!
  employees: [Employee!]
  firstName: String
  isVerified: Boolean
  joinWorkshopRequests: [JoinWorkshopRequest!]
  lastName: String
  reviewResponses: [ReviewResponse!]
  reviews: [Review!]
  role: UserRole!
  serviceRequests: [ServiceRequest!]
  sessionData: [SessionData!]
  status: UsersStatus
  telephoneNumber: String!
  updatedAt: DateTime
  userId: BigInt!
  userReports: [UserReport!]
  username: String!
  vehicles: [Vehicle!]
  workshops: [Workshop!]
}

type UserAvgAggregate {
  addressId: Float
  userId: Float
}

type UserCount {
  customers: Int!
  employees: Int!
  joinWorkshopRequests: Int!
  reviewResponses: Int!
  reviews: Int!
  serviceRequests: Int!
  sessionData: Int!
  userReports: Int!
  vehicles: Int!
  workshops: Int!
}

type UserCountAggregate {
  _all: Int!
  addressId: Int!
  avatarURL: Int!
  createdAt: Int!
  deletedAt: Int!
  email: Int!
  firstName: Int!
  isVerified: Int!
  lastName: Int!
  role: Int!
  status: Int!
  telephoneNumber: Int!
  updatedAt: Int!
  userId: Int!
  username: Int!
}

input UserCreateNestedOneWithoutJoinWorkshopRequestsInput {
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutServiceRequestsInput {
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutVehiclesInput {
  connect: UserWhereUniqueInput
}

type UserMaxAggregate {
  addressId: String
  avatarURL: String
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  firstName: String
  isVerified: Boolean
  lastName: String
  role: UserRole
  status: UsersStatus
  telephoneNumber: String
  updatedAt: DateTime
  userId: BigInt
  username: String
}

type UserMinAggregate {
  addressId: String
  avatarURL: String
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  firstName: String
  isVerified: Boolean
  lastName: String
  role: UserRole
  status: UsersStatus
  telephoneNumber: String
  updatedAt: DateTime
  userId: BigInt
  username: String
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserOrderByWithRelationInput {
  address: AddressOrderByWithRelationInput
  addressId: SortOrderInput
  avatarURL: SortOrderInput
  customers: CustomerOrderByRelationAggregateInput
  email: SortOrder
  employees: EmployeeOrderByRelationAggregateInput
  firstName: SortOrderInput
  isVerified: SortOrderInput
  joinWorkshopRequests: JoinWorkshopRequestOrderByRelationAggregateInput
  lastName: SortOrderInput
  password: SortOrder
  reviewResponses: ReviewResponseOrderByRelationAggregateInput
  reviews: ReviewOrderByRelationAggregateInput
  role: SortOrder
  serviceRequests: ServiceRequestOrderByRelationAggregateInput
  sessionData: SessionDataOrderByRelationAggregateInput
  status: SortOrderInput
  telephoneNumber: SortOrder
  userId: SortOrder
  userReports: UserReportOrderByRelationAggregateInput
  username: SortOrder
  vehicles: VehicleOrderByRelationAggregateInput
  workshops: WorkshopOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

type UserReport {
  createdAt: DateTime!
  reportId: BigInt!
  reportText: String!
  reportType: UserReportType!
  reportedEntityType: UserReportsReportedEntityType!
  reportedId: BigInt!

  """Note: Optional because field defaults to pending"""
  status: UserReportsStatus!
  updatedAt: DateTime
  user: User!
  userId: BigInt!
}

input UserReportListRelationFilter {
  every: UserReportWhereInput
  none: UserReportWhereInput
  some: UserReportWhereInput
}

input UserReportOrderByRelationAggregateInput {
  _count: SortOrder
}

enum UserReportType {
  FAKE_PROFILE
  FAKE_WORKSHOP
  FRAUDULENT_ACTIVITY
  HARRASMENT
  OFFENSIVE_CONTENT
  OTHER
  PRIVACY_VIOLATION
  SPAM
  VIOLATION_OF_TERMS
  WORKSHOP_IMPERSONATION
}

input UserReportWhereInput {
  AND: [UserReportWhereInput!]
  NOT: [UserReportWhereInput!]
  OR: [UserReportWhereInput!]
  reportId: BigIntFilter
  reportText: StringFilter
  reportType: EnumUserReportTypeFilter
  reportedEntityType: EnumUserReportsReportedEntityTypeFilter
  reportedId: BigIntFilter
  status: EnumUserReportsStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
}

enum UserReportsReportedEntityType {
  REVIEW
  REVIEW_RESPONSE
  SERVICE
  SERVICE_REQUEST
  USER
  WORKSHOP
}

enum UserReportsStatus {
  ACTIVE
  CLOSED_CONFIRMED
  CLOSED_DENIED
  PENDING
}

enum UserRole {
  ADMIN
  MODERATOR
  SUPERADMIN
  USER
}

enum UserScalarFieldEnum {
  addressId
  avatarURL
  createdAt
  deletedAt
  email
  firstName
  isVerified
  lastName
  password
  role
  status
  telephoneNumber
  updatedAt
  userId
  username
}

type UserSumAggregate {
  addressId: String
  userId: BigInt
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  address: AddressNullableRelationFilter
  addressId: BigIntNullableFilter
  avatarURL: StringNullableFilter
  customers: CustomerListRelationFilter
  email: StringFilter
  employees: EmployeeListRelationFilter
  firstName: StringNullableFilter
  isVerified: BoolNullableFilter
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  lastName: StringNullableFilter
  password: StringFilter
  reviewResponses: ReviewResponseListRelationFilter
  reviews: ReviewListRelationFilter
  role: EnumUserRoleFilter
  serviceRequests: ServiceRequestListRelationFilter
  sessionData: SessionDataListRelationFilter
  status: EnumUsersStatusNullableFilter
  telephoneNumber: StringFilter
  userId: BigIntFilter
  userReports: UserReportListRelationFilter
  username: StringFilter
  vehicles: VehicleListRelationFilter
  workshops: WorkshopListRelationFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  address: AddressNullableRelationFilter
  addressId: String
  avatarURL: StringNullableFilter
  customers: CustomerListRelationFilter
  email: String
  employees: EmployeeListRelationFilter
  firstName: StringNullableFilter
  isVerified: BoolNullableFilter
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  lastName: StringNullableFilter
  password: StringFilter
  reviewResponses: ReviewResponseListRelationFilter
  reviews: ReviewListRelationFilter
  role: EnumUserRoleFilter
  serviceRequests: ServiceRequestListRelationFilter
  sessionData: SessionDataListRelationFilter
  status: EnumUsersStatusNullableFilter
  telephoneNumber: StringFilter
  userId: BigInt
  userReports: UserReportListRelationFilter
  username: String
  vehicles: VehicleListRelationFilter
  workshops: WorkshopListRelationFilter
}

enum UsersStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

type Vehicle {
  _count: VehicleCount!
  customers: [Customer!]
  deletedAt: DateTime
  guest: Guest
  guestId: BigInt
  modelId: BigInt!
  serviceRequests: [ServiceRequest!]
  services: [Service!]
  user: User
  userId: BigInt
  vehicleDetails: VehicleDetails
  vehicleId: BigInt!
  vehicleModel: VehicleModel!
}

type VehicleBrand {
  _count: VehicleBrandCount!
  brandName: String!
  createdAt: DateTime!
  updatedAt: DateTime
  vehicleModels: [VehicleModel!]
}

type VehicleBrandCount {
  vehicleModels: Int!
}

input VehicleBrandOrderByWithRelationInput {
  brandName: SortOrder
  vehicleModels: VehicleModelOrderByRelationAggregateInput
}

input VehicleBrandRelationFilter {
  is: VehicleBrandWhereInput
  isNot: VehicleBrandWhereInput
}

input VehicleBrandWhereInput {
  AND: [VehicleBrandWhereInput!]
  NOT: [VehicleBrandWhereInput!]
  OR: [VehicleBrandWhereInput!]
  brandName: StringFilter
  vehicleModels: VehicleModelListRelationFilter
}

type VehicleCount {
  customers: Int!
  serviceRequests: Int!
  services: Int!
}

input VehicleCreateNestedOneWithoutGuestInput {
  create: VehicleCreateWithoutGuestInput
}

input VehicleCreateNestedOneWithoutServiceRequestsInput {
  connect: VehicleWhereUniqueInput
}

input VehicleCreateWithoutGuestInput {
  customers: CustomerCreateNestedManyWithoutVehiclesInput
  user: UserCreateNestedOneWithoutVehiclesInput
  vehicleDetails: VehicleDetailsCreateNestedOneWithoutVehicleInput
  vehicleModel: VehicleModelCreateNestedOneWithoutVehiclesInput!
}

type VehicleDetails {
  VIN: String
  bodyColor: BodyColors
  countryOfRegistration: String
  deletedAt: DateTime
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicle: Vehicle!
  vehicleDetailsId: BigInt!
  vehicleId: BigInt!
  yearOfProduction: Int
}

input VehicleDetailsCreateNestedOneWithoutVehicleInput {
  create: VehicleDetailsCreateWithoutVehicleInput
}

input VehicleDetailsCreateWithoutVehicleInput {
  VIN: String
  bodyColor: BodyColors
  countryOfRegistration: String
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicleDetailsId: BigInt
  yearOfProduction: Int
}

input VehicleDetailsNullableRelationFilter {
  is: VehicleDetailsWhereInput
  isNot: VehicleDetailsWhereInput
}

input VehicleDetailsOrderByWithRelationInput {
  VIN: SortOrderInput
  bodyColor: SortOrderInput
  countryOfRegistration: SortOrderInput
  engineCapacity: SortOrderInput
  engineNo: SortOrderInput
  fuelType: SortOrderInput
  licensePlate: SortOrderInput
  vehicle: VehicleOrderByWithRelationInput
  vehicleDetailsId: SortOrder
  vehicleId: SortOrder
  yearOfProduction: SortOrderInput
}

input VehicleDetailsWhereInput {
  AND: [VehicleDetailsWhereInput!]
  NOT: [VehicleDetailsWhereInput!]
  OR: [VehicleDetailsWhereInput!]
  VIN: StringNullableFilter
  bodyColor: EnumBodyColorsNullableFilter
  countryOfRegistration: StringNullableFilter
  engineCapacity: StringNullableFilter
  engineNo: StringNullableFilter
  fuelType: EnumFuelTypeNullableFilter
  licensePlate: StringNullableFilter
  vehicle: VehicleRelationFilter
  vehicleDetailsId: BigIntFilter
  vehicleId: BigIntFilter
  yearOfProduction: IntNullableFilter
}

input VehicleListRelationFilter {
  every: VehicleWhereInput
  none: VehicleWhereInput
  some: VehicleWhereInput
}

type VehicleModel {
  _count: VehicleModelCount!
  brand: String!
  createdAt: DateTime!
  modelId: BigInt!
  modelName: String!
  updatedAt: DateTime
  vehicles: [Vehicle!]
  vehiclesBrand: VehicleBrand!
}

type VehicleModelCount {
  vehicles: Int!
}

input VehicleModelCreateNestedOneWithoutVehiclesInput {
  connect: VehicleModelWhereUniqueInput
}

input VehicleModelListRelationFilter {
  every: VehicleModelWhereInput
  none: VehicleModelWhereInput
  some: VehicleModelWhereInput
}

input VehicleModelModelNameBrandCompoundUniqueInput {
  brand: String!
  modelName: String!
}

input VehicleModelOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleModelOrderByWithRelationInput {
  brand: SortOrder
  modelId: SortOrder
  modelName: SortOrder
  vehicles: VehicleOrderByRelationAggregateInput
  vehiclesBrand: VehicleBrandOrderByWithRelationInput
}

input VehicleModelRelationFilter {
  is: VehicleModelWhereInput
  isNot: VehicleModelWhereInput
}

input VehicleModelWhereInput {
  AND: [VehicleModelWhereInput!]
  NOT: [VehicleModelWhereInput!]
  OR: [VehicleModelWhereInput!]
  brand: StringFilter
  modelId: BigIntFilter
  modelName: StringFilter
  vehicles: VehicleListRelationFilter
  vehiclesBrand: VehicleBrandRelationFilter
}

input VehicleModelWhereUniqueInput {
  AND: [VehicleModelWhereInput!]
  NOT: [VehicleModelWhereInput!]
  OR: [VehicleModelWhereInput!]
  brand: StringFilter
  modelId: BigInt
  modelName: StringFilter
  modelName_brand: VehicleModelModelNameBrandCompoundUniqueInput
  vehicles: VehicleListRelationFilter
  vehiclesBrand: VehicleBrandRelationFilter
}

input VehicleNullableRelationFilter {
  is: VehicleWhereInput
  isNot: VehicleWhereInput
}

input VehicleOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleOrderByWithRelationInput {
  customers: CustomerOrderByRelationAggregateInput
  guest: GuestOrderByWithRelationInput
  guestId: SortOrderInput
  modelId: SortOrder
  serviceRequests: ServiceRequestOrderByRelationAggregateInput
  services: ServiceOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
  vehicleDetails: VehicleDetailsOrderByWithRelationInput
  vehicleId: SortOrder
  vehicleModel: VehicleModelOrderByWithRelationInput
}

input VehicleRelationFilter {
  is: VehicleWhereInput
  isNot: VehicleWhereInput
}

input VehicleWhereInput {
  AND: [VehicleWhereInput!]
  NOT: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  customers: CustomerListRelationFilter
  guest: GuestNullableRelationFilter
  guestId: BigIntNullableFilter
  modelId: BigIntFilter
  serviceRequests: ServiceRequestListRelationFilter
  services: ServiceListRelationFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  vehicleDetails: VehicleDetailsNullableRelationFilter
  vehicleId: BigIntFilter
  vehicleModel: VehicleModelRelationFilter
}

input VehicleWhereUniqueInput {
  AND: [VehicleWhereInput!]
  NOT: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  customers: CustomerListRelationFilter
  guest: GuestNullableRelationFilter
  guestId: BigInt
  modelId: BigIntFilter
  serviceRequests: ServiceRequestListRelationFilter
  services: ServiceListRelationFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  vehicleDetails: VehicleDetailsNullableRelationFilter
  vehicleId: BigInt
  vehicleModel: VehicleModelRelationFilter
}

type Workshop {
  _count: WorkshopCount!
  address: Address
  addressId: BigInt
  createdAt: DateTime!
  customers: [Customer!]
  deletedAt: DateTime
  email: String!
  employees: [Employee!]
  isManagingWork: Boolean
  isOfferingService: Boolean
  isVerified: Boolean
  jobCategories: [JobCategory!]
  joinWorkshopRequests: [JoinWorkshopRequest!]
  ownerId: BigInt!
  reviews: [Review!]
  serviceRequests: [ServiceRequest!]
  services: [Service!]
  telephoneNumber: String!
  updatedAt: DateTime
  updatedBy: String
  user: User!
  workshopDetails: WorkshopDetails
  workshopDeviceOTP: WorkshopDeviceOTP
  workshopDevices: [WorkshopDevice!]
  workshopId: BigInt!
  workshopJobs: [WorkshopJob!]
}

type WorkshopAvgAggregate {
  addressId: Float
  ownerId: Float
  updatedBy: Float
  workshopId: Float
}

type WorkshopCount {
  customers: Int!
  employees: Int!
  jobCategories: Int!
  joinWorkshopRequests: Int!
  reviews: Int!
  serviceRequests: Int!
  services: Int!
  workshopDevices: Int!
  workshopJobs: Int!
}

type WorkshopCountAggregate {
  _all: Int!
  addressId: Int!
  createdAt: Int!
  deletedAt: Int!
  email: Int!
  isManagingWork: Int!
  isOfferingService: Int!
  isVerified: Int!
  ownerId: Int!
  telephoneNumber: Int!
  updatedAt: Int!
  updatedBy: Int!
  workshopId: Int!
}

input WorkshopCreateNestedOneWithoutJoinWorkshopRequestsInput {
  connect: WorkshopWhereUniqueInput
}

input WorkshopCreateNestedOneWithoutServiceRequestsInput {
  connect: WorkshopWhereUniqueInput
}

type WorkshopDetails {
  NIP: String
  deletedAt: DateTime
  description: String
  logoURL: String

  """Note: Optional because it is set to 0.00 by default"""
  rating: Decimal
  status: WorkshopsDetailsStatus
  updatedAt: DateTime
  updatedBy: String
  workshop: Workshop!
  workshopId: BigInt!
  workshopName: String!
}

type WorkshopDetailsAvgAggregate {
  rating: Decimal
  updatedBy: Float
  workshopId: Float
}

type WorkshopDetailsCountAggregate {
  NIP: Int!
  _all: Int!
  deletedAt: Int!
  description: Int!
  logoURL: Int!
  rating: Int!
  status: Int!
  updatedAt: Int!
  updatedBy: Int!
  workshopId: Int!
  workshopName: Int!
}

input WorkshopDetailsCreateNestedOneWithoutWorkshopInput {
  create: WorkshopDetailsCreateWithoutWorkshopInput
}

input WorkshopDetailsCreateWithoutWorkshopInput {
  NIP: String
  description: String
  logoURL: String
  rating: Decimal
  workshopName: String!
}

type WorkshopDetailsMaxAggregate {
  NIP: String
  deletedAt: DateTime
  description: String
  logoURL: String
  rating: Decimal
  status: WorkshopsDetailsStatus
  updatedAt: DateTime
  updatedBy: String
  workshopId: BigInt
  workshopName: String
}

type WorkshopDetailsMinAggregate {
  NIP: String
  deletedAt: DateTime
  description: String
  logoURL: String
  rating: Decimal
  status: WorkshopsDetailsStatus
  updatedAt: DateTime
  updatedBy: String
  workshopId: BigInt
  workshopName: String
}

input WorkshopDetailsNullableRelationFilter {
  is: WorkshopDetailsWhereInput
  isNot: WorkshopDetailsWhereInput
}

input WorkshopDetailsOrderByWithRelationInput {
  NIP: SortOrderInput
  description: SortOrderInput
  logoURL: SortOrderInput
  rating: SortOrderInput
  status: SortOrderInput
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
  workshopName: SortOrder
}

type WorkshopDetailsSumAggregate {
  rating: Decimal
  updatedBy: String
  workshopId: BigInt
}

input WorkshopDetailsWhereInput {
  AND: [WorkshopDetailsWhereInput!]
  NIP: StringNullableFilter
  NOT: [WorkshopDetailsWhereInput!]
  OR: [WorkshopDetailsWhereInput!]
  description: StringNullableFilter
  logoURL: StringNullableFilter
  rating: DecimalNullableFilter
  status: EnumWorkshopsDetailsStatusNullableFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
  workshopName: StringFilter
}

type WorkshopDevice {
  acceptedAt: DateTime
  acceptedBy: String
  deviceName: String!
  lastLoginAt: DateTime
  lastLoginBy: String
  serialNumber: String!
  updatedAt: DateTime
  updatedBy: String
  workshop: Workshop!
  workshopDeviceId: BigInt!
  workshopId: BigInt!
}

input WorkshopDeviceListRelationFilter {
  every: WorkshopDeviceWhereInput
  none: WorkshopDeviceWhereInput
  some: WorkshopDeviceWhereInput
}

type WorkshopDeviceOTP {
  code: String!
  createdAt: DateTime!
  employeeId: BigInt!
  expiresAt: DateTime!
  workshop: Workshop!
  workshopDeviceOTPId: BigInt!
  workshopId: BigInt!
}

input WorkshopDeviceOTPNullableRelationFilter {
  is: WorkshopDeviceOTPWhereInput
  isNot: WorkshopDeviceOTPWhereInput
}

input WorkshopDeviceOTPOrderByWithRelationInput {
  code: SortOrder
  employeeId: SortOrder
  expiresAt: SortOrder
  workshop: WorkshopOrderByWithRelationInput
  workshopDeviceOTPId: SortOrder
  workshopId: SortOrder
}

input WorkshopDeviceOTPWhereInput {
  AND: [WorkshopDeviceOTPWhereInput!]
  NOT: [WorkshopDeviceOTPWhereInput!]
  OR: [WorkshopDeviceOTPWhereInput!]
  code: StringFilter
  employeeId: BigIntFilter
  expiresAt: DateTimeFilter
  workshop: WorkshopRelationFilter
  workshopDeviceOTPId: BigIntFilter
  workshopId: BigIntFilter
}

input WorkshopDeviceOrderByRelationAggregateInput {
  _count: SortOrder
}

input WorkshopDeviceWhereInput {
  AND: [WorkshopDeviceWhereInput!]
  NOT: [WorkshopDeviceWhereInput!]
  OR: [WorkshopDeviceWhereInput!]
  acceptedAt: DateTimeNullableFilter
  acceptedBy: BigIntNullableFilter
  deviceName: StringFilter
  lastLoginAt: DateTimeNullableFilter
  lastLoginBy: BigIntNullableFilter
  serialNumber: StringFilter
  workshop: WorkshopRelationFilter
  workshopDeviceId: BigIntFilter
  workshopId: BigIntFilter
}

type WorkshopJob {
  _count: WorkshopJobCount!

  """Note: Optional because field defaults to true"""
  availability: Boolean!
  createdAt: DateTime!
  createdBy: String
  job: Job!
  jobId: BigInt!
  maxPrice: Decimal
  minPrice: Decimal
  tasks: [Task!]
  updatedAt: DateTime
  updatedBy: String
  workshop: Workshop!
  workshopId: BigInt!
  workshopJobDescription: String
  workshopJobId: BigInt!
}

type WorkshopJobAvgAggregate {
  createdBy: Float
  jobId: Float
  maxPrice: Decimal
  minPrice: Decimal
  updatedBy: Float
  workshopId: Float
  workshopJobId: Float
}

type WorkshopJobCount {
  tasks: Int!
}

type WorkshopJobCountAggregate {
  _all: Int!
  availability: Int!
  createdAt: Int!
  createdBy: Int!
  jobId: Int!
  maxPrice: Int!
  minPrice: Int!
  updatedAt: Int!
  updatedBy: Int!
  workshopId: Int!
  workshopJobDescription: Int!
  workshopJobId: Int!
}

input WorkshopJobCreateManyWorkshopInput {
  availability: Boolean
  jobId: BigInt!
  maxPrice: Decimal
  minPrice: Decimal
  workshopJobDescription: String
}

input WorkshopJobCreateManyWorkshopInputEnvelope {
  data: [WorkshopJobCreateManyWorkshopInput!]!
  skipDuplicates: Boolean
}

input WorkshopJobCreateNestedManyWithoutWorkshopInput {
  create: [WorkshopJobCreateWithoutWorkshopInput!]
  createMany: WorkshopJobCreateManyWorkshopInputEnvelope
}

input WorkshopJobCreateWithoutWorkshopInput {
  availability: Boolean
  job: JobCreateNestedOneWithoutJobWorkshopsInput!
  maxPrice: Decimal
  minPrice: Decimal
  workshopJobDescription: String
}

input WorkshopJobListRelationFilter {
  every: WorkshopJobWhereInput
  none: WorkshopJobWhereInput
  some: WorkshopJobWhereInput
}

type WorkshopJobMaxAggregate {
  availability: Boolean
  createdAt: DateTime
  createdBy: String
  jobId: BigInt
  maxPrice: Decimal
  minPrice: Decimal
  updatedAt: DateTime
  updatedBy: String
  workshopId: BigInt
  workshopJobDescription: String
  workshopJobId: BigInt
}

type WorkshopJobMinAggregate {
  availability: Boolean
  createdAt: DateTime
  createdBy: String
  jobId: BigInt
  maxPrice: Decimal
  minPrice: Decimal
  updatedAt: DateTime
  updatedBy: String
  workshopId: BigInt
  workshopJobDescription: String
  workshopJobId: BigInt
}

input WorkshopJobOrderByRelationAggregateInput {
  _count: SortOrder
}

input WorkshopJobRelationFilter {
  is: WorkshopJobWhereInput
  isNot: WorkshopJobWhereInput
}

type WorkshopJobSumAggregate {
  createdBy: String
  jobId: BigInt
  maxPrice: Decimal
  minPrice: Decimal
  updatedBy: String
  workshopId: BigInt
  workshopJobId: BigInt
}

input WorkshopJobWhereInput {
  AND: [WorkshopJobWhereInput!]
  NOT: [WorkshopJobWhereInput!]
  OR: [WorkshopJobWhereInput!]
  availability: BoolFilter
  job: JobRelationFilter
  jobId: BigIntFilter
  maxPrice: DecimalNullableFilter
  minPrice: DecimalNullableFilter
  tasks: TaskListRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
  workshopJobDescription: StringNullableFilter
  workshopJobId: BigIntFilter
}

input WorkshopListRelationFilter {
  every: WorkshopWhereInput
  none: WorkshopWhereInput
  some: WorkshopWhereInput
}

type WorkshopMaxAggregate {
  addressId: BigInt
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isManagingWork: Boolean
  isOfferingService: Boolean
  isVerified: Boolean
  ownerId: BigInt
  telephoneNumber: String
  updatedAt: DateTime
  updatedBy: String
  workshopId: BigInt
}

type WorkshopMinAggregate {
  addressId: BigInt
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isManagingWork: Boolean
  isOfferingService: Boolean
  isVerified: Boolean
  ownerId: BigInt
  telephoneNumber: String
  updatedAt: DateTime
  updatedBy: String
  workshopId: BigInt
}

input WorkshopNullableRelationFilter {
  is: WorkshopWhereInput
  isNot: WorkshopWhereInput
}

input WorkshopOrderByRelationAggregateInput {
  _count: SortOrder
}

input WorkshopOrderByWithRelationInput {
  address: AddressOrderByWithRelationInput
  addressId: SortOrderInput
  customers: CustomerOrderByRelationAggregateInput
  email: SortOrder
  employees: EmployeeOrderByRelationAggregateInput
  isManagingWork: SortOrderInput
  isOfferingService: SortOrderInput
  isVerified: SortOrderInput
  jobCategories: JobCategoryOrderByRelationAggregateInput
  joinWorkshopRequests: JoinWorkshopRequestOrderByRelationAggregateInput
  ownerId: SortOrder
  password: SortOrder
  reviews: ReviewOrderByRelationAggregateInput
  serviceRequests: ServiceRequestOrderByRelationAggregateInput
  services: ServiceOrderByRelationAggregateInput
  telephoneNumber: SortOrder
  user: UserOrderByWithRelationInput
  workshopDetails: WorkshopDetailsOrderByWithRelationInput
  workshopDeviceOTP: WorkshopDeviceOTPOrderByWithRelationInput
  workshopDevices: WorkshopDeviceOrderByRelationAggregateInput
  workshopId: SortOrder
  workshopJobs: WorkshopJobOrderByRelationAggregateInput
}

input WorkshopRelationFilter {
  is: WorkshopWhereInput
  isNot: WorkshopWhereInput
}

enum WorkshopScalarFieldEnum {
  addressId
  createdAt
  deletedAt
  email
  isManagingWork
  isOfferingService
  isVerified
  ownerId
  password
  telephoneNumber
  updatedAt
  updatedBy
  workshopId
}

type WorkshopSumAggregate {
  addressId: BigInt
  ownerId: BigInt
  updatedBy: String
  workshopId: BigInt
}

input WorkshopWhereInput {
  AND: [WorkshopWhereInput!]
  NOT: [WorkshopWhereInput!]
  OR: [WorkshopWhereInput!]
  address: AddressNullableRelationFilter
  addressId: BigIntNullableFilter
  customers: CustomerListRelationFilter
  email: StringFilter
  employees: EmployeeListRelationFilter
  isManagingWork: BoolNullableFilter
  isOfferingService: BoolNullableFilter
  isVerified: BoolNullableFilter
  jobCategories: JobCategoryListRelationFilter
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  ownerId: BigIntFilter
  password: StringFilter
  reviews: ReviewListRelationFilter
  serviceRequests: ServiceRequestListRelationFilter
  services: ServiceListRelationFilter
  telephoneNumber: StringFilter
  user: UserRelationFilter
  workshopDetails: WorkshopDetailsNullableRelationFilter
  workshopDeviceOTP: WorkshopDeviceOTPNullableRelationFilter
  workshopDevices: WorkshopDeviceListRelationFilter
  workshopId: BigIntFilter
  workshopJobs: WorkshopJobListRelationFilter
}

input WorkshopWhereUniqueInput {
  AND: [WorkshopWhereInput!]
  NOT: [WorkshopWhereInput!]
  OR: [WorkshopWhereInput!]
  address: AddressNullableRelationFilter
  addressId: BigInt
  customers: CustomerListRelationFilter
  email: String
  employees: EmployeeListRelationFilter
  isManagingWork: BoolNullableFilter
  isOfferingService: BoolNullableFilter
  isVerified: BoolNullableFilter
  jobCategories: JobCategoryListRelationFilter
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  ownerId: BigIntFilter
  password: StringFilter
  reviews: ReviewListRelationFilter
  serviceRequests: ServiceRequestListRelationFilter
  services: ServiceListRelationFilter
  telephoneNumber: StringFilter
  user: UserRelationFilter
  workshopDetails: WorkshopDetailsNullableRelationFilter
  workshopDeviceOTP: WorkshopDeviceOTPNullableRelationFilter
  workshopDevices: WorkshopDeviceListRelationFilter
  workshopId: BigInt
  workshopJobs: WorkshopJobListRelationFilter
}

enum WorkshopsDetailsStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}