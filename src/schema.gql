# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  _count: AddressCount!
  addressId: BigInt!
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  persons: [Person!]
  postCode: String!
  region: String!
  street: String
  workshops: [Workshop!]
}

type AddressAvgAggregate {
  addressId: Float
}

type AddressCount {
  persons: Int!
  workshops: Int!
}

type AddressCountAggregate {
  _all: Int!
  addressId: Int!
  buildingNo: Int!
  city: Int!
  country: Int!
  flatNo: Int!
  postCode: Int!
  region: Int!
  street: Int!
}

input AddressCreateInput {
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  postCode: String!
  region: String!
  street: String
}

type AddressMaxAggregate {
  addressId: BigInt
  buildingNo: String
  city: String
  country: String
  flatNo: String
  postCode: String
  region: String
  street: String
}

type AddressMinAggregate {
  addressId: BigInt
  buildingNo: String
  city: String
  country: String
  flatNo: String
  postCode: String
  region: String
  street: String
}

type AddressSumAggregate {
  addressId: BigInt
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

enum BodyColors {
  black
  blue
  brown
  gray
  green
  other
  red
  silver
  white
  yellow
}

type Customer {
  NIP: String
  _count: CustomerCount!
  companyName: String
  customerId: BigInt!
  deletedAt: DateTime
  description: String
  person: Person!
  services: [Service!]
  totalDue: Decimal!
  workshop: Workshop!
  workshopId: BigInt!
}

type CustomerAvgAggregate {
  customerId: Float
  totalDue: Decimal
  workshopId: Float
}

type CustomerCount {
  services: Int!
}

type CustomerCountAggregate {
  NIP: Int!
  _all: Int!
  companyName: Int!
  customerId: Int!
  deletedAt: Int!
  description: Int!
  totalDue: Int!
  workshopId: Int!
}

type CustomerMaxAggregate {
  NIP: String
  companyName: String
  customerId: BigInt
  deletedAt: DateTime
  description: String
  totalDue: Decimal
  workshopId: BigInt
}

type CustomerMinAggregate {
  NIP: String
  companyName: String
  customerId: BigInt
  deletedAt: DateTime
  description: String
  totalDue: Decimal
  workshopId: BigInt
}

type CustomerSumAggregate {
  customerId: BigInt
  totalDue: Decimal
  workshopId: BigInt
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

type DeletePayload {
  success: Boolean!
}

type Employee {
  _count: EmployeeCount!
  deletedAt: DateTime
  employeeId: BigInt!
  employeeTasks: [EmployeeTask!]
  joinedAt: DateTime!
  permissionSet: PermissionSet
  permissionSetId: Int
  person: Person!
  services: [Service!]
  workshop: Workshop!
  workshopId: BigInt!
}

type EmployeeAvgAggregate {
  employeeId: Float
  permissionSetId: Float
  workshopId: Float
}

type EmployeeCount {
  employeeTasks: Int!
  services: Int!
}

type EmployeeCountAggregate {
  _all: Int!
  deletedAt: Int!
  employeeId: Int!
  joinedAt: Int!
  permissionSetId: Int!
  workshopId: Int!
}

type EmployeeMaxAggregate {
  deletedAt: DateTime
  employeeId: BigInt
  joinedAt: DateTime
  permissionSetId: Int
  workshopId: BigInt
}

type EmployeeMinAggregate {
  deletedAt: DateTime
  employeeId: BigInt
  joinedAt: DateTime
  permissionSetId: Int
  workshopId: BigInt
}

type EmployeeSumAggregate {
  employeeId: BigInt
  permissionSetId: Int
  workshopId: BigInt
}

type EmployeeTask {
  Task: Task!
  createdAt: DateTime!
  employee: Employee!
  employeeId: BigInt!
  taskId: BigInt!
  workshopId: BigInt!
}

enum FuelType {
  CNG
  LPG
  diesel
  electric
  hybrid
  other
  petrol
  rocket
}

type Job {
  _count: JobCount!
  categoryId: BigInt!
  description: String
  isPopular: Boolean!
  jobCategory: JobCategory!
  jobId: BigInt!
  jobWorkshops: [WorkshopJob!]
  name: String
  serviceRequests: [ServiceRequest!]
}

type JobCategory {
  Workshops: [Workshop!]
  _count: JobCategoryCount!
  categoryId: BigInt!
  child: JobCategory
  children: [JobCategory!]
  description: String
  isPopular: Boolean!
  jobs: [Job!]
  name: String!
  parentId: BigInt
}

type JobCategoryCount {
  Workshops: Int!
  children: Int!
  jobs: Int!
}

type JobCount {
  jobWorkshops: Int!
  serviceRequests: Int!
}

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  deleteAddress(addressId: BigInt!): DeletePayload!
  deletePerson(personId: BigInt!): DeletePayload!
}

type PermissionSet {
  _count: PermissionSetCount!
  canGenerateReports: Boolean!
  canModifyCustomers: Boolean!
  canModifyEmployees: Boolean!
  canModifyPermissions: Boolean!
  canModifyServices: Boolean!
  canModifyTasks: Boolean!
  canModifyWorkshopDetails: Boolean!
  canReadCustomers: Boolean!
  canReadEmployees: Boolean!
  canReadReports: Boolean!
  canReadServices: Boolean!
  canReadTasks: Boolean!
  canReadWorkshopDetails: Boolean!
  canUpdateCustomers: Boolean!
  canUpdateEmployees: Boolean!
  canUpdateServices: Boolean!
  canUpdateTasks: Boolean!
  canUpdateWorkshopDetails: Boolean!
  employees: [Employee!]
  permissionSetId: BigInt!
  setName: String!
  workshop: Workshop
  workshopId: BigInt
}

type PermissionSetCount {
  employees: Int!
}

type Person {
  _count: PersonCount!
  address: Address
  addressId: BigInt
  customers: [Customer!]
  deletedAt: DateTime
  employees: [Employee!]
  firstName: String!
  lastName: String!
  personId: BigInt!
  serviceRequests: [ServiceRequest!]
  telephoneNumber: String
  user: User
  vehicles: [Vehicle!]
  workshops: [Workshop!]
}

type PersonAvgAggregate {
  addressId: Float
  personId: Float
}

type PersonCount {
  customers: Int!
  employees: Int!
  serviceRequests: Int!
  vehicles: Int!
  workshops: Int!
}

type PersonCountAggregate {
  _all: Int!
  addressId: Int!
  deletedAt: Int!
  firstName: Int!
  lastName: Int!
  personId: Int!
  telephoneNumber: Int!
}

type PersonMaxAggregate {
  addressId: BigInt
  deletedAt: DateTime
  firstName: String
  lastName: String
  personId: BigInt
  telephoneNumber: String
}

type PersonMinAggregate {
  addressId: BigInt
  deletedAt: DateTime
  firstName: String
  lastName: String
  personId: BigInt
  telephoneNumber: String
}

type PersonSumAggregate {
  addressId: BigInt
  personId: BigInt
}

type Query {
  address(addressId: BigInt!): Address!
  addresses: [Address!]!
  person(personId: BigInt!): Person!
  persons: [Person!]!
}

type Review {
  _count: ReviewCount!
  rating: Decimal!
  reviewDate: DateTime!
  reviewId: BigInt!
  reviewResponses: [ReviewResponse!]
  reviewText: String!
  status: ReviewsStatus!
  user: User!
  userId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ReviewCount {
  reviewResponses: Int!
}

type ReviewResponse {
  _count: ReviewResponseCount!
  otherReviewResponses: [ReviewResponse!]
  parentResponseId: BigInt
  responseDate: DateTime!
  responseText: String!
  review: Review!
  reviewId: BigInt!
  reviewResponse: ReviewResponse
  reviewResponseId: BigInt!
  status: ReviewsResponsesStatus!
  user: User!
  userId: BigInt!
}

type ReviewResponseCount {
  otherReviewResponses: Int!
}

enum ReviewsResponsesStatus {
  accepted
  denied
  pending
}

enum ReviewsStatus {
  accepted
  denied
  pending
}

type Service {
  _count: ServiceCount!
  customer: Customer!
  customerId: BigInt!
  deletedAt: DateTime
  description: String
  employee: Employee!
  employeeId: BigInt!
  payedOff: Boolean!
  paymentAmount: Decimal!
  serviceEndDate: DateTime
  serviceId: BigInt!
  serviceRequest: ServiceRequest
  serviceRequestId: BigInt
  serviceStartDate: DateTime!
  status: ServicesStatus
  tasks: [Task!]
  updatedAt: DateTime
  vehicle: Vehicle!
  vehicleId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ServiceCount {
  tasks: Int!
}

type ServiceRequest {
  _count: ServiceRequestCount!
  approvedService: Service
  approvedServiceId: BigInt
  deletedAt: DateTime
  description: String
  jobs: [Job!]
  person: Person!
  personId: BigInt!
  requestedAt: DateTime!
  serviceRequestId: BigInt!
  status: ServiceRequestsStatus
  vehicle: Vehicle!
  vehicleId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ServiceRequestAvgAggregate {
  approvedServiceId: Float
  personId: Float
  serviceRequestId: Float
  vehicleId: Float
  workshopId: Float
}

type ServiceRequestCount {
  jobs: Int!
}

type ServiceRequestCountAggregate {
  _all: Int!
  approvedServiceId: Int!
  deletedAt: Int!
  description: Int!
  personId: Int!
  requestedAt: Int!
  serviceRequestId: Int!
  status: Int!
  vehicleId: Int!
  workshopId: Int!
}

type ServiceRequestMaxAggregate {
  approvedServiceId: BigInt
  deletedAt: DateTime
  description: String
  personId: BigInt
  requestedAt: DateTime
  serviceRequestId: BigInt
  status: ServiceRequestsStatus
  vehicleId: BigInt
  workshopId: BigInt
}

type ServiceRequestMinAggregate {
  approvedServiceId: BigInt
  deletedAt: DateTime
  description: String
  personId: BigInt
  requestedAt: DateTime
  serviceRequestId: BigInt
  status: ServiceRequestsStatus
  vehicleId: BigInt
  workshopId: BigInt
}

type ServiceRequestSumAggregate {
  approvedServiceId: BigInt
  personId: BigInt
  serviceRequestId: BigInt
  vehicleId: BigInt
  workshopId: BigInt
}

enum ServiceRequestsStatus {
  accepted
  pending
  rejected
}

enum ServicesStatus {
  cancelled
  completed
  pending
}

type Task {
  _count: TaskCount!
  customName: String
  description: String!
  executionTime: Float!
  partsCost: Decimal!
  service: Service!
  serviceId: BigInt!
  status: TasksStatus
  taskEmployees: [EmployeeTask!]
  taskId: BigInt!
  workshopJob: WorkshopJob!
  workshopJobId: BigInt!
}

type TaskCount {
  taskEmployees: Int!
}

enum TasksStatus {
  cancelled
  completed
  pending
}

type User {
  _count: UserCount!
  avatarURL: String
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isVerified: Boolean
  person: Person
  personId: BigInt
  reviewResponses: [ReviewResponse!]
  reviews: [Review!]
  status: UsersStatus
  updatedAt: DateTime
  userId: BigInt!
  userReports: [UserReport!]
  username: String!
}

type UserAvgAggregate {
  personId: Float
  userId: Float
}

type UserCount {
  reviewResponses: Int!
  reviews: Int!
  userReports: Int!
}

type UserCountAggregate {
  _all: Int!
  avatarURL: Int!
  createdAt: Int!
  deletedAt: Int!
  email: Int!
  isVerified: Int!
  personId: Int!
  status: Int!
  updatedAt: Int!
  userId: Int!
  username: Int!
}

type UserMaxAggregate {
  avatarURL: String
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isVerified: Boolean
  personId: BigInt
  status: UsersStatus
  updatedAt: DateTime
  userId: BigInt
  username: String
}

type UserMinAggregate {
  avatarURL: String
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isVerified: Boolean
  personId: BigInt
  status: UsersStatus
  updatedAt: DateTime
  userId: BigInt
  username: String
}

type UserReport {
  createdAt: DateTime!
  reportId: BigInt!
  reportText: String!
  reportedId: BigInt!
  reportedType: UserReportsReportedType!
  status: UserReportsStatus!
  updatedAt: DateTime
  user: User!
  userId: BigInt!
}

enum UserReportsReportedType {
  review
  review_response
  user
  workshop
}

enum UserReportsStatus {
  closed
  considered
  pending
}

type UserSumAggregate {
  personId: BigInt
  userId: BigInt
}

enum UsersStatus {
  active
  suspended
}

type Vehicle {
  _count: VehicleCount!
  deletedAt: DateTime
  modelId: BigInt!
  person: Person!
  personId: BigInt!
  services: [Service!]
  vehicleAssociatedServiceRequests: [ServiceRequest!]
  vehicleId: BigInt!
  vehicleModel: VehicleModel!
  vehiclesDetails: VehicleDetails
}

type VehicleAvgAggregate {
  modelId: Float
  personId: Float
  vehicleId: Float
}

type VehicleBrand {
  _count: VehicleBrandCount!
  brandName: String!
  createdAt: DateTime
  updatedAt: DateTime
  vehicleModels: [VehicleModel!]
}

type VehicleBrandCount {
  vehicleModels: Int!
}

type VehicleCount {
  services: Int!
  vehicleAssociatedServiceRequests: Int!
}

type VehicleCountAggregate {
  _all: Int!
  deletedAt: Int!
  modelId: Int!
  personId: Int!
  vehicleId: Int!
}

type VehicleDetails {
  VIN: String
  bodyColor: BodyColors
  countryOfRegistration: String
  deletedAt: DateTime
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicle: Vehicle
  vehicleDetailsId: BigInt!
  vehicleId: BigInt
  yearOfProduction: Int
}

type VehicleDetailsAvgAggregate {
  vehicleDetailsId: Float
  vehicleId: Float
  yearOfProduction: Float
}

type VehicleDetailsCountAggregate {
  VIN: Int!
  _all: Int!
  bodyColor: Int!
  countryOfRegistration: Int!
  deletedAt: Int!
  engineCapacity: Int!
  engineNo: Int!
  fuelType: Int!
  licensePlate: Int!
  vehicleDetailsId: Int!
  vehicleId: Int!
  yearOfProduction: Int!
}

type VehicleDetailsMaxAggregate {
  VIN: String
  bodyColor: BodyColors
  countryOfRegistration: String
  deletedAt: DateTime
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicleDetailsId: BigInt
  vehicleId: BigInt
  yearOfProduction: Int
}

type VehicleDetailsMinAggregate {
  VIN: String
  bodyColor: BodyColors
  countryOfRegistration: String
  deletedAt: DateTime
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicleDetailsId: BigInt
  vehicleId: BigInt
  yearOfProduction: Int
}

type VehicleDetailsSumAggregate {
  vehicleDetailsId: BigInt
  vehicleId: BigInt
  yearOfProduction: Int
}

type VehicleMaxAggregate {
  deletedAt: DateTime
  modelId: BigInt
  personId: BigInt
  vehicleId: BigInt
}

type VehicleMinAggregate {
  deletedAt: DateTime
  modelId: BigInt
  personId: BigInt
  vehicleId: BigInt
}

type VehicleModel {
  _count: VehicleModelCount!
  brandName: String!
  createdAt: DateTime
  modelId: BigInt!
  modelName: String!
  updatedAt: DateTime
  vehicles: [Vehicle!]
  vehiclesBrand: VehicleBrand!
}

type VehicleModelCount {
  vehicles: Int!
}

type VehicleSumAggregate {
  modelId: BigInt
  personId: BigInt
  vehicleId: BigInt
}

type Workshop {
  _count: WorkshopCount!
  address: Address
  addressId: BigInt
  createdAt: DateTime
  customers: [Customer!]
  deletedAt: DateTime
  email: String
  employees: [Employee!]
  isManagingWork: Boolean
  isVerified: Boolean
  jobCategories: [JobCategory!]
  permissionSets: [PermissionSet!]
  person: Person!
  personId: BigInt!
  reviews: [Review!]
  serviceRequests: [ServiceRequest!]
  services: [Service!]
  updatedAt: DateTime
  workshopDetails: WorkshopDetails
  workshopId: BigInt!
  workshopJobs: [WorkshopJob!]
}

type WorkshopAvgAggregate {
  addressId: Float
  personId: Float
  workshopId: Float
}

type WorkshopCount {
  customers: Int!
  employees: Int!
  jobCategories: Int!
  permissionSets: Int!
  reviews: Int!
  serviceRequests: Int!
  services: Int!
  workshopJobs: Int!
}

type WorkshopCountAggregate {
  _all: Int!
  addressId: Int!
  createdAt: Int!
  deletedAt: Int!
  email: Int!
  isManagingWork: Int!
  isVerified: Int!
  personId: Int!
  updatedAt: Int!
  workshopId: Int!
}

type WorkshopDetails {
  NIP: String
  deletedAt: DateTime
  description: String
  logoURL: String
  rating: Decimal
  status: WorkshopsDetailsStatus
  telephoneNumber: String
  workshop: Workshop!
  workshopId: BigInt!
  workshopName: String!
}

type WorkshopDetailsAvgAggregate {
  rating: Decimal
  workshopId: Float
}

type WorkshopDetailsCountAggregate {
  NIP: Int!
  _all: Int!
  deletedAt: Int!
  description: Int!
  logoURL: Int!
  rating: Int!
  status: Int!
  telephoneNumber: Int!
  workshopId: Int!
  workshopName: Int!
}

type WorkshopDetailsMaxAggregate {
  NIP: String
  deletedAt: DateTime
  description: String
  logoURL: String
  rating: Decimal
  status: WorkshopsDetailsStatus
  telephoneNumber: String
  workshopId: BigInt
  workshopName: String
}

type WorkshopDetailsMinAggregate {
  NIP: String
  deletedAt: DateTime
  description: String
  logoURL: String
  rating: Decimal
  status: WorkshopsDetailsStatus
  telephoneNumber: String
  workshopId: BigInt
  workshopName: String
}

type WorkshopDetailsSumAggregate {
  rating: Decimal
  workshopId: BigInt
}

type WorkshopJob {
  _count: WorkshopJobCount!
  availability: Boolean!
  job: Job!
  jobId: BigInt!
  maxPrice: Decimal
  minPrice: Decimal
  tasks: [Task!]
  workshop: Workshop!
  workshopId: BigInt!
  workshopJobDescription: String
  workshopJobId: BigInt!
}

type WorkshopJobAvgAggregate {
  jobId: Float
  maxPrice: Decimal
  minPrice: Decimal
  workshopId: Float
  workshopJobId: Float
}

type WorkshopJobCount {
  tasks: Int!
}

type WorkshopJobCountAggregate {
  _all: Int!
  availability: Int!
  jobId: Int!
  maxPrice: Int!
  minPrice: Int!
  workshopId: Int!
  workshopJobDescription: Int!
  workshopJobId: Int!
}

type WorkshopJobMaxAggregate {
  availability: Boolean
  jobId: BigInt
  maxPrice: Decimal
  minPrice: Decimal
  workshopId: BigInt
  workshopJobDescription: String
  workshopJobId: BigInt
}

type WorkshopJobMinAggregate {
  availability: Boolean
  jobId: BigInt
  maxPrice: Decimal
  minPrice: Decimal
  workshopId: BigInt
  workshopJobDescription: String
  workshopJobId: BigInt
}

type WorkshopJobSumAggregate {
  jobId: BigInt
  maxPrice: Decimal
  minPrice: Decimal
  workshopId: BigInt
  workshopJobId: BigInt
}

type WorkshopMaxAggregate {
  addressId: BigInt
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isManagingWork: Boolean
  isVerified: Boolean
  personId: BigInt
  updatedAt: DateTime
  workshopId: BigInt
}

type WorkshopMinAggregate {
  addressId: BigInt
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isManagingWork: Boolean
  isVerified: Boolean
  personId: BigInt
  updatedAt: DateTime
  workshopId: BigInt
}

type WorkshopSumAggregate {
  addressId: BigInt
  personId: BigInt
  workshopId: BigInt
}

enum WorkshopsDetailsStatus {
  active
  suspended
}