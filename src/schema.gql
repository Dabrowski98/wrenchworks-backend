# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  _count: AddressCount!
  addressId: BigInt!
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  persons: [Person!]
  postCode: String!
  region: String!
  street: String
  workshops: [Workshop!]
}

type AddressAvgAggregate {
  addressId: Float
}

type AddressCount {
  persons: Int!
  workshops: Int!
}

type AddressCountAggregate {
  _all: Int!
  addressId: Int!
  buildingNo: Int!
  city: Int!
  country: Int!
  flatNo: Int!
  postCode: Int!
  region: Int!
  street: Int!
}

input AddressCreateInput {
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  persons: PersonCreateNestedManyWithoutAddressInput
  postCode: String!
  region: String!
  street: String
  workshops: WorkshopCreateNestedManyWithoutAddressesInput
}

input AddressCreateNestedManyWithoutWorkshopsInput {
  connect: [AddressWhereUniqueInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutWorkshopsInput!]
  create: [AddressCreateWithoutWorkshopsInput!]
}

input AddressCreateNestedOneWithoutPersonsInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutPersonsInput
  create: AddressCreateWithoutPersonsInput
}

input AddressCreateOrConnectWithoutPersonsInput {
  create: AddressCreateWithoutPersonsInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateOrConnectWithoutWorkshopsInput {
  create: AddressCreateWithoutWorkshopsInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateWithoutPersonsInput {
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  postCode: String!
  region: String!
  street: String
  workshops: WorkshopCreateNestedManyWithoutAddressesInput
}

input AddressCreateWithoutWorkshopsInput {
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  persons: PersonCreateNestedManyWithoutAddressInput
  postCode: String!
  region: String!
  street: String
}

input AddressListRelationFilter {
  every: AddressWhereInput
  none: AddressWhereInput
  some: AddressWhereInput
}

type AddressMaxAggregate {
  addressId: BigInt
  buildingNo: String
  city: String
  country: String
  flatNo: String
  postCode: String
  region: String
  street: String
}

type AddressMinAggregate {
  addressId: BigInt
  buildingNo: String
  city: String
  country: String
  flatNo: String
  postCode: String
  region: String
  street: String
}

input AddressNullableRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressScalarWhereInput {
  AND: [AddressScalarWhereInput!]
  NOT: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  addressId: BigIntFilter
  buildingNo: StringFilter
  city: StringFilter
  country: StringFilter
  flatNo: StringNullableFilter
  postCode: StringFilter
  region: StringFilter
  street: StringNullableFilter
}

type AddressSumAggregate {
  addressId: BigInt
}

input AddressUpdateInput {
  buildingNo: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  flatNo: NullableStringFieldUpdateOperationsInput
  persons: PersonUpdateManyWithoutAddressNestedInput
  postCode: StringFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  street: NullableStringFieldUpdateOperationsInput
  workshops: WorkshopUpdateManyWithoutAddressesNestedInput
}

input AddressUpdateManyMutationInput {
  buildingNo: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  flatNo: NullableStringFieldUpdateOperationsInput
  postCode: StringFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  street: NullableStringFieldUpdateOperationsInput
}

input AddressUpdateManyWithWhereWithoutWorkshopsInput {
  data: AddressUpdateManyMutationInput!
  where: AddressScalarWhereInput!
}

input AddressUpdateManyWithoutWorkshopsNestedInput {
  connect: [AddressWhereUniqueInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutWorkshopsInput!]
  create: [AddressCreateWithoutWorkshopsInput!]
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutWorkshopsInput!]
  updateMany: [AddressUpdateManyWithWhereWithoutWorkshopsInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutWorkshopsInput!]
}

input AddressUpdateOneWithoutPersonsNestedInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutPersonsInput
  create: AddressCreateWithoutPersonsInput
  delete: AddressWhereInput
  disconnect: AddressWhereInput
  update: AddressUpdateToOneWithWhereWithoutPersonsInput
  upsert: AddressUpsertWithoutPersonsInput
}

input AddressUpdateToOneWithWhereWithoutPersonsInput {
  data: AddressUpdateWithoutPersonsInput!
  where: AddressWhereInput
}

input AddressUpdateWithWhereUniqueWithoutWorkshopsInput {
  data: AddressUpdateWithoutWorkshopsInput!
  where: AddressWhereUniqueInput!
}

input AddressUpdateWithoutPersonsInput {
  buildingNo: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  flatNo: NullableStringFieldUpdateOperationsInput
  postCode: StringFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  street: NullableStringFieldUpdateOperationsInput
  workshops: WorkshopUpdateManyWithoutAddressesNestedInput
}

input AddressUpdateWithoutWorkshopsInput {
  buildingNo: StringFieldUpdateOperationsInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  flatNo: NullableStringFieldUpdateOperationsInput
  persons: PersonUpdateManyWithoutAddressNestedInput
  postCode: StringFieldUpdateOperationsInput
  region: StringFieldUpdateOperationsInput
  street: NullableStringFieldUpdateOperationsInput
}

input AddressUpsertWithWhereUniqueWithoutWorkshopsInput {
  create: AddressCreateWithoutWorkshopsInput!
  update: AddressUpdateWithoutWorkshopsInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithoutPersonsInput {
  create: AddressCreateWithoutPersonsInput!
  update: AddressUpdateWithoutPersonsInput!
  where: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  addressId: BigIntFilter
  buildingNo: StringFilter
  city: StringFilter
  country: StringFilter
  flatNo: StringNullableFilter
  persons: PersonListRelationFilter
  postCode: StringFilter
  region: StringFilter
  street: StringNullableFilter
  workshops: WorkshopListRelationFilter
}

input AddressWhereUniqueInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  addressId: BigInt
  buildingNo: StringFilter
  city: StringFilter
  country: StringFilter
  flatNo: StringNullableFilter
  persons: PersonListRelationFilter
  postCode: StringFilter
  region: StringFilter
  street: StringNullableFilter
  workshops: WorkshopListRelationFilter
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BigIntFieldUpdateOperationsInput {
  decrement: String
  divide: String
  increment: String
  multiply: String
  set: String
}

input BigIntFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntFilter
  notIn: [String!]
}

input BigIntNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntNullableFilter
  notIn: [String!]
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type Customer {
  NIP: String
  _count: CustomerCount!
  companyName: String
  customerId: BigInt!
  deletedAt: DateTime
  description: String
  person: Person!
  services: [Service!]
  totalDue: Decimal!
  workshop: Workshop!
  workshopId: BigInt!
}

type CustomerAvgAggregate {
  customerId: Float
  totalDue: Decimal
  workshopId: Float
}

type CustomerCount {
  services: Int!
}

type CustomerCountAggregate {
  NIP: Int!
  _all: Int!
  companyName: Int!
  customerId: Int!
  deletedAt: Int!
  description: Int!
  totalDue: Int!
  workshopId: Int!
}

input CustomerCreateManyPersonInput {
  NIP: String
  companyName: String
  description: String
  totalDue: Decimal
  workshopId: BigInt!
}

input CustomerCreateManyPersonInputEnvelope {
  data: [CustomerCreateManyPersonInput!]!
  skipDuplicates: Boolean
}

input CustomerCreateManyWorkshopInput {
  NIP: String
  companyName: String
  customerId: BigInt!
  description: String
  totalDue: Decimal
}

input CustomerCreateManyWorkshopInputEnvelope {
  data: [CustomerCreateManyWorkshopInput!]!
  skipDuplicates: Boolean
}

input CustomerCreateNestedManyWithoutPersonInput {
  connect: [CustomerWhereUniqueInput!]
  connectOrCreate: [CustomerCreateOrConnectWithoutPersonInput!]
  create: [CustomerCreateWithoutPersonInput!]
  createMany: CustomerCreateManyPersonInputEnvelope
}

input CustomerCreateNestedManyWithoutWorkshopInput {
  connect: [CustomerWhereUniqueInput!]
  connectOrCreate: [CustomerCreateOrConnectWithoutWorkshopInput!]
  create: [CustomerCreateWithoutWorkshopInput!]
  createMany: CustomerCreateManyWorkshopInputEnvelope
}

input CustomerCreateNestedOneWithoutServicesInput {
  connect: CustomerWhereUniqueInput
  connectOrCreate: CustomerCreateOrConnectWithoutServicesInput
  create: CustomerCreateWithoutServicesInput
}

input CustomerCreateOrConnectWithoutPersonInput {
  create: CustomerCreateWithoutPersonInput!
  where: CustomerWhereUniqueInput!
}

input CustomerCreateOrConnectWithoutServicesInput {
  create: CustomerCreateWithoutServicesInput!
  where: CustomerWhereUniqueInput!
}

input CustomerCreateOrConnectWithoutWorkshopInput {
  create: CustomerCreateWithoutWorkshopInput!
  where: CustomerWhereUniqueInput!
}

input CustomerCreateWithoutPersonInput {
  NIP: String
  companyName: String
  description: String
  services: ServiceCreateNestedManyWithoutCustomerInput
  totalDue: Decimal
  workshop: WorkshopCreateNestedOneWithoutCustomersInput!
}

input CustomerCreateWithoutServicesInput {
  NIP: String
  companyName: String
  description: String
  person: PersonCreateNestedOneWithoutCustomersInput!
  totalDue: Decimal
  workshop: WorkshopCreateNestedOneWithoutCustomersInput!
}

input CustomerCreateWithoutWorkshopInput {
  NIP: String
  companyName: String
  description: String
  person: PersonCreateNestedOneWithoutCustomersInput!
  services: ServiceCreateNestedManyWithoutCustomerInput
  totalDue: Decimal
}

input CustomerCustomerIdWorkshopIdCompoundUniqueInput {
  customerId: BigInt!
  workshopId: BigInt!
}

input CustomerListRelationFilter {
  every: CustomerWhereInput
  none: CustomerWhereInput
  some: CustomerWhereInput
}

type CustomerMaxAggregate {
  NIP: String
  companyName: String
  customerId: BigInt
  deletedAt: DateTime
  description: String
  totalDue: Decimal
  workshopId: BigInt
}

type CustomerMinAggregate {
  NIP: String
  companyName: String
  customerId: BigInt
  deletedAt: DateTime
  description: String
  totalDue: Decimal
  workshopId: BigInt
}

input CustomerRelationFilter {
  is: CustomerWhereInput
  isNot: CustomerWhereInput
}

input CustomerScalarWhereInput {
  AND: [CustomerScalarWhereInput!]
  NIP: StringNullableFilter
  NOT: [CustomerScalarWhereInput!]
  OR: [CustomerScalarWhereInput!]
  companyName: StringNullableFilter
  customerId: BigIntFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  totalDue: DecimalFilter
  workshopId: BigIntFilter
}

type CustomerSumAggregate {
  customerId: BigInt
  totalDue: Decimal
  workshopId: BigInt
}

input CustomerUpdateManyMutationInput {
  NIP: NullableStringFieldUpdateOperationsInput
  companyName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  totalDue: DecimalFieldUpdateOperationsInput
}

input CustomerUpdateManyWithWhereWithoutPersonInput {
  data: CustomerUpdateManyMutationInput!
  where: CustomerScalarWhereInput!
}

input CustomerUpdateManyWithWhereWithoutWorkshopInput {
  data: CustomerUpdateManyMutationInput!
  where: CustomerScalarWhereInput!
}

input CustomerUpdateManyWithoutPersonNestedInput {
  connect: [CustomerWhereUniqueInput!]
  connectOrCreate: [CustomerCreateOrConnectWithoutPersonInput!]
  create: [CustomerCreateWithoutPersonInput!]
  createMany: CustomerCreateManyPersonInputEnvelope
  delete: [CustomerWhereUniqueInput!]
  deleteMany: [CustomerScalarWhereInput!]
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
  update: [CustomerUpdateWithWhereUniqueWithoutPersonInput!]
  updateMany: [CustomerUpdateManyWithWhereWithoutPersonInput!]
  upsert: [CustomerUpsertWithWhereUniqueWithoutPersonInput!]
}

input CustomerUpdateManyWithoutWorkshopNestedInput {
  connect: [CustomerWhereUniqueInput!]
  connectOrCreate: [CustomerCreateOrConnectWithoutWorkshopInput!]
  create: [CustomerCreateWithoutWorkshopInput!]
  createMany: CustomerCreateManyWorkshopInputEnvelope
  delete: [CustomerWhereUniqueInput!]
  deleteMany: [CustomerScalarWhereInput!]
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
  update: [CustomerUpdateWithWhereUniqueWithoutWorkshopInput!]
  updateMany: [CustomerUpdateManyWithWhereWithoutWorkshopInput!]
  upsert: [CustomerUpsertWithWhereUniqueWithoutWorkshopInput!]
}

input CustomerUpdateOneRequiredWithoutServicesNestedInput {
  connect: CustomerWhereUniqueInput
  connectOrCreate: CustomerCreateOrConnectWithoutServicesInput
  create: CustomerCreateWithoutServicesInput
  update: CustomerUpdateToOneWithWhereWithoutServicesInput
  upsert: CustomerUpsertWithoutServicesInput
}

input CustomerUpdateToOneWithWhereWithoutServicesInput {
  data: CustomerUpdateWithoutServicesInput!
  where: CustomerWhereInput
}

input CustomerUpdateWithWhereUniqueWithoutPersonInput {
  data: CustomerUpdateWithoutPersonInput!
  where: CustomerWhereUniqueInput!
}

input CustomerUpdateWithWhereUniqueWithoutWorkshopInput {
  data: CustomerUpdateWithoutWorkshopInput!
  where: CustomerWhereUniqueInput!
}

input CustomerUpdateWithoutPersonInput {
  NIP: NullableStringFieldUpdateOperationsInput
  companyName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  services: ServiceUpdateManyWithoutCustomerNestedInput
  totalDue: DecimalFieldUpdateOperationsInput
  workshop: WorkshopUpdateOneRequiredWithoutCustomersNestedInput
}

input CustomerUpdateWithoutServicesInput {
  NIP: NullableStringFieldUpdateOperationsInput
  companyName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  person: PersonUpdateOneRequiredWithoutCustomersNestedInput
  totalDue: DecimalFieldUpdateOperationsInput
  workshop: WorkshopUpdateOneRequiredWithoutCustomersNestedInput
}

input CustomerUpdateWithoutWorkshopInput {
  NIP: NullableStringFieldUpdateOperationsInput
  companyName: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  person: PersonUpdateOneRequiredWithoutCustomersNestedInput
  services: ServiceUpdateManyWithoutCustomerNestedInput
  totalDue: DecimalFieldUpdateOperationsInput
}

input CustomerUpsertWithWhereUniqueWithoutPersonInput {
  create: CustomerCreateWithoutPersonInput!
  update: CustomerUpdateWithoutPersonInput!
  where: CustomerWhereUniqueInput!
}

input CustomerUpsertWithWhereUniqueWithoutWorkshopInput {
  create: CustomerCreateWithoutWorkshopInput!
  update: CustomerUpdateWithoutWorkshopInput!
  where: CustomerWhereUniqueInput!
}

input CustomerUpsertWithoutServicesInput {
  create: CustomerCreateWithoutServicesInput!
  update: CustomerUpdateWithoutServicesInput!
  where: CustomerWhereInput
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  NIP: StringNullableFilter
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  companyName: StringNullableFilter
  customerId: BigIntFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  person: PersonRelationFilter
  services: ServiceListRelationFilter
  totalDue: DecimalFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input CustomerWhereUniqueInput {
  AND: [CustomerWhereInput!]
  NIP: StringNullableFilter
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  companyName: StringNullableFilter
  customerId: BigIntFilter
  customerId_workshopId: CustomerCustomerIdWorkshopIdCompoundUniqueInput
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  person: PersonRelationFilter
  services: ServiceListRelationFilter
  totalDue: DecimalFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

input DecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input DecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

type DeletePayload {
  error: String!
  success: Boolean!
}

type Employee {
  _count: EmployeeCount!
  deletedAt: DateTime
  employeeId: BigInt!
  employeeTasks: [EmployeeTask!]
  joinedAt: DateTime!
  permissionSet: PermissionSet
  permissionSetId: String
  person: Person!
  services: [Service!]
  workshop: Workshop!
  workshopId: BigInt!
}

type EmployeeAvgAggregate {
  employeeId: Float
  permissionSetId: Float
  workshopId: Float
}

type EmployeeCount {
  employeeTasks: Int!
  services: Int!
}

type EmployeeCountAggregate {
  _all: Int!
  deletedAt: Int!
  employeeId: Int!
  joinedAt: Int!
  permissionSetId: Int!
  workshopId: Int!
}

input EmployeeCreateManyPermissionSetInput {
  employeeId: BigInt!
  joinedAt: DateTime
  workshopId: BigInt!
}

input EmployeeCreateManyPermissionSetInputEnvelope {
  data: [EmployeeCreateManyPermissionSetInput!]!
  skipDuplicates: Boolean
}

input EmployeeCreateManyPersonInput {
  joinedAt: DateTime
  permissionSetId: String
  workshopId: BigInt!
}

input EmployeeCreateManyPersonInputEnvelope {
  data: [EmployeeCreateManyPersonInput!]!
  skipDuplicates: Boolean
}

input EmployeeCreateManyWorkshopInput {
  employeeId: BigInt!
  joinedAt: DateTime
  permissionSetId: String
}

input EmployeeCreateManyWorkshopInputEnvelope {
  data: [EmployeeCreateManyWorkshopInput!]!
  skipDuplicates: Boolean
}

input EmployeeCreateNestedManyWithoutPermissionSetInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutPermissionSetInput!]
  create: [EmployeeCreateWithoutPermissionSetInput!]
  createMany: EmployeeCreateManyPermissionSetInputEnvelope
}

input EmployeeCreateNestedManyWithoutPersonInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutPersonInput!]
  create: [EmployeeCreateWithoutPersonInput!]
  createMany: EmployeeCreateManyPersonInputEnvelope
}

input EmployeeCreateNestedManyWithoutWorkshopInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutWorkshopInput!]
  create: [EmployeeCreateWithoutWorkshopInput!]
  createMany: EmployeeCreateManyWorkshopInputEnvelope
}

input EmployeeCreateNestedOneWithoutEmployeeTasksInput {
  connect: EmployeeWhereUniqueInput
  connectOrCreate: EmployeeCreateOrConnectWithoutEmployeeTasksInput
  create: EmployeeCreateWithoutEmployeeTasksInput
}

input EmployeeCreateNestedOneWithoutServicesInput {
  connect: EmployeeWhereUniqueInput
  connectOrCreate: EmployeeCreateOrConnectWithoutServicesInput
  create: EmployeeCreateWithoutServicesInput
}

input EmployeeCreateOrConnectWithoutEmployeeTasksInput {
  create: EmployeeCreateWithoutEmployeeTasksInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateOrConnectWithoutPermissionSetInput {
  create: EmployeeCreateWithoutPermissionSetInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateOrConnectWithoutPersonInput {
  create: EmployeeCreateWithoutPersonInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateOrConnectWithoutServicesInput {
  create: EmployeeCreateWithoutServicesInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateOrConnectWithoutWorkshopInput {
  create: EmployeeCreateWithoutWorkshopInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateWithoutEmployeeTasksInput {
  joinedAt: DateTime
  permissionSet: PermissionSetCreateNestedOneWithoutEmployeesInput
  person: PersonCreateNestedOneWithoutEmployeesInput!
  services: ServiceCreateNestedManyWithoutEmployeeInput
  workshop: WorkshopCreateNestedOneWithoutEmployeesInput!
}

input EmployeeCreateWithoutPermissionSetInput {
  employeeTasks: EmployeeTaskCreateNestedManyWithoutEmployeeInput
  joinedAt: DateTime
  person: PersonCreateNestedOneWithoutEmployeesInput!
  services: ServiceCreateNestedManyWithoutEmployeeInput
  workshop: WorkshopCreateNestedOneWithoutEmployeesInput!
}

input EmployeeCreateWithoutPersonInput {
  employeeTasks: EmployeeTaskCreateNestedManyWithoutEmployeeInput
  joinedAt: DateTime
  permissionSet: PermissionSetCreateNestedOneWithoutEmployeesInput
  services: ServiceCreateNestedManyWithoutEmployeeInput
  workshop: WorkshopCreateNestedOneWithoutEmployeesInput!
}

input EmployeeCreateWithoutServicesInput {
  employeeTasks: EmployeeTaskCreateNestedManyWithoutEmployeeInput
  joinedAt: DateTime
  permissionSet: PermissionSetCreateNestedOneWithoutEmployeesInput
  person: PersonCreateNestedOneWithoutEmployeesInput!
  workshop: WorkshopCreateNestedOneWithoutEmployeesInput!
}

input EmployeeCreateWithoutWorkshopInput {
  employeeTasks: EmployeeTaskCreateNestedManyWithoutEmployeeInput
  joinedAt: DateTime
  permissionSet: PermissionSetCreateNestedOneWithoutEmployeesInput
  person: PersonCreateNestedOneWithoutEmployeesInput!
  services: ServiceCreateNestedManyWithoutEmployeeInput
}

input EmployeeEmployeeIdWorkshopIdCompoundUniqueInput {
  employeeId: BigInt!
  workshopId: BigInt!
}

input EmployeeListRelationFilter {
  every: EmployeeWhereInput
  none: EmployeeWhereInput
  some: EmployeeWhereInput
}

type EmployeeMaxAggregate {
  deletedAt: DateTime
  employeeId: BigInt
  joinedAt: DateTime
  permissionSetId: String
  workshopId: BigInt
}

type EmployeeMinAggregate {
  deletedAt: DateTime
  employeeId: BigInt
  joinedAt: DateTime
  permissionSetId: String
  workshopId: BigInt
}

input EmployeeRelationFilter {
  is: EmployeeWhereInput
  isNot: EmployeeWhereInput
}

input EmployeeScalarWhereInput {
  AND: [EmployeeScalarWhereInput!]
  NOT: [EmployeeScalarWhereInput!]
  OR: [EmployeeScalarWhereInput!]
  deletedAt: DateTimeNullableFilter
  employeeId: BigIntFilter
  joinedAt: DateTimeFilter
  permissionSetId: BigIntNullableFilter
  workshopId: BigIntFilter
}

type EmployeeSumAggregate {
  employeeId: BigInt
  permissionSetId: String
  workshopId: BigInt
}

type EmployeeTask {
  Task: Task!
  createdAt: DateTime!
  employee: Employee!
  employeeId: BigInt!
  taskId: BigInt!
  workshopId: BigInt!
}

input EmployeeTaskCreateManyEmployeeInput {
  createdAt: DateTime
  taskId: BigInt!
}

input EmployeeTaskCreateManyEmployeeInputEnvelope {
  data: [EmployeeTaskCreateManyEmployeeInput!]!
  skipDuplicates: Boolean
}

input EmployeeTaskCreateManyTaskInput {
  createdAt: DateTime
  employeeId: BigInt!
  workshopId: BigInt!
}

input EmployeeTaskCreateManyTaskInputEnvelope {
  data: [EmployeeTaskCreateManyTaskInput!]!
  skipDuplicates: Boolean
}

input EmployeeTaskCreateNestedManyWithoutEmployeeInput {
  connect: [EmployeeTaskWhereUniqueInput!]
  connectOrCreate: [EmployeeTaskCreateOrConnectWithoutEmployeeInput!]
  create: [EmployeeTaskCreateWithoutEmployeeInput!]
  createMany: EmployeeTaskCreateManyEmployeeInputEnvelope
}

input EmployeeTaskCreateNestedManyWithoutTaskInput {
  connect: [EmployeeTaskWhereUniqueInput!]
  connectOrCreate: [EmployeeTaskCreateOrConnectWithoutTaskInput!]
  create: [EmployeeTaskCreateWithoutTaskInput!]
  createMany: EmployeeTaskCreateManyTaskInputEnvelope
}

input EmployeeTaskCreateOrConnectWithoutEmployeeInput {
  create: EmployeeTaskCreateWithoutEmployeeInput!
  where: EmployeeTaskWhereUniqueInput!
}

input EmployeeTaskCreateOrConnectWithoutTaskInput {
  create: EmployeeTaskCreateWithoutTaskInput!
  where: EmployeeTaskWhereUniqueInput!
}

input EmployeeTaskCreateWithoutEmployeeInput {
  Task: TaskCreateNestedOneWithoutTaskEmployeesInput!
  createdAt: DateTime
}

input EmployeeTaskCreateWithoutTaskInput {
  createdAt: DateTime
  employee: EmployeeCreateNestedOneWithoutEmployeeTasksInput!
}

input EmployeeTaskEmployeeIdTaskIdWorkshopIdCompoundUniqueInput {
  employeeId: BigInt!
  taskId: BigInt!
  workshopId: BigInt!
}

input EmployeeTaskListRelationFilter {
  every: EmployeeTaskWhereInput
  none: EmployeeTaskWhereInput
  some: EmployeeTaskWhereInput
}

input EmployeeTaskScalarWhereInput {
  AND: [EmployeeTaskScalarWhereInput!]
  NOT: [EmployeeTaskScalarWhereInput!]
  OR: [EmployeeTaskScalarWhereInput!]
  createdAt: DateTimeFilter
  employeeId: BigIntFilter
  taskId: BigIntFilter
  workshopId: BigIntFilter
}

input EmployeeTaskUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeTaskUpdateManyWithWhereWithoutEmployeeInput {
  data: EmployeeTaskUpdateManyMutationInput!
  where: EmployeeTaskScalarWhereInput!
}

input EmployeeTaskUpdateManyWithWhereWithoutTaskInput {
  data: EmployeeTaskUpdateManyMutationInput!
  where: EmployeeTaskScalarWhereInput!
}

input EmployeeTaskUpdateManyWithoutEmployeeNestedInput {
  connect: [EmployeeTaskWhereUniqueInput!]
  connectOrCreate: [EmployeeTaskCreateOrConnectWithoutEmployeeInput!]
  create: [EmployeeTaskCreateWithoutEmployeeInput!]
  createMany: EmployeeTaskCreateManyEmployeeInputEnvelope
  delete: [EmployeeTaskWhereUniqueInput!]
  deleteMany: [EmployeeTaskScalarWhereInput!]
  disconnect: [EmployeeTaskWhereUniqueInput!]
  set: [EmployeeTaskWhereUniqueInput!]
  update: [EmployeeTaskUpdateWithWhereUniqueWithoutEmployeeInput!]
  updateMany: [EmployeeTaskUpdateManyWithWhereWithoutEmployeeInput!]
  upsert: [EmployeeTaskUpsertWithWhereUniqueWithoutEmployeeInput!]
}

input EmployeeTaskUpdateManyWithoutTaskNestedInput {
  connect: [EmployeeTaskWhereUniqueInput!]
  connectOrCreate: [EmployeeTaskCreateOrConnectWithoutTaskInput!]
  create: [EmployeeTaskCreateWithoutTaskInput!]
  createMany: EmployeeTaskCreateManyTaskInputEnvelope
  delete: [EmployeeTaskWhereUniqueInput!]
  deleteMany: [EmployeeTaskScalarWhereInput!]
  disconnect: [EmployeeTaskWhereUniqueInput!]
  set: [EmployeeTaskWhereUniqueInput!]
  update: [EmployeeTaskUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [EmployeeTaskUpdateManyWithWhereWithoutTaskInput!]
  upsert: [EmployeeTaskUpsertWithWhereUniqueWithoutTaskInput!]
}

input EmployeeTaskUpdateWithWhereUniqueWithoutEmployeeInput {
  data: EmployeeTaskUpdateWithoutEmployeeInput!
  where: EmployeeTaskWhereUniqueInput!
}

input EmployeeTaskUpdateWithWhereUniqueWithoutTaskInput {
  data: EmployeeTaskUpdateWithoutTaskInput!
  where: EmployeeTaskWhereUniqueInput!
}

input EmployeeTaskUpdateWithoutEmployeeInput {
  Task: TaskUpdateOneRequiredWithoutTaskEmployeesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeTaskUpdateWithoutTaskInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  employee: EmployeeUpdateOneRequiredWithoutEmployeeTasksNestedInput
}

input EmployeeTaskUpsertWithWhereUniqueWithoutEmployeeInput {
  create: EmployeeTaskCreateWithoutEmployeeInput!
  update: EmployeeTaskUpdateWithoutEmployeeInput!
  where: EmployeeTaskWhereUniqueInput!
}

input EmployeeTaskUpsertWithWhereUniqueWithoutTaskInput {
  create: EmployeeTaskCreateWithoutTaskInput!
  update: EmployeeTaskUpdateWithoutTaskInput!
  where: EmployeeTaskWhereUniqueInput!
}

input EmployeeTaskWhereInput {
  AND: [EmployeeTaskWhereInput!]
  NOT: [EmployeeTaskWhereInput!]
  OR: [EmployeeTaskWhereInput!]
  Task: TaskRelationFilter
  createdAt: DateTimeFilter
  employee: EmployeeRelationFilter
  employeeId: BigIntFilter
  taskId: BigIntFilter
  workshopId: BigIntFilter
}

input EmployeeTaskWhereUniqueInput {
  AND: [EmployeeTaskWhereInput!]
  NOT: [EmployeeTaskWhereInput!]
  OR: [EmployeeTaskWhereInput!]
  Task: TaskRelationFilter
  createdAt: DateTimeFilter
  employee: EmployeeRelationFilter
  employeeId: BigIntFilter
  employeeId_taskId_workshopId: EmployeeTaskEmployeeIdTaskIdWorkshopIdCompoundUniqueInput
  taskId: BigIntFilter
  workshopId: BigIntFilter
}

input EmployeeUpdateManyMutationInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  joinedAt: DateTimeFieldUpdateOperationsInput
}

input EmployeeUpdateManyWithWhereWithoutPermissionSetInput {
  data: EmployeeUpdateManyMutationInput!
  where: EmployeeScalarWhereInput!
}

input EmployeeUpdateManyWithWhereWithoutPersonInput {
  data: EmployeeUpdateManyMutationInput!
  where: EmployeeScalarWhereInput!
}

input EmployeeUpdateManyWithWhereWithoutWorkshopInput {
  data: EmployeeUpdateManyMutationInput!
  where: EmployeeScalarWhereInput!
}

input EmployeeUpdateManyWithoutPermissionSetNestedInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutPermissionSetInput!]
  create: [EmployeeCreateWithoutPermissionSetInput!]
  createMany: EmployeeCreateManyPermissionSetInputEnvelope
  delete: [EmployeeWhereUniqueInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutPermissionSetInput!]
  updateMany: [EmployeeUpdateManyWithWhereWithoutPermissionSetInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutPermissionSetInput!]
}

input EmployeeUpdateManyWithoutPersonNestedInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutPersonInput!]
  create: [EmployeeCreateWithoutPersonInput!]
  createMany: EmployeeCreateManyPersonInputEnvelope
  delete: [EmployeeWhereUniqueInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutPersonInput!]
  updateMany: [EmployeeUpdateManyWithWhereWithoutPersonInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutPersonInput!]
}

input EmployeeUpdateManyWithoutWorkshopNestedInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutWorkshopInput!]
  create: [EmployeeCreateWithoutWorkshopInput!]
  createMany: EmployeeCreateManyWorkshopInputEnvelope
  delete: [EmployeeWhereUniqueInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutWorkshopInput!]
  updateMany: [EmployeeUpdateManyWithWhereWithoutWorkshopInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutWorkshopInput!]
}

input EmployeeUpdateOneRequiredWithoutEmployeeTasksNestedInput {
  connect: EmployeeWhereUniqueInput
  connectOrCreate: EmployeeCreateOrConnectWithoutEmployeeTasksInput
  create: EmployeeCreateWithoutEmployeeTasksInput
  update: EmployeeUpdateToOneWithWhereWithoutEmployeeTasksInput
  upsert: EmployeeUpsertWithoutEmployeeTasksInput
}

input EmployeeUpdateOneRequiredWithoutServicesNestedInput {
  connect: EmployeeWhereUniqueInput
  connectOrCreate: EmployeeCreateOrConnectWithoutServicesInput
  create: EmployeeCreateWithoutServicesInput
  update: EmployeeUpdateToOneWithWhereWithoutServicesInput
  upsert: EmployeeUpsertWithoutServicesInput
}

input EmployeeUpdateToOneWithWhereWithoutEmployeeTasksInput {
  data: EmployeeUpdateWithoutEmployeeTasksInput!
  where: EmployeeWhereInput
}

input EmployeeUpdateToOneWithWhereWithoutServicesInput {
  data: EmployeeUpdateWithoutServicesInput!
  where: EmployeeWhereInput
}

input EmployeeUpdateWithWhereUniqueWithoutPermissionSetInput {
  data: EmployeeUpdateWithoutPermissionSetInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpdateWithWhereUniqueWithoutPersonInput {
  data: EmployeeUpdateWithoutPersonInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpdateWithWhereUniqueWithoutWorkshopInput {
  data: EmployeeUpdateWithoutWorkshopInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpdateWithoutEmployeeTasksInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  joinedAt: DateTimeFieldUpdateOperationsInput
  permissionSet: PermissionSetUpdateOneWithoutEmployeesNestedInput
  person: PersonUpdateOneRequiredWithoutEmployeesNestedInput
  services: ServiceUpdateManyWithoutEmployeeNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutEmployeesNestedInput
}

input EmployeeUpdateWithoutPermissionSetInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  employeeTasks: EmployeeTaskUpdateManyWithoutEmployeeNestedInput
  joinedAt: DateTimeFieldUpdateOperationsInput
  person: PersonUpdateOneRequiredWithoutEmployeesNestedInput
  services: ServiceUpdateManyWithoutEmployeeNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutEmployeesNestedInput
}

input EmployeeUpdateWithoutPersonInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  employeeTasks: EmployeeTaskUpdateManyWithoutEmployeeNestedInput
  joinedAt: DateTimeFieldUpdateOperationsInput
  permissionSet: PermissionSetUpdateOneWithoutEmployeesNestedInput
  services: ServiceUpdateManyWithoutEmployeeNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutEmployeesNestedInput
}

input EmployeeUpdateWithoutServicesInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  employeeTasks: EmployeeTaskUpdateManyWithoutEmployeeNestedInput
  joinedAt: DateTimeFieldUpdateOperationsInput
  permissionSet: PermissionSetUpdateOneWithoutEmployeesNestedInput
  person: PersonUpdateOneRequiredWithoutEmployeesNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutEmployeesNestedInput
}

input EmployeeUpdateWithoutWorkshopInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  employeeTasks: EmployeeTaskUpdateManyWithoutEmployeeNestedInput
  joinedAt: DateTimeFieldUpdateOperationsInput
  permissionSet: PermissionSetUpdateOneWithoutEmployeesNestedInput
  person: PersonUpdateOneRequiredWithoutEmployeesNestedInput
  services: ServiceUpdateManyWithoutEmployeeNestedInput
}

input EmployeeUpsertWithWhereUniqueWithoutPermissionSetInput {
  create: EmployeeCreateWithoutPermissionSetInput!
  update: EmployeeUpdateWithoutPermissionSetInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpsertWithWhereUniqueWithoutPersonInput {
  create: EmployeeCreateWithoutPersonInput!
  update: EmployeeUpdateWithoutPersonInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpsertWithWhereUniqueWithoutWorkshopInput {
  create: EmployeeCreateWithoutWorkshopInput!
  update: EmployeeUpdateWithoutWorkshopInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpsertWithoutEmployeeTasksInput {
  create: EmployeeCreateWithoutEmployeeTasksInput!
  update: EmployeeUpdateWithoutEmployeeTasksInput!
  where: EmployeeWhereInput
}

input EmployeeUpsertWithoutServicesInput {
  create: EmployeeCreateWithoutServicesInput!
  update: EmployeeUpdateWithoutServicesInput!
  where: EmployeeWhereInput
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  deletedAt: DateTimeNullableFilter
  employeeId: BigIntFilter
  employeeTasks: EmployeeTaskListRelationFilter
  joinedAt: DateTimeFilter
  permissionSet: PermissionSetNullableRelationFilter
  permissionSetId: BigIntNullableFilter
  person: PersonRelationFilter
  services: ServiceListRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input EmployeeWhereUniqueInput {
  AND: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  deletedAt: DateTimeNullableFilter
  employeeId: BigIntFilter
  employeeId_workshopId: EmployeeEmployeeIdWorkshopIdCompoundUniqueInput
  employeeTasks: EmployeeTaskListRelationFilter
  joinedAt: DateTimeFilter
  permissionSet: PermissionSetNullableRelationFilter
  permissionSetId: BigIntNullableFilter
  person: PersonRelationFilter
  services: ServiceListRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input EnumReviewsResponsesStatusFieldUpdateOperationsInput {
  set: ReviewsResponsesStatus
}

input EnumReviewsResponsesStatusFilter {
  equals: ReviewsResponsesStatus
  in: [ReviewsResponsesStatus!]
  not: NestedEnumReviewsResponsesStatusFilter
  notIn: [ReviewsResponsesStatus!]
}

input EnumReviewsStatusFieldUpdateOperationsInput {
  set: ReviewsStatus
}

input EnumReviewsStatusFilter {
  equals: ReviewsStatus
  in: [ReviewsStatus!]
  not: NestedEnumReviewsStatusFilter
  notIn: [ReviewsStatus!]
}

input EnumServiceRequestsStatusNullableFilter {
  equals: ServiceRequestsStatus
  in: [ServiceRequestsStatus!]
  not: NestedEnumServiceRequestsStatusNullableFilter
  notIn: [ServiceRequestsStatus!]
}

input EnumServicesStatusNullableFilter {
  equals: ServicesStatus
  in: [ServicesStatus!]
  not: NestedEnumServicesStatusNullableFilter
  notIn: [ServicesStatus!]
}

input EnumTasksStatusNullableFilter {
  equals: TasksStatus
  in: [TasksStatus!]
  not: NestedEnumTasksStatusNullableFilter
  notIn: [TasksStatus!]
}

input EnumUserReportsReportedTypeFieldUpdateOperationsInput {
  set: UserReportsReportedType
}

input EnumUserReportsReportedTypeFilter {
  equals: UserReportsReportedType
  in: [UserReportsReportedType!]
  not: NestedEnumUserReportsReportedTypeFilter
  notIn: [UserReportsReportedType!]
}

input EnumUserReportsStatusFieldUpdateOperationsInput {
  set: UserReportsStatus
}

input EnumUserReportsStatusFilter {
  equals: UserReportsStatus
  in: [UserReportsStatus!]
  not: NestedEnumUserReportsStatusFilter
  notIn: [UserReportsStatus!]
}

input EnumUsersStatusNullableFilter {
  equals: UsersStatus
  in: [UsersStatus!]
  not: NestedEnumUsersStatusNullableFilter
  notIn: [UsersStatus!]
}

input EnumWorkshopsDetailsStatusNullableFilter {
  equals: WorkshopsDetailsStatus
  in: [WorkshopsDetailsStatus!]
  not: NestedEnumWorkshopsDetailsStatusNullableFilter
  notIn: [WorkshopsDetailsStatus!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Job {
  _count: JobCount!
  categoryId: BigInt!
  description: String
  isPopular: Boolean!
  jobCategory: JobCategory!
  jobId: BigInt!
  jobWorkshops: [WorkshopJob!]
  name: String
  serviceRequests: [ServiceRequest!]
}

type JobCategory {
  Workshops: [Workshop!]
  _count: JobCategoryCount!
  categoryId: BigInt!
  child: JobCategory
  children: [JobCategory!]
  description: String
  isPopular: Boolean!
  jobs: [Job!]
  name: String!
  parentId: BigInt
}

type JobCategoryCount {
  Workshops: Int!
  children: Int!
  jobs: Int!
}

input JobCategoryCreateManyChildInput {
  description: String
  isPopular: Boolean
  name: String!
}

input JobCategoryCreateManyChildInputEnvelope {
  data: [JobCategoryCreateManyChildInput!]!
  skipDuplicates: Boolean
}

input JobCategoryCreateNestedManyWithoutChildInput {
  connect: [JobCategoryWhereUniqueInput!]
  connectOrCreate: [JobCategoryCreateOrConnectWithoutChildInput!]
  create: [JobCategoryCreateWithoutChildInput!]
  createMany: JobCategoryCreateManyChildInputEnvelope
}

input JobCategoryCreateNestedManyWithoutWorkshopsInput {
  connect: [JobCategoryWhereUniqueInput!]
  connectOrCreate: [JobCategoryCreateOrConnectWithoutWorkshopsInput!]
  create: [JobCategoryCreateWithoutWorkshopsInput!]
}

input JobCategoryCreateNestedOneWithoutChildrenInput {
  connect: JobCategoryWhereUniqueInput
  connectOrCreate: JobCategoryCreateOrConnectWithoutChildrenInput
  create: JobCategoryCreateWithoutChildrenInput
}

input JobCategoryCreateNestedOneWithoutJobsInput {
  connect: JobCategoryWhereUniqueInput
  connectOrCreate: JobCategoryCreateOrConnectWithoutJobsInput
  create: JobCategoryCreateWithoutJobsInput
}

input JobCategoryCreateOrConnectWithoutChildInput {
  create: JobCategoryCreateWithoutChildInput!
  where: JobCategoryWhereUniqueInput!
}

input JobCategoryCreateOrConnectWithoutChildrenInput {
  create: JobCategoryCreateWithoutChildrenInput!
  where: JobCategoryWhereUniqueInput!
}

input JobCategoryCreateOrConnectWithoutJobsInput {
  create: JobCategoryCreateWithoutJobsInput!
  where: JobCategoryWhereUniqueInput!
}

input JobCategoryCreateOrConnectWithoutWorkshopsInput {
  create: JobCategoryCreateWithoutWorkshopsInput!
  where: JobCategoryWhereUniqueInput!
}

input JobCategoryCreateWithoutChildInput {
  Workshops: WorkshopCreateNestedManyWithoutJobCategoriesInput
  children: JobCategoryCreateNestedManyWithoutChildInput
  description: String
  isPopular: Boolean
  jobs: JobCreateNestedManyWithoutJobCategoryInput
  name: String!
}

input JobCategoryCreateWithoutChildrenInput {
  Workshops: WorkshopCreateNestedManyWithoutJobCategoriesInput
  child: JobCategoryCreateNestedOneWithoutChildrenInput
  description: String
  isPopular: Boolean
  jobs: JobCreateNestedManyWithoutJobCategoryInput
  name: String!
}

input JobCategoryCreateWithoutJobsInput {
  Workshops: WorkshopCreateNestedManyWithoutJobCategoriesInput
  child: JobCategoryCreateNestedOneWithoutChildrenInput
  children: JobCategoryCreateNestedManyWithoutChildInput
  description: String
  isPopular: Boolean
  name: String!
}

input JobCategoryCreateWithoutWorkshopsInput {
  child: JobCategoryCreateNestedOneWithoutChildrenInput
  children: JobCategoryCreateNestedManyWithoutChildInput
  description: String
  isPopular: Boolean
  jobs: JobCreateNestedManyWithoutJobCategoryInput
  name: String!
}

input JobCategoryListRelationFilter {
  every: JobCategoryWhereInput
  none: JobCategoryWhereInput
  some: JobCategoryWhereInput
}

input JobCategoryNullableRelationFilter {
  is: JobCategoryWhereInput
  isNot: JobCategoryWhereInput
}

input JobCategoryRelationFilter {
  is: JobCategoryWhereInput
  isNot: JobCategoryWhereInput
}

input JobCategoryScalarWhereInput {
  AND: [JobCategoryScalarWhereInput!]
  NOT: [JobCategoryScalarWhereInput!]
  OR: [JobCategoryScalarWhereInput!]
  categoryId: BigIntFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  name: StringFilter
  parentId: BigIntNullableFilter
}

input JobCategoryUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  isPopular: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input JobCategoryUpdateManyWithWhereWithoutChildInput {
  data: JobCategoryUpdateManyMutationInput!
  where: JobCategoryScalarWhereInput!
}

input JobCategoryUpdateManyWithWhereWithoutWorkshopsInput {
  data: JobCategoryUpdateManyMutationInput!
  where: JobCategoryScalarWhereInput!
}

input JobCategoryUpdateManyWithoutChildNestedInput {
  connect: [JobCategoryWhereUniqueInput!]
  connectOrCreate: [JobCategoryCreateOrConnectWithoutChildInput!]
  create: [JobCategoryCreateWithoutChildInput!]
  createMany: JobCategoryCreateManyChildInputEnvelope
  delete: [JobCategoryWhereUniqueInput!]
  deleteMany: [JobCategoryScalarWhereInput!]
  disconnect: [JobCategoryWhereUniqueInput!]
  set: [JobCategoryWhereUniqueInput!]
  update: [JobCategoryUpdateWithWhereUniqueWithoutChildInput!]
  updateMany: [JobCategoryUpdateManyWithWhereWithoutChildInput!]
  upsert: [JobCategoryUpsertWithWhereUniqueWithoutChildInput!]
}

input JobCategoryUpdateManyWithoutWorkshopsNestedInput {
  connect: [JobCategoryWhereUniqueInput!]
  connectOrCreate: [JobCategoryCreateOrConnectWithoutWorkshopsInput!]
  create: [JobCategoryCreateWithoutWorkshopsInput!]
  delete: [JobCategoryWhereUniqueInput!]
  deleteMany: [JobCategoryScalarWhereInput!]
  disconnect: [JobCategoryWhereUniqueInput!]
  set: [JobCategoryWhereUniqueInput!]
  update: [JobCategoryUpdateWithWhereUniqueWithoutWorkshopsInput!]
  updateMany: [JobCategoryUpdateManyWithWhereWithoutWorkshopsInput!]
  upsert: [JobCategoryUpsertWithWhereUniqueWithoutWorkshopsInput!]
}

input JobCategoryUpdateOneRequiredWithoutJobsNestedInput {
  connect: JobCategoryWhereUniqueInput
  connectOrCreate: JobCategoryCreateOrConnectWithoutJobsInput
  create: JobCategoryCreateWithoutJobsInput
  update: JobCategoryUpdateToOneWithWhereWithoutJobsInput
  upsert: JobCategoryUpsertWithoutJobsInput
}

input JobCategoryUpdateOneWithoutChildrenNestedInput {
  connect: JobCategoryWhereUniqueInput
  connectOrCreate: JobCategoryCreateOrConnectWithoutChildrenInput
  create: JobCategoryCreateWithoutChildrenInput
  delete: JobCategoryWhereInput
  disconnect: JobCategoryWhereInput
  update: JobCategoryUpdateToOneWithWhereWithoutChildrenInput
  upsert: JobCategoryUpsertWithoutChildrenInput
}

input JobCategoryUpdateToOneWithWhereWithoutChildrenInput {
  data: JobCategoryUpdateWithoutChildrenInput!
  where: JobCategoryWhereInput
}

input JobCategoryUpdateToOneWithWhereWithoutJobsInput {
  data: JobCategoryUpdateWithoutJobsInput!
  where: JobCategoryWhereInput
}

input JobCategoryUpdateWithWhereUniqueWithoutChildInput {
  data: JobCategoryUpdateWithoutChildInput!
  where: JobCategoryWhereUniqueInput!
}

input JobCategoryUpdateWithWhereUniqueWithoutWorkshopsInput {
  data: JobCategoryUpdateWithoutWorkshopsInput!
  where: JobCategoryWhereUniqueInput!
}

input JobCategoryUpdateWithoutChildInput {
  Workshops: WorkshopUpdateManyWithoutJobCategoriesNestedInput
  children: JobCategoryUpdateManyWithoutChildNestedInput
  description: NullableStringFieldUpdateOperationsInput
  isPopular: BoolFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutJobCategoryNestedInput
  name: StringFieldUpdateOperationsInput
}

input JobCategoryUpdateWithoutChildrenInput {
  Workshops: WorkshopUpdateManyWithoutJobCategoriesNestedInput
  child: JobCategoryUpdateOneWithoutChildrenNestedInput
  description: NullableStringFieldUpdateOperationsInput
  isPopular: BoolFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutJobCategoryNestedInput
  name: StringFieldUpdateOperationsInput
}

input JobCategoryUpdateWithoutJobsInput {
  Workshops: WorkshopUpdateManyWithoutJobCategoriesNestedInput
  child: JobCategoryUpdateOneWithoutChildrenNestedInput
  children: JobCategoryUpdateManyWithoutChildNestedInput
  description: NullableStringFieldUpdateOperationsInput
  isPopular: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input JobCategoryUpdateWithoutWorkshopsInput {
  child: JobCategoryUpdateOneWithoutChildrenNestedInput
  children: JobCategoryUpdateManyWithoutChildNestedInput
  description: NullableStringFieldUpdateOperationsInput
  isPopular: BoolFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutJobCategoryNestedInput
  name: StringFieldUpdateOperationsInput
}

input JobCategoryUpsertWithWhereUniqueWithoutChildInput {
  create: JobCategoryCreateWithoutChildInput!
  update: JobCategoryUpdateWithoutChildInput!
  where: JobCategoryWhereUniqueInput!
}

input JobCategoryUpsertWithWhereUniqueWithoutWorkshopsInput {
  create: JobCategoryCreateWithoutWorkshopsInput!
  update: JobCategoryUpdateWithoutWorkshopsInput!
  where: JobCategoryWhereUniqueInput!
}

input JobCategoryUpsertWithoutChildrenInput {
  create: JobCategoryCreateWithoutChildrenInput!
  update: JobCategoryUpdateWithoutChildrenInput!
  where: JobCategoryWhereInput
}

input JobCategoryUpsertWithoutJobsInput {
  create: JobCategoryCreateWithoutJobsInput!
  update: JobCategoryUpdateWithoutJobsInput!
  where: JobCategoryWhereInput
}

input JobCategoryWhereInput {
  AND: [JobCategoryWhereInput!]
  NOT: [JobCategoryWhereInput!]
  OR: [JobCategoryWhereInput!]
  Workshops: WorkshopListRelationFilter
  categoryId: BigIntFilter
  child: JobCategoryNullableRelationFilter
  children: JobCategoryListRelationFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobs: JobListRelationFilter
  name: StringFilter
  parentId: BigIntNullableFilter
}

input JobCategoryWhereUniqueInput {
  AND: [JobCategoryWhereInput!]
  NOT: [JobCategoryWhereInput!]
  OR: [JobCategoryWhereInput!]
  Workshops: WorkshopListRelationFilter
  categoryId: BigInt
  child: JobCategoryNullableRelationFilter
  children: JobCategoryListRelationFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobs: JobListRelationFilter
  name: StringFilter
  parentId: BigIntNullableFilter
}

type JobCount {
  jobWorkshops: Int!
  serviceRequests: Int!
}

input JobCreateManyJobCategoryInput {
  description: String
  isPopular: Boolean
  name: String
}

input JobCreateManyJobCategoryInputEnvelope {
  data: [JobCreateManyJobCategoryInput!]!
  skipDuplicates: Boolean
}

input JobCreateNestedManyWithoutJobCategoryInput {
  connect: [JobWhereUniqueInput!]
  connectOrCreate: [JobCreateOrConnectWithoutJobCategoryInput!]
  create: [JobCreateWithoutJobCategoryInput!]
  createMany: JobCreateManyJobCategoryInputEnvelope
}

input JobCreateNestedManyWithoutServiceRequestsInput {
  connect: [JobWhereUniqueInput!]
  connectOrCreate: [JobCreateOrConnectWithoutServiceRequestsInput!]
  create: [JobCreateWithoutServiceRequestsInput!]
}

input JobCreateNestedOneWithoutJobWorkshopsInput {
  connect: JobWhereUniqueInput
  connectOrCreate: JobCreateOrConnectWithoutJobWorkshopsInput
  create: JobCreateWithoutJobWorkshopsInput
}

input JobCreateOrConnectWithoutJobCategoryInput {
  create: JobCreateWithoutJobCategoryInput!
  where: JobWhereUniqueInput!
}

input JobCreateOrConnectWithoutJobWorkshopsInput {
  create: JobCreateWithoutJobWorkshopsInput!
  where: JobWhereUniqueInput!
}

input JobCreateOrConnectWithoutServiceRequestsInput {
  create: JobCreateWithoutServiceRequestsInput!
  where: JobWhereUniqueInput!
}

input JobCreateWithoutJobCategoryInput {
  description: String
  isPopular: Boolean
  jobWorkshops: WorkshopJobCreateNestedManyWithoutJobInput
  name: String
  serviceRequests: ServiceRequestCreateNestedManyWithoutJobsInput
}

input JobCreateWithoutJobWorkshopsInput {
  description: String
  isPopular: Boolean
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  name: String
  serviceRequests: ServiceRequestCreateNestedManyWithoutJobsInput
}

input JobCreateWithoutServiceRequestsInput {
  description: String
  isPopular: Boolean
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  jobWorkshops: WorkshopJobCreateNestedManyWithoutJobInput
  name: String
}

input JobListRelationFilter {
  every: JobWhereInput
  none: JobWhereInput
  some: JobWhereInput
}

input JobRelationFilter {
  is: JobWhereInput
  isNot: JobWhereInput
}

input JobScalarWhereInput {
  AND: [JobScalarWhereInput!]
  NOT: [JobScalarWhereInput!]
  OR: [JobScalarWhereInput!]
  categoryId: BigIntFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobId: BigIntFilter
  name: StringNullableFilter
}

input JobUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  isPopular: BoolFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input JobUpdateManyWithWhereWithoutJobCategoryInput {
  data: JobUpdateManyMutationInput!
  where: JobScalarWhereInput!
}

input JobUpdateManyWithWhereWithoutServiceRequestsInput {
  data: JobUpdateManyMutationInput!
  where: JobScalarWhereInput!
}

input JobUpdateManyWithoutJobCategoryNestedInput {
  connect: [JobWhereUniqueInput!]
  connectOrCreate: [JobCreateOrConnectWithoutJobCategoryInput!]
  create: [JobCreateWithoutJobCategoryInput!]
  createMany: JobCreateManyJobCategoryInputEnvelope
  delete: [JobWhereUniqueInput!]
  deleteMany: [JobScalarWhereInput!]
  disconnect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutJobCategoryInput!]
  updateMany: [JobUpdateManyWithWhereWithoutJobCategoryInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutJobCategoryInput!]
}

input JobUpdateManyWithoutServiceRequestsNestedInput {
  connect: [JobWhereUniqueInput!]
  connectOrCreate: [JobCreateOrConnectWithoutServiceRequestsInput!]
  create: [JobCreateWithoutServiceRequestsInput!]
  delete: [JobWhereUniqueInput!]
  deleteMany: [JobScalarWhereInput!]
  disconnect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutServiceRequestsInput!]
  updateMany: [JobUpdateManyWithWhereWithoutServiceRequestsInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutServiceRequestsInput!]
}

input JobUpdateOneRequiredWithoutJobWorkshopsNestedInput {
  connect: JobWhereUniqueInput
  connectOrCreate: JobCreateOrConnectWithoutJobWorkshopsInput
  create: JobCreateWithoutJobWorkshopsInput
  update: JobUpdateToOneWithWhereWithoutJobWorkshopsInput
  upsert: JobUpsertWithoutJobWorkshopsInput
}

input JobUpdateToOneWithWhereWithoutJobWorkshopsInput {
  data: JobUpdateWithoutJobWorkshopsInput!
  where: JobWhereInput
}

input JobUpdateWithWhereUniqueWithoutJobCategoryInput {
  data: JobUpdateWithoutJobCategoryInput!
  where: JobWhereUniqueInput!
}

input JobUpdateWithWhereUniqueWithoutServiceRequestsInput {
  data: JobUpdateWithoutServiceRequestsInput!
  where: JobWhereUniqueInput!
}

input JobUpdateWithoutJobCategoryInput {
  description: NullableStringFieldUpdateOperationsInput
  isPopular: BoolFieldUpdateOperationsInput
  jobWorkshops: WorkshopJobUpdateManyWithoutJobNestedInput
  name: NullableStringFieldUpdateOperationsInput
  serviceRequests: ServiceRequestUpdateManyWithoutJobsNestedInput
}

input JobUpdateWithoutJobWorkshopsInput {
  description: NullableStringFieldUpdateOperationsInput
  isPopular: BoolFieldUpdateOperationsInput
  jobCategory: JobCategoryUpdateOneRequiredWithoutJobsNestedInput
  name: NullableStringFieldUpdateOperationsInput
  serviceRequests: ServiceRequestUpdateManyWithoutJobsNestedInput
}

input JobUpdateWithoutServiceRequestsInput {
  description: NullableStringFieldUpdateOperationsInput
  isPopular: BoolFieldUpdateOperationsInput
  jobCategory: JobCategoryUpdateOneRequiredWithoutJobsNestedInput
  jobWorkshops: WorkshopJobUpdateManyWithoutJobNestedInput
  name: NullableStringFieldUpdateOperationsInput
}

input JobUpsertWithWhereUniqueWithoutJobCategoryInput {
  create: JobCreateWithoutJobCategoryInput!
  update: JobUpdateWithoutJobCategoryInput!
  where: JobWhereUniqueInput!
}

input JobUpsertWithWhereUniqueWithoutServiceRequestsInput {
  create: JobCreateWithoutServiceRequestsInput!
  update: JobUpdateWithoutServiceRequestsInput!
  where: JobWhereUniqueInput!
}

input JobUpsertWithoutJobWorkshopsInput {
  create: JobCreateWithoutJobWorkshopsInput!
  update: JobUpdateWithoutJobWorkshopsInput!
  where: JobWhereInput
}

input JobWhereInput {
  AND: [JobWhereInput!]
  NOT: [JobWhereInput!]
  OR: [JobWhereInput!]
  categoryId: BigIntFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobCategory: JobCategoryRelationFilter
  jobId: BigIntFilter
  jobWorkshops: WorkshopJobListRelationFilter
  name: StringNullableFilter
  serviceRequests: ServiceRequestListRelationFilter
}

input JobWhereUniqueInput {
  AND: [JobWhereInput!]
  NOT: [JobWhereInput!]
  OR: [JobWhereInput!]
  categoryId: BigIntFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobCategory: JobCategoryRelationFilter
  jobId: BigInt
  jobWorkshops: WorkshopJobListRelationFilter
  name: StringNullableFilter
  serviceRequests: ServiceRequestListRelationFilter
}

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  createPerson(data: PersonCreateInput!): Person!
  deleteAddress(where: AddressWhereUniqueInput!): DeletePayload!
  deletePerson(personId: BigInt!): DeletePayload!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person!
}

input NestedBigIntFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntFilter
  notIn: [String!]
}

input NestedBigIntNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntNullableFilter
  notIn: [String!]
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedDecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input NestedEnumReviewsResponsesStatusFilter {
  equals: ReviewsResponsesStatus
  in: [ReviewsResponsesStatus!]
  not: NestedEnumReviewsResponsesStatusFilter
  notIn: [ReviewsResponsesStatus!]
}

input NestedEnumReviewsStatusFilter {
  equals: ReviewsStatus
  in: [ReviewsStatus!]
  not: NestedEnumReviewsStatusFilter
  notIn: [ReviewsStatus!]
}

input NestedEnumServiceRequestsStatusNullableFilter {
  equals: ServiceRequestsStatus
  in: [ServiceRequestsStatus!]
  not: NestedEnumServiceRequestsStatusNullableFilter
  notIn: [ServiceRequestsStatus!]
}

input NestedEnumServicesStatusNullableFilter {
  equals: ServicesStatus
  in: [ServicesStatus!]
  not: NestedEnumServicesStatusNullableFilter
  notIn: [ServicesStatus!]
}

input NestedEnumTasksStatusNullableFilter {
  equals: TasksStatus
  in: [TasksStatus!]
  not: NestedEnumTasksStatusNullableFilter
  notIn: [TasksStatus!]
}

input NestedEnumUserReportsReportedTypeFilter {
  equals: UserReportsReportedType
  in: [UserReportsReportedType!]
  not: NestedEnumUserReportsReportedTypeFilter
  notIn: [UserReportsReportedType!]
}

input NestedEnumUserReportsStatusFilter {
  equals: UserReportsStatus
  in: [UserReportsStatus!]
  not: NestedEnumUserReportsStatusFilter
  notIn: [UserReportsStatus!]
}

input NestedEnumUsersStatusNullableFilter {
  equals: UsersStatus
  in: [UsersStatus!]
  not: NestedEnumUsersStatusNullableFilter
  notIn: [UsersStatus!]
}

input NestedEnumWorkshopsDetailsStatusNullableFilter {
  equals: WorkshopsDetailsStatus
  in: [WorkshopsDetailsStatus!]
  not: NestedEnumWorkshopsDetailsStatusNullableFilter
  notIn: [WorkshopsDetailsStatus!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableBigIntFieldUpdateOperationsInput {
  decrement: String
  divide: String
  increment: String
  multiply: String
  set: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableDecimalFieldUpdateOperationsInput {
  decrement: Decimal
  divide: Decimal
  increment: Decimal
  multiply: Decimal
  set: Decimal
}

input NullableEnumServiceRequestsStatusFieldUpdateOperationsInput {
  set: ServiceRequestsStatus
}

input NullableEnumServicesStatusFieldUpdateOperationsInput {
  set: ServicesStatus
}

input NullableEnumTasksStatusFieldUpdateOperationsInput {
  set: TasksStatus
}

input NullableEnumUsersStatusFieldUpdateOperationsInput {
  set: UsersStatus
}

input NullableEnumWorkshopsDetailsStatusFieldUpdateOperationsInput {
  set: WorkshopsDetailsStatus
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type PermissionSet {
  _count: PermissionSetCount!
  canGenerateReports: Boolean!
  canModifyCustomers: Boolean!
  canModifyEmployees: Boolean!
  canModifyPermissions: Boolean!
  canModifyServices: Boolean!
  canModifyTasks: Boolean!
  canModifyWorkshopDetails: Boolean!
  canReadCustomers: Boolean!
  canReadEmployees: Boolean!
  canReadReports: Boolean!
  canReadServices: Boolean!
  canReadTasks: Boolean!
  canReadWorkshopDetails: Boolean!
  canUpdateCustomers: Boolean!
  canUpdateEmployees: Boolean!
  canUpdateServices: Boolean!
  canUpdateTasks: Boolean!
  canUpdateWorkshopDetails: Boolean!
  employees: [Employee!]
  permissionSetId: BigInt!
  setName: String!
  workshop: Workshop
  workshopId: BigInt
}

type PermissionSetCount {
  employees: Int!
}

input PermissionSetCreateManyWorkshopInput {
  canGenerateReports: Boolean
  canModifyCustomers: Boolean
  canModifyEmployees: Boolean
  canModifyPermissions: Boolean
  canModifyServices: Boolean
  canModifyTasks: Boolean
  canModifyWorkshopDetails: Boolean
  canReadCustomers: Boolean
  canReadEmployees: Boolean
  canReadReports: Boolean
  canReadServices: Boolean
  canReadTasks: Boolean
  canReadWorkshopDetails: Boolean
  canUpdateCustomers: Boolean
  canUpdateEmployees: Boolean
  canUpdateServices: Boolean
  canUpdateTasks: Boolean
  canUpdateWorkshopDetails: Boolean
  setName: String
}

input PermissionSetCreateManyWorkshopInputEnvelope {
  data: [PermissionSetCreateManyWorkshopInput!]!
  skipDuplicates: Boolean
}

input PermissionSetCreateNestedManyWithoutWorkshopInput {
  connect: [PermissionSetWhereUniqueInput!]
  connectOrCreate: [PermissionSetCreateOrConnectWithoutWorkshopInput!]
  create: [PermissionSetCreateWithoutWorkshopInput!]
  createMany: PermissionSetCreateManyWorkshopInputEnvelope
}

input PermissionSetCreateNestedOneWithoutEmployeesInput {
  connect: PermissionSetWhereUniqueInput
  connectOrCreate: PermissionSetCreateOrConnectWithoutEmployeesInput
  create: PermissionSetCreateWithoutEmployeesInput
}

input PermissionSetCreateOrConnectWithoutEmployeesInput {
  create: PermissionSetCreateWithoutEmployeesInput!
  where: PermissionSetWhereUniqueInput!
}

input PermissionSetCreateOrConnectWithoutWorkshopInput {
  create: PermissionSetCreateWithoutWorkshopInput!
  where: PermissionSetWhereUniqueInput!
}

input PermissionSetCreateWithoutEmployeesInput {
  canGenerateReports: Boolean
  canModifyCustomers: Boolean
  canModifyEmployees: Boolean
  canModifyPermissions: Boolean
  canModifyServices: Boolean
  canModifyTasks: Boolean
  canModifyWorkshopDetails: Boolean
  canReadCustomers: Boolean
  canReadEmployees: Boolean
  canReadReports: Boolean
  canReadServices: Boolean
  canReadTasks: Boolean
  canReadWorkshopDetails: Boolean
  canUpdateCustomers: Boolean
  canUpdateEmployees: Boolean
  canUpdateServices: Boolean
  canUpdateTasks: Boolean
  canUpdateWorkshopDetails: Boolean
  setName: String
  workshop: WorkshopCreateNestedOneWithoutPermissionSetsInput
}

input PermissionSetCreateWithoutWorkshopInput {
  canGenerateReports: Boolean
  canModifyCustomers: Boolean
  canModifyEmployees: Boolean
  canModifyPermissions: Boolean
  canModifyServices: Boolean
  canModifyTasks: Boolean
  canModifyWorkshopDetails: Boolean
  canReadCustomers: Boolean
  canReadEmployees: Boolean
  canReadReports: Boolean
  canReadServices: Boolean
  canReadTasks: Boolean
  canReadWorkshopDetails: Boolean
  canUpdateCustomers: Boolean
  canUpdateEmployees: Boolean
  canUpdateServices: Boolean
  canUpdateTasks: Boolean
  canUpdateWorkshopDetails: Boolean
  employees: EmployeeCreateNestedManyWithoutPermissionSetInput
  setName: String
}

input PermissionSetListRelationFilter {
  every: PermissionSetWhereInput
  none: PermissionSetWhereInput
  some: PermissionSetWhereInput
}

input PermissionSetNullableRelationFilter {
  is: PermissionSetWhereInput
  isNot: PermissionSetWhereInput
}

input PermissionSetScalarWhereInput {
  AND: [PermissionSetScalarWhereInput!]
  NOT: [PermissionSetScalarWhereInput!]
  OR: [PermissionSetScalarWhereInput!]
  canGenerateReports: BoolFilter
  canModifyCustomers: BoolFilter
  canModifyEmployees: BoolFilter
  canModifyPermissions: BoolFilter
  canModifyServices: BoolFilter
  canModifyTasks: BoolFilter
  canModifyWorkshopDetails: BoolFilter
  canReadCustomers: BoolFilter
  canReadEmployees: BoolFilter
  canReadReports: BoolFilter
  canReadServices: BoolFilter
  canReadTasks: BoolFilter
  canReadWorkshopDetails: BoolFilter
  canUpdateCustomers: BoolFilter
  canUpdateEmployees: BoolFilter
  canUpdateServices: BoolFilter
  canUpdateTasks: BoolFilter
  canUpdateWorkshopDetails: BoolFilter
  permissionSetId: BigIntFilter
  setName: StringFilter
  workshopId: BigIntNullableFilter
}

input PermissionSetUpdateManyMutationInput {
  canGenerateReports: BoolFieldUpdateOperationsInput
  canModifyCustomers: BoolFieldUpdateOperationsInput
  canModifyEmployees: BoolFieldUpdateOperationsInput
  canModifyPermissions: BoolFieldUpdateOperationsInput
  canModifyServices: BoolFieldUpdateOperationsInput
  canModifyTasks: BoolFieldUpdateOperationsInput
  canModifyWorkshopDetails: BoolFieldUpdateOperationsInput
  canReadCustomers: BoolFieldUpdateOperationsInput
  canReadEmployees: BoolFieldUpdateOperationsInput
  canReadReports: BoolFieldUpdateOperationsInput
  canReadServices: BoolFieldUpdateOperationsInput
  canReadTasks: BoolFieldUpdateOperationsInput
  canReadWorkshopDetails: BoolFieldUpdateOperationsInput
  canUpdateCustomers: BoolFieldUpdateOperationsInput
  canUpdateEmployees: BoolFieldUpdateOperationsInput
  canUpdateServices: BoolFieldUpdateOperationsInput
  canUpdateTasks: BoolFieldUpdateOperationsInput
  canUpdateWorkshopDetails: BoolFieldUpdateOperationsInput
  setName: StringFieldUpdateOperationsInput
}

input PermissionSetUpdateManyWithWhereWithoutWorkshopInput {
  data: PermissionSetUpdateManyMutationInput!
  where: PermissionSetScalarWhereInput!
}

input PermissionSetUpdateManyWithoutWorkshopNestedInput {
  connect: [PermissionSetWhereUniqueInput!]
  connectOrCreate: [PermissionSetCreateOrConnectWithoutWorkshopInput!]
  create: [PermissionSetCreateWithoutWorkshopInput!]
  createMany: PermissionSetCreateManyWorkshopInputEnvelope
  delete: [PermissionSetWhereUniqueInput!]
  deleteMany: [PermissionSetScalarWhereInput!]
  disconnect: [PermissionSetWhereUniqueInput!]
  set: [PermissionSetWhereUniqueInput!]
  update: [PermissionSetUpdateWithWhereUniqueWithoutWorkshopInput!]
  updateMany: [PermissionSetUpdateManyWithWhereWithoutWorkshopInput!]
  upsert: [PermissionSetUpsertWithWhereUniqueWithoutWorkshopInput!]
}

input PermissionSetUpdateOneWithoutEmployeesNestedInput {
  connect: PermissionSetWhereUniqueInput
  connectOrCreate: PermissionSetCreateOrConnectWithoutEmployeesInput
  create: PermissionSetCreateWithoutEmployeesInput
  delete: PermissionSetWhereInput
  disconnect: PermissionSetWhereInput
  update: PermissionSetUpdateToOneWithWhereWithoutEmployeesInput
  upsert: PermissionSetUpsertWithoutEmployeesInput
}

input PermissionSetUpdateToOneWithWhereWithoutEmployeesInput {
  data: PermissionSetUpdateWithoutEmployeesInput!
  where: PermissionSetWhereInput
}

input PermissionSetUpdateWithWhereUniqueWithoutWorkshopInput {
  data: PermissionSetUpdateWithoutWorkshopInput!
  where: PermissionSetWhereUniqueInput!
}

input PermissionSetUpdateWithoutEmployeesInput {
  canGenerateReports: BoolFieldUpdateOperationsInput
  canModifyCustomers: BoolFieldUpdateOperationsInput
  canModifyEmployees: BoolFieldUpdateOperationsInput
  canModifyPermissions: BoolFieldUpdateOperationsInput
  canModifyServices: BoolFieldUpdateOperationsInput
  canModifyTasks: BoolFieldUpdateOperationsInput
  canModifyWorkshopDetails: BoolFieldUpdateOperationsInput
  canReadCustomers: BoolFieldUpdateOperationsInput
  canReadEmployees: BoolFieldUpdateOperationsInput
  canReadReports: BoolFieldUpdateOperationsInput
  canReadServices: BoolFieldUpdateOperationsInput
  canReadTasks: BoolFieldUpdateOperationsInput
  canReadWorkshopDetails: BoolFieldUpdateOperationsInput
  canUpdateCustomers: BoolFieldUpdateOperationsInput
  canUpdateEmployees: BoolFieldUpdateOperationsInput
  canUpdateServices: BoolFieldUpdateOperationsInput
  canUpdateTasks: BoolFieldUpdateOperationsInput
  canUpdateWorkshopDetails: BoolFieldUpdateOperationsInput
  setName: StringFieldUpdateOperationsInput
  workshop: WorkshopUpdateOneWithoutPermissionSetsNestedInput
}

input PermissionSetUpdateWithoutWorkshopInput {
  canGenerateReports: BoolFieldUpdateOperationsInput
  canModifyCustomers: BoolFieldUpdateOperationsInput
  canModifyEmployees: BoolFieldUpdateOperationsInput
  canModifyPermissions: BoolFieldUpdateOperationsInput
  canModifyServices: BoolFieldUpdateOperationsInput
  canModifyTasks: BoolFieldUpdateOperationsInput
  canModifyWorkshopDetails: BoolFieldUpdateOperationsInput
  canReadCustomers: BoolFieldUpdateOperationsInput
  canReadEmployees: BoolFieldUpdateOperationsInput
  canReadReports: BoolFieldUpdateOperationsInput
  canReadServices: BoolFieldUpdateOperationsInput
  canReadTasks: BoolFieldUpdateOperationsInput
  canReadWorkshopDetails: BoolFieldUpdateOperationsInput
  canUpdateCustomers: BoolFieldUpdateOperationsInput
  canUpdateEmployees: BoolFieldUpdateOperationsInput
  canUpdateServices: BoolFieldUpdateOperationsInput
  canUpdateTasks: BoolFieldUpdateOperationsInput
  canUpdateWorkshopDetails: BoolFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutPermissionSetNestedInput
  setName: StringFieldUpdateOperationsInput
}

input PermissionSetUpsertWithWhereUniqueWithoutWorkshopInput {
  create: PermissionSetCreateWithoutWorkshopInput!
  update: PermissionSetUpdateWithoutWorkshopInput!
  where: PermissionSetWhereUniqueInput!
}

input PermissionSetUpsertWithoutEmployeesInput {
  create: PermissionSetCreateWithoutEmployeesInput!
  update: PermissionSetUpdateWithoutEmployeesInput!
  where: PermissionSetWhereInput
}

input PermissionSetWhereInput {
  AND: [PermissionSetWhereInput!]
  NOT: [PermissionSetWhereInput!]
  OR: [PermissionSetWhereInput!]
  canGenerateReports: BoolFilter
  canModifyCustomers: BoolFilter
  canModifyEmployees: BoolFilter
  canModifyPermissions: BoolFilter
  canModifyServices: BoolFilter
  canModifyTasks: BoolFilter
  canModifyWorkshopDetails: BoolFilter
  canReadCustomers: BoolFilter
  canReadEmployees: BoolFilter
  canReadReports: BoolFilter
  canReadServices: BoolFilter
  canReadTasks: BoolFilter
  canReadWorkshopDetails: BoolFilter
  canUpdateCustomers: BoolFilter
  canUpdateEmployees: BoolFilter
  canUpdateServices: BoolFilter
  canUpdateTasks: BoolFilter
  canUpdateWorkshopDetails: BoolFilter
  employees: EmployeeListRelationFilter
  permissionSetId: BigIntFilter
  setName: StringFilter
  workshop: WorkshopNullableRelationFilter
  workshopId: BigIntNullableFilter
}

input PermissionSetWhereUniqueInput {
  AND: [PermissionSetWhereInput!]
  NOT: [PermissionSetWhereInput!]
  OR: [PermissionSetWhereInput!]
  canGenerateReports: BoolFilter
  canModifyCustomers: BoolFilter
  canModifyEmployees: BoolFilter
  canModifyPermissions: BoolFilter
  canModifyServices: BoolFilter
  canModifyTasks: BoolFilter
  canModifyWorkshopDetails: BoolFilter
  canReadCustomers: BoolFilter
  canReadEmployees: BoolFilter
  canReadReports: BoolFilter
  canReadServices: BoolFilter
  canReadTasks: BoolFilter
  canReadWorkshopDetails: BoolFilter
  canUpdateCustomers: BoolFilter
  canUpdateEmployees: BoolFilter
  canUpdateServices: BoolFilter
  canUpdateTasks: BoolFilter
  canUpdateWorkshopDetails: BoolFilter
  employees: EmployeeListRelationFilter
  permissionSetId: BigInt
  setName: StringFilter
  workshop: WorkshopNullableRelationFilter
  workshopId: BigIntNullableFilter
}

type Person {
  _count: PersonCount!
  address: Address
  addressId: BigInt
  customers: [Customer!]
  deletedAt: DateTime
  employees: [Employee!]
  firstName: String!
  lastName: String!
  personId: BigInt!
  serviceRequests: [ServiceRequest!]
  telephoneNumber: String
  user: User
  vehicles: [Vehicle!]
  workshops: [Workshop!]
}

type PersonAvgAggregate {
  addressId: Float
  personId: Float
}

type PersonCount {
  customers: Int!
  employees: Int!
  serviceRequests: Int!
  vehicles: Int!
  workshops: Int!
}

type PersonCountAggregate {
  _all: Int!
  addressId: Int!
  deletedAt: Int!
  firstName: Int!
  lastName: Int!
  personId: Int!
  telephoneNumber: Int!
}

input PersonCreateInput {
  address: AddressCreateNestedOneWithoutPersonsInput
  customers: CustomerCreateNestedManyWithoutPersonInput
  employees: EmployeeCreateNestedManyWithoutPersonInput
  firstName: String!
  lastName: String!
  serviceRequests: ServiceRequestCreateNestedManyWithoutPersonInput
  telephoneNumber: String
  user: UserCreateNestedOneWithoutPersonInput
  vehicles: VehicleCreateNestedManyWithoutPersonInput
  workshops: WorkshopCreateNestedManyWithoutPersonInput
}

input PersonCreateManyAddressInput {
  firstName: String!
  lastName: String!
  telephoneNumber: String
}

input PersonCreateManyAddressInputEnvelope {
  data: [PersonCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input PersonCreateNestedManyWithoutAddressInput {
  connect: [PersonWhereUniqueInput!]
  connectOrCreate: [PersonCreateOrConnectWithoutAddressInput!]
  create: [PersonCreateWithoutAddressInput!]
  createMany: PersonCreateManyAddressInputEnvelope
}

input PersonCreateNestedOneWithoutCustomersInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutCustomersInput
  create: PersonCreateWithoutCustomersInput
}

input PersonCreateNestedOneWithoutEmployeesInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutEmployeesInput
  create: PersonCreateWithoutEmployeesInput
}

input PersonCreateNestedOneWithoutServiceRequestsInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutServiceRequestsInput
  create: PersonCreateWithoutServiceRequestsInput
}

input PersonCreateNestedOneWithoutUserInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutUserInput
  create: PersonCreateWithoutUserInput
}

input PersonCreateNestedOneWithoutVehiclesInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutVehiclesInput
  create: PersonCreateWithoutVehiclesInput
}

input PersonCreateNestedOneWithoutWorkshopsInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutWorkshopsInput
  create: PersonCreateWithoutWorkshopsInput
}

input PersonCreateOrConnectWithoutAddressInput {
  create: PersonCreateWithoutAddressInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateOrConnectWithoutCustomersInput {
  create: PersonCreateWithoutCustomersInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateOrConnectWithoutEmployeesInput {
  create: PersonCreateWithoutEmployeesInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateOrConnectWithoutServiceRequestsInput {
  create: PersonCreateWithoutServiceRequestsInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateOrConnectWithoutUserInput {
  create: PersonCreateWithoutUserInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateOrConnectWithoutVehiclesInput {
  create: PersonCreateWithoutVehiclesInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateOrConnectWithoutWorkshopsInput {
  create: PersonCreateWithoutWorkshopsInput!
  where: PersonWhereUniqueInput!
}

input PersonCreateWithoutAddressInput {
  customers: CustomerCreateNestedManyWithoutPersonInput
  employees: EmployeeCreateNestedManyWithoutPersonInput
  firstName: String!
  lastName: String!
  serviceRequests: ServiceRequestCreateNestedManyWithoutPersonInput
  telephoneNumber: String
  user: UserCreateNestedOneWithoutPersonInput
  vehicles: VehicleCreateNestedManyWithoutPersonInput
  workshops: WorkshopCreateNestedManyWithoutPersonInput
}

input PersonCreateWithoutCustomersInput {
  address: AddressCreateNestedOneWithoutPersonsInput
  employees: EmployeeCreateNestedManyWithoutPersonInput
  firstName: String!
  lastName: String!
  serviceRequests: ServiceRequestCreateNestedManyWithoutPersonInput
  telephoneNumber: String
  user: UserCreateNestedOneWithoutPersonInput
  vehicles: VehicleCreateNestedManyWithoutPersonInput
  workshops: WorkshopCreateNestedManyWithoutPersonInput
}

input PersonCreateWithoutEmployeesInput {
  address: AddressCreateNestedOneWithoutPersonsInput
  customers: CustomerCreateNestedManyWithoutPersonInput
  firstName: String!
  lastName: String!
  serviceRequests: ServiceRequestCreateNestedManyWithoutPersonInput
  telephoneNumber: String
  user: UserCreateNestedOneWithoutPersonInput
  vehicles: VehicleCreateNestedManyWithoutPersonInput
  workshops: WorkshopCreateNestedManyWithoutPersonInput
}

input PersonCreateWithoutServiceRequestsInput {
  address: AddressCreateNestedOneWithoutPersonsInput
  customers: CustomerCreateNestedManyWithoutPersonInput
  employees: EmployeeCreateNestedManyWithoutPersonInput
  firstName: String!
  lastName: String!
  telephoneNumber: String
  user: UserCreateNestedOneWithoutPersonInput
  vehicles: VehicleCreateNestedManyWithoutPersonInput
  workshops: WorkshopCreateNestedManyWithoutPersonInput
}

input PersonCreateWithoutUserInput {
  address: AddressCreateNestedOneWithoutPersonsInput
  customers: CustomerCreateNestedManyWithoutPersonInput
  employees: EmployeeCreateNestedManyWithoutPersonInput
  firstName: String!
  lastName: String!
  serviceRequests: ServiceRequestCreateNestedManyWithoutPersonInput
  telephoneNumber: String
  vehicles: VehicleCreateNestedManyWithoutPersonInput
  workshops: WorkshopCreateNestedManyWithoutPersonInput
}

input PersonCreateWithoutVehiclesInput {
  address: AddressCreateNestedOneWithoutPersonsInput
  customers: CustomerCreateNestedManyWithoutPersonInput
  employees: EmployeeCreateNestedManyWithoutPersonInput
  firstName: String!
  lastName: String!
  serviceRequests: ServiceRequestCreateNestedManyWithoutPersonInput
  telephoneNumber: String
  user: UserCreateNestedOneWithoutPersonInput
  workshops: WorkshopCreateNestedManyWithoutPersonInput
}

input PersonCreateWithoutWorkshopsInput {
  address: AddressCreateNestedOneWithoutPersonsInput
  customers: CustomerCreateNestedManyWithoutPersonInput
  employees: EmployeeCreateNestedManyWithoutPersonInput
  firstName: String!
  lastName: String!
  serviceRequests: ServiceRequestCreateNestedManyWithoutPersonInput
  telephoneNumber: String
  user: UserCreateNestedOneWithoutPersonInput
  vehicles: VehicleCreateNestedManyWithoutPersonInput
}

input PersonListRelationFilter {
  every: PersonWhereInput
  none: PersonWhereInput
  some: PersonWhereInput
}

type PersonMaxAggregate {
  addressId: BigInt
  deletedAt: DateTime
  firstName: String
  lastName: String
  personId: BigInt
  telephoneNumber: String
}

type PersonMinAggregate {
  addressId: BigInt
  deletedAt: DateTime
  firstName: String
  lastName: String
  personId: BigInt
  telephoneNumber: String
}

input PersonNullableRelationFilter {
  is: PersonWhereInput
  isNot: PersonWhereInput
}

input PersonRelationFilter {
  is: PersonWhereInput
  isNot: PersonWhereInput
}

input PersonScalarWhereInput {
  AND: [PersonScalarWhereInput!]
  NOT: [PersonScalarWhereInput!]
  OR: [PersonScalarWhereInput!]
  addressId: BigIntNullableFilter
  deletedAt: DateTimeNullableFilter
  firstName: StringFilter
  lastName: StringFilter
  personId: BigIntFilter
  telephoneNumber: StringNullableFilter
}

type PersonSumAggregate {
  addressId: BigInt
  personId: BigInt
}

input PersonUpdateInput {
  address: AddressUpdateOneWithoutPersonsNestedInput
  customers: CustomerUpdateManyWithoutPersonNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutPersonNestedInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  serviceRequests: ServiceRequestUpdateManyWithoutPersonNestedInput
  telephoneNumber: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneWithoutPersonNestedInput
  vehicles: VehicleUpdateManyWithoutPersonNestedInput
  workshops: WorkshopUpdateManyWithoutPersonNestedInput
}

input PersonUpdateManyMutationInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  telephoneNumber: NullableStringFieldUpdateOperationsInput
}

input PersonUpdateManyWithWhereWithoutAddressInput {
  data: PersonUpdateManyMutationInput!
  where: PersonScalarWhereInput!
}

input PersonUpdateManyWithoutAddressNestedInput {
  connect: [PersonWhereUniqueInput!]
  connectOrCreate: [PersonCreateOrConnectWithoutAddressInput!]
  create: [PersonCreateWithoutAddressInput!]
  createMany: PersonCreateManyAddressInputEnvelope
  delete: [PersonWhereUniqueInput!]
  deleteMany: [PersonScalarWhereInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [PersonUpdateManyWithWhereWithoutAddressInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutAddressInput!]
}

input PersonUpdateOneRequiredWithoutCustomersNestedInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutCustomersInput
  create: PersonCreateWithoutCustomersInput
  update: PersonUpdateToOneWithWhereWithoutCustomersInput
  upsert: PersonUpsertWithoutCustomersInput
}

input PersonUpdateOneRequiredWithoutEmployeesNestedInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutEmployeesInput
  create: PersonCreateWithoutEmployeesInput
  update: PersonUpdateToOneWithWhereWithoutEmployeesInput
  upsert: PersonUpsertWithoutEmployeesInput
}

input PersonUpdateOneRequiredWithoutServiceRequestsNestedInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutServiceRequestsInput
  create: PersonCreateWithoutServiceRequestsInput
  update: PersonUpdateToOneWithWhereWithoutServiceRequestsInput
  upsert: PersonUpsertWithoutServiceRequestsInput
}

input PersonUpdateOneRequiredWithoutVehiclesNestedInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutVehiclesInput
  create: PersonCreateWithoutVehiclesInput
  update: PersonUpdateToOneWithWhereWithoutVehiclesInput
  upsert: PersonUpsertWithoutVehiclesInput
}

input PersonUpdateOneRequiredWithoutWorkshopsNestedInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutWorkshopsInput
  create: PersonCreateWithoutWorkshopsInput
  update: PersonUpdateToOneWithWhereWithoutWorkshopsInput
  upsert: PersonUpsertWithoutWorkshopsInput
}

input PersonUpdateOneWithoutUserNestedInput {
  connect: PersonWhereUniqueInput
  connectOrCreate: PersonCreateOrConnectWithoutUserInput
  create: PersonCreateWithoutUserInput
  delete: PersonWhereInput
  disconnect: PersonWhereInput
  update: PersonUpdateToOneWithWhereWithoutUserInput
  upsert: PersonUpsertWithoutUserInput
}

input PersonUpdateToOneWithWhereWithoutCustomersInput {
  data: PersonUpdateWithoutCustomersInput!
  where: PersonWhereInput
}

input PersonUpdateToOneWithWhereWithoutEmployeesInput {
  data: PersonUpdateWithoutEmployeesInput!
  where: PersonWhereInput
}

input PersonUpdateToOneWithWhereWithoutServiceRequestsInput {
  data: PersonUpdateWithoutServiceRequestsInput!
  where: PersonWhereInput
}

input PersonUpdateToOneWithWhereWithoutUserInput {
  data: PersonUpdateWithoutUserInput!
  where: PersonWhereInput
}

input PersonUpdateToOneWithWhereWithoutVehiclesInput {
  data: PersonUpdateWithoutVehiclesInput!
  where: PersonWhereInput
}

input PersonUpdateToOneWithWhereWithoutWorkshopsInput {
  data: PersonUpdateWithoutWorkshopsInput!
  where: PersonWhereInput
}

input PersonUpdateWithWhereUniqueWithoutAddressInput {
  data: PersonUpdateWithoutAddressInput!
  where: PersonWhereUniqueInput!
}

input PersonUpdateWithoutAddressInput {
  customers: CustomerUpdateManyWithoutPersonNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutPersonNestedInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  serviceRequests: ServiceRequestUpdateManyWithoutPersonNestedInput
  telephoneNumber: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneWithoutPersonNestedInput
  vehicles: VehicleUpdateManyWithoutPersonNestedInput
  workshops: WorkshopUpdateManyWithoutPersonNestedInput
}

input PersonUpdateWithoutCustomersInput {
  address: AddressUpdateOneWithoutPersonsNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutPersonNestedInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  serviceRequests: ServiceRequestUpdateManyWithoutPersonNestedInput
  telephoneNumber: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneWithoutPersonNestedInput
  vehicles: VehicleUpdateManyWithoutPersonNestedInput
  workshops: WorkshopUpdateManyWithoutPersonNestedInput
}

input PersonUpdateWithoutEmployeesInput {
  address: AddressUpdateOneWithoutPersonsNestedInput
  customers: CustomerUpdateManyWithoutPersonNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  serviceRequests: ServiceRequestUpdateManyWithoutPersonNestedInput
  telephoneNumber: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneWithoutPersonNestedInput
  vehicles: VehicleUpdateManyWithoutPersonNestedInput
  workshops: WorkshopUpdateManyWithoutPersonNestedInput
}

input PersonUpdateWithoutServiceRequestsInput {
  address: AddressUpdateOneWithoutPersonsNestedInput
  customers: CustomerUpdateManyWithoutPersonNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutPersonNestedInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  telephoneNumber: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneWithoutPersonNestedInput
  vehicles: VehicleUpdateManyWithoutPersonNestedInput
  workshops: WorkshopUpdateManyWithoutPersonNestedInput
}

input PersonUpdateWithoutUserInput {
  address: AddressUpdateOneWithoutPersonsNestedInput
  customers: CustomerUpdateManyWithoutPersonNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutPersonNestedInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  serviceRequests: ServiceRequestUpdateManyWithoutPersonNestedInput
  telephoneNumber: NullableStringFieldUpdateOperationsInput
  vehicles: VehicleUpdateManyWithoutPersonNestedInput
  workshops: WorkshopUpdateManyWithoutPersonNestedInput
}

input PersonUpdateWithoutVehiclesInput {
  address: AddressUpdateOneWithoutPersonsNestedInput
  customers: CustomerUpdateManyWithoutPersonNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutPersonNestedInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  serviceRequests: ServiceRequestUpdateManyWithoutPersonNestedInput
  telephoneNumber: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneWithoutPersonNestedInput
  workshops: WorkshopUpdateManyWithoutPersonNestedInput
}

input PersonUpdateWithoutWorkshopsInput {
  address: AddressUpdateOneWithoutPersonsNestedInput
  customers: CustomerUpdateManyWithoutPersonNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutPersonNestedInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  serviceRequests: ServiceRequestUpdateManyWithoutPersonNestedInput
  telephoneNumber: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneWithoutPersonNestedInput
  vehicles: VehicleUpdateManyWithoutPersonNestedInput
}

input PersonUpsertWithWhereUniqueWithoutAddressInput {
  create: PersonCreateWithoutAddressInput!
  update: PersonUpdateWithoutAddressInput!
  where: PersonWhereUniqueInput!
}

input PersonUpsertWithoutCustomersInput {
  create: PersonCreateWithoutCustomersInput!
  update: PersonUpdateWithoutCustomersInput!
  where: PersonWhereInput
}

input PersonUpsertWithoutEmployeesInput {
  create: PersonCreateWithoutEmployeesInput!
  update: PersonUpdateWithoutEmployeesInput!
  where: PersonWhereInput
}

input PersonUpsertWithoutServiceRequestsInput {
  create: PersonCreateWithoutServiceRequestsInput!
  update: PersonUpdateWithoutServiceRequestsInput!
  where: PersonWhereInput
}

input PersonUpsertWithoutUserInput {
  create: PersonCreateWithoutUserInput!
  update: PersonUpdateWithoutUserInput!
  where: PersonWhereInput
}

input PersonUpsertWithoutVehiclesInput {
  create: PersonCreateWithoutVehiclesInput!
  update: PersonUpdateWithoutVehiclesInput!
  where: PersonWhereInput
}

input PersonUpsertWithoutWorkshopsInput {
  create: PersonCreateWithoutWorkshopsInput!
  update: PersonUpdateWithoutWorkshopsInput!
  where: PersonWhereInput
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  address: AddressNullableRelationFilter
  addressId: BigIntNullableFilter
  customers: CustomerListRelationFilter
  deletedAt: DateTimeNullableFilter
  employees: EmployeeListRelationFilter
  firstName: StringFilter
  lastName: StringFilter
  personId: BigIntFilter
  serviceRequests: ServiceRequestListRelationFilter
  telephoneNumber: StringNullableFilter
  user: UserNullableRelationFilter
  vehicles: VehicleListRelationFilter
  workshops: WorkshopListRelationFilter
}

input PersonWhereUniqueInput {
  AND: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  address: AddressNullableRelationFilter
  addressId: BigIntNullableFilter
  customers: CustomerListRelationFilter
  deletedAt: DateTimeNullableFilter
  employees: EmployeeListRelationFilter
  firstName: StringFilter
  lastName: StringFilter
  personId: BigInt
  serviceRequests: ServiceRequestListRelationFilter
  telephoneNumber: StringNullableFilter
  user: UserNullableRelationFilter
  vehicles: VehicleListRelationFilter
  workshops: WorkshopListRelationFilter
}

type Query {
  address(where: AddressWhereUniqueInput!): Address!
  addresses: [Address!]!
  person(personId: BigInt!): Person!
  persons: [Person!]!
}

type Review {
  _count: ReviewCount!
  rating: Decimal!
  reviewDate: DateTime!
  reviewId: BigInt!
  reviewResponses: [ReviewResponse!]
  reviewText: String!
  status: ReviewsStatus!
  user: User!
  userId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ReviewCount {
  reviewResponses: Int!
}

input ReviewCreateManyUserInput {
  rating: Decimal
  reviewDate: DateTime
  reviewText: String!
  status: ReviewsStatus
  workshopId: BigInt!
}

input ReviewCreateManyUserInputEnvelope {
  data: [ReviewCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReviewCreateManyWorkshopInput {
  rating: Decimal
  reviewDate: DateTime
  reviewText: String!
  status: ReviewsStatus
  userId: BigInt!
}

input ReviewCreateManyWorkshopInputEnvelope {
  data: [ReviewCreateManyWorkshopInput!]!
  skipDuplicates: Boolean
}

input ReviewCreateNestedManyWithoutUserInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput!]
  create: [ReviewCreateWithoutUserInput!]
  createMany: ReviewCreateManyUserInputEnvelope
}

input ReviewCreateNestedManyWithoutWorkshopInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutWorkshopInput!]
  create: [ReviewCreateWithoutWorkshopInput!]
  createMany: ReviewCreateManyWorkshopInputEnvelope
}

input ReviewCreateNestedOneWithoutReviewResponsesInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutReviewResponsesInput
  create: ReviewCreateWithoutReviewResponsesInput
}

input ReviewCreateOrConnectWithoutReviewResponsesInput {
  create: ReviewCreateWithoutReviewResponsesInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutUserInput {
  create: ReviewCreateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutWorkshopInput {
  create: ReviewCreateWithoutWorkshopInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateWithoutReviewResponsesInput {
  rating: Decimal
  reviewDate: DateTime
  reviewText: String!
  status: ReviewsStatus
  user: UserCreateNestedOneWithoutReviewsInput!
  workshop: WorkshopCreateNestedOneWithoutReviewsInput!
}

input ReviewCreateWithoutUserInput {
  rating: Decimal
  reviewDate: DateTime
  reviewResponses: ReviewResponseCreateNestedManyWithoutReviewInput
  reviewText: String!
  status: ReviewsStatus
  workshop: WorkshopCreateNestedOneWithoutReviewsInput!
}

input ReviewCreateWithoutWorkshopInput {
  rating: Decimal
  reviewDate: DateTime
  reviewResponses: ReviewResponseCreateNestedManyWithoutReviewInput
  reviewText: String!
  status: ReviewsStatus
  user: UserCreateNestedOneWithoutReviewsInput!
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

input ReviewRelationFilter {
  is: ReviewWhereInput
  isNot: ReviewWhereInput
}

type ReviewResponse {
  _count: ReviewResponseCount!
  otherReviewResponses: [ReviewResponse!]
  parentResponseId: BigInt
  responseDate: DateTime!
  responseText: String!
  review: Review!
  reviewId: BigInt!
  reviewResponse: ReviewResponse
  reviewResponseId: BigInt!
  status: ReviewsResponsesStatus!
  user: User!
  userId: BigInt!
}

type ReviewResponseCount {
  otherReviewResponses: Int!
}

input ReviewResponseCreateManyReviewInput {
  parentResponseId: BigInt
  responseDate: DateTime
  responseText: String!
  status: ReviewsResponsesStatus
  userId: BigInt!
}

input ReviewResponseCreateManyReviewInputEnvelope {
  data: [ReviewResponseCreateManyReviewInput!]!
  skipDuplicates: Boolean
}

input ReviewResponseCreateManyReviewResponseInput {
  responseDate: DateTime
  responseText: String!
  reviewId: BigInt!
  status: ReviewsResponsesStatus
  userId: BigInt!
}

input ReviewResponseCreateManyReviewResponseInputEnvelope {
  data: [ReviewResponseCreateManyReviewResponseInput!]!
  skipDuplicates: Boolean
}

input ReviewResponseCreateManyUserInput {
  parentResponseId: BigInt
  responseDate: DateTime
  responseText: String!
  reviewId: BigInt!
  status: ReviewsResponsesStatus
}

input ReviewResponseCreateManyUserInputEnvelope {
  data: [ReviewResponseCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReviewResponseCreateNestedManyWithoutReviewInput {
  connect: [ReviewResponseWhereUniqueInput!]
  connectOrCreate: [ReviewResponseCreateOrConnectWithoutReviewInput!]
  create: [ReviewResponseCreateWithoutReviewInput!]
  createMany: ReviewResponseCreateManyReviewInputEnvelope
}

input ReviewResponseCreateNestedManyWithoutReviewResponseInput {
  connect: [ReviewResponseWhereUniqueInput!]
  connectOrCreate: [ReviewResponseCreateOrConnectWithoutReviewResponseInput!]
  create: [ReviewResponseCreateWithoutReviewResponseInput!]
  createMany: ReviewResponseCreateManyReviewResponseInputEnvelope
}

input ReviewResponseCreateNestedManyWithoutUserInput {
  connect: [ReviewResponseWhereUniqueInput!]
  connectOrCreate: [ReviewResponseCreateOrConnectWithoutUserInput!]
  create: [ReviewResponseCreateWithoutUserInput!]
  createMany: ReviewResponseCreateManyUserInputEnvelope
}

input ReviewResponseCreateNestedOneWithoutOtherReviewResponsesInput {
  connect: ReviewResponseWhereUniqueInput
  connectOrCreate: ReviewResponseCreateOrConnectWithoutOtherReviewResponsesInput
  create: ReviewResponseCreateWithoutOtherReviewResponsesInput
}

input ReviewResponseCreateOrConnectWithoutOtherReviewResponsesInput {
  create: ReviewResponseCreateWithoutOtherReviewResponsesInput!
  where: ReviewResponseWhereUniqueInput!
}

input ReviewResponseCreateOrConnectWithoutReviewInput {
  create: ReviewResponseCreateWithoutReviewInput!
  where: ReviewResponseWhereUniqueInput!
}

input ReviewResponseCreateOrConnectWithoutReviewResponseInput {
  create: ReviewResponseCreateWithoutReviewResponseInput!
  where: ReviewResponseWhereUniqueInput!
}

input ReviewResponseCreateOrConnectWithoutUserInput {
  create: ReviewResponseCreateWithoutUserInput!
  where: ReviewResponseWhereUniqueInput!
}

input ReviewResponseCreateWithoutOtherReviewResponsesInput {
  responseDate: DateTime
  responseText: String!
  review: ReviewCreateNestedOneWithoutReviewResponsesInput!
  reviewResponse: ReviewResponseCreateNestedOneWithoutOtherReviewResponsesInput
  status: ReviewsResponsesStatus
  user: UserCreateNestedOneWithoutReviewResponsesInput!
}

input ReviewResponseCreateWithoutReviewInput {
  otherReviewResponses: ReviewResponseCreateNestedManyWithoutReviewResponseInput
  responseDate: DateTime
  responseText: String!
  reviewResponse: ReviewResponseCreateNestedOneWithoutOtherReviewResponsesInput
  status: ReviewsResponsesStatus
  user: UserCreateNestedOneWithoutReviewResponsesInput!
}

input ReviewResponseCreateWithoutReviewResponseInput {
  otherReviewResponses: ReviewResponseCreateNestedManyWithoutReviewResponseInput
  responseDate: DateTime
  responseText: String!
  review: ReviewCreateNestedOneWithoutReviewResponsesInput!
  status: ReviewsResponsesStatus
  user: UserCreateNestedOneWithoutReviewResponsesInput!
}

input ReviewResponseCreateWithoutUserInput {
  otherReviewResponses: ReviewResponseCreateNestedManyWithoutReviewResponseInput
  responseDate: DateTime
  responseText: String!
  review: ReviewCreateNestedOneWithoutReviewResponsesInput!
  reviewResponse: ReviewResponseCreateNestedOneWithoutOtherReviewResponsesInput
  status: ReviewsResponsesStatus
}

input ReviewResponseListRelationFilter {
  every: ReviewResponseWhereInput
  none: ReviewResponseWhereInput
  some: ReviewResponseWhereInput
}

input ReviewResponseNullableRelationFilter {
  is: ReviewResponseWhereInput
  isNot: ReviewResponseWhereInput
}

input ReviewResponseScalarWhereInput {
  AND: [ReviewResponseScalarWhereInput!]
  NOT: [ReviewResponseScalarWhereInput!]
  OR: [ReviewResponseScalarWhereInput!]
  parentResponseId: BigIntNullableFilter
  responseDate: DateTimeFilter
  responseText: StringFilter
  reviewId: BigIntFilter
  reviewResponseId: BigIntFilter
  status: EnumReviewsResponsesStatusFilter
  userId: BigIntFilter
}

input ReviewResponseUpdateManyMutationInput {
  responseDate: DateTimeFieldUpdateOperationsInput
  responseText: StringFieldUpdateOperationsInput
  status: EnumReviewsResponsesStatusFieldUpdateOperationsInput
}

input ReviewResponseUpdateManyWithWhereWithoutReviewInput {
  data: ReviewResponseUpdateManyMutationInput!
  where: ReviewResponseScalarWhereInput!
}

input ReviewResponseUpdateManyWithWhereWithoutReviewResponseInput {
  data: ReviewResponseUpdateManyMutationInput!
  where: ReviewResponseScalarWhereInput!
}

input ReviewResponseUpdateManyWithWhereWithoutUserInput {
  data: ReviewResponseUpdateManyMutationInput!
  where: ReviewResponseScalarWhereInput!
}

input ReviewResponseUpdateManyWithoutReviewNestedInput {
  connect: [ReviewResponseWhereUniqueInput!]
  connectOrCreate: [ReviewResponseCreateOrConnectWithoutReviewInput!]
  create: [ReviewResponseCreateWithoutReviewInput!]
  createMany: ReviewResponseCreateManyReviewInputEnvelope
  delete: [ReviewResponseWhereUniqueInput!]
  deleteMany: [ReviewResponseScalarWhereInput!]
  disconnect: [ReviewResponseWhereUniqueInput!]
  set: [ReviewResponseWhereUniqueInput!]
  update: [ReviewResponseUpdateWithWhereUniqueWithoutReviewInput!]
  updateMany: [ReviewResponseUpdateManyWithWhereWithoutReviewInput!]
  upsert: [ReviewResponseUpsertWithWhereUniqueWithoutReviewInput!]
}

input ReviewResponseUpdateManyWithoutReviewResponseNestedInput {
  connect: [ReviewResponseWhereUniqueInput!]
  connectOrCreate: [ReviewResponseCreateOrConnectWithoutReviewResponseInput!]
  create: [ReviewResponseCreateWithoutReviewResponseInput!]
  createMany: ReviewResponseCreateManyReviewResponseInputEnvelope
  delete: [ReviewResponseWhereUniqueInput!]
  deleteMany: [ReviewResponseScalarWhereInput!]
  disconnect: [ReviewResponseWhereUniqueInput!]
  set: [ReviewResponseWhereUniqueInput!]
  update: [ReviewResponseUpdateWithWhereUniqueWithoutReviewResponseInput!]
  updateMany: [ReviewResponseUpdateManyWithWhereWithoutReviewResponseInput!]
  upsert: [ReviewResponseUpsertWithWhereUniqueWithoutReviewResponseInput!]
}

input ReviewResponseUpdateManyWithoutUserNestedInput {
  connect: [ReviewResponseWhereUniqueInput!]
  connectOrCreate: [ReviewResponseCreateOrConnectWithoutUserInput!]
  create: [ReviewResponseCreateWithoutUserInput!]
  createMany: ReviewResponseCreateManyUserInputEnvelope
  delete: [ReviewResponseWhereUniqueInput!]
  deleteMany: [ReviewResponseScalarWhereInput!]
  disconnect: [ReviewResponseWhereUniqueInput!]
  set: [ReviewResponseWhereUniqueInput!]
  update: [ReviewResponseUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewResponseUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReviewResponseUpsertWithWhereUniqueWithoutUserInput!]
}

input ReviewResponseUpdateOneWithoutOtherReviewResponsesNestedInput {
  connect: ReviewResponseWhereUniqueInput
  connectOrCreate: ReviewResponseCreateOrConnectWithoutOtherReviewResponsesInput
  create: ReviewResponseCreateWithoutOtherReviewResponsesInput
  delete: ReviewResponseWhereInput
  disconnect: ReviewResponseWhereInput
  update: ReviewResponseUpdateToOneWithWhereWithoutOtherReviewResponsesInput
  upsert: ReviewResponseUpsertWithoutOtherReviewResponsesInput
}

input ReviewResponseUpdateToOneWithWhereWithoutOtherReviewResponsesInput {
  data: ReviewResponseUpdateWithoutOtherReviewResponsesInput!
  where: ReviewResponseWhereInput
}

input ReviewResponseUpdateWithWhereUniqueWithoutReviewInput {
  data: ReviewResponseUpdateWithoutReviewInput!
  where: ReviewResponseWhereUniqueInput!
}

input ReviewResponseUpdateWithWhereUniqueWithoutReviewResponseInput {
  data: ReviewResponseUpdateWithoutReviewResponseInput!
  where: ReviewResponseWhereUniqueInput!
}

input ReviewResponseUpdateWithWhereUniqueWithoutUserInput {
  data: ReviewResponseUpdateWithoutUserInput!
  where: ReviewResponseWhereUniqueInput!
}

input ReviewResponseUpdateWithoutOtherReviewResponsesInput {
  responseDate: DateTimeFieldUpdateOperationsInput
  responseText: StringFieldUpdateOperationsInput
  review: ReviewUpdateOneRequiredWithoutReviewResponsesNestedInput
  reviewResponse: ReviewResponseUpdateOneWithoutOtherReviewResponsesNestedInput
  status: EnumReviewsResponsesStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewResponsesNestedInput
}

input ReviewResponseUpdateWithoutReviewInput {
  otherReviewResponses: ReviewResponseUpdateManyWithoutReviewResponseNestedInput
  responseDate: DateTimeFieldUpdateOperationsInput
  responseText: StringFieldUpdateOperationsInput
  reviewResponse: ReviewResponseUpdateOneWithoutOtherReviewResponsesNestedInput
  status: EnumReviewsResponsesStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewResponsesNestedInput
}

input ReviewResponseUpdateWithoutReviewResponseInput {
  otherReviewResponses: ReviewResponseUpdateManyWithoutReviewResponseNestedInput
  responseDate: DateTimeFieldUpdateOperationsInput
  responseText: StringFieldUpdateOperationsInput
  review: ReviewUpdateOneRequiredWithoutReviewResponsesNestedInput
  status: EnumReviewsResponsesStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewResponsesNestedInput
}

input ReviewResponseUpdateWithoutUserInput {
  otherReviewResponses: ReviewResponseUpdateManyWithoutReviewResponseNestedInput
  responseDate: DateTimeFieldUpdateOperationsInput
  responseText: StringFieldUpdateOperationsInput
  review: ReviewUpdateOneRequiredWithoutReviewResponsesNestedInput
  reviewResponse: ReviewResponseUpdateOneWithoutOtherReviewResponsesNestedInput
  status: EnumReviewsResponsesStatusFieldUpdateOperationsInput
}

input ReviewResponseUpsertWithWhereUniqueWithoutReviewInput {
  create: ReviewResponseCreateWithoutReviewInput!
  update: ReviewResponseUpdateWithoutReviewInput!
  where: ReviewResponseWhereUniqueInput!
}

input ReviewResponseUpsertWithWhereUniqueWithoutReviewResponseInput {
  create: ReviewResponseCreateWithoutReviewResponseInput!
  update: ReviewResponseUpdateWithoutReviewResponseInput!
  where: ReviewResponseWhereUniqueInput!
}

input ReviewResponseUpsertWithWhereUniqueWithoutUserInput {
  create: ReviewResponseCreateWithoutUserInput!
  update: ReviewResponseUpdateWithoutUserInput!
  where: ReviewResponseWhereUniqueInput!
}

input ReviewResponseUpsertWithoutOtherReviewResponsesInput {
  create: ReviewResponseCreateWithoutOtherReviewResponsesInput!
  update: ReviewResponseUpdateWithoutOtherReviewResponsesInput!
  where: ReviewResponseWhereInput
}

input ReviewResponseWhereInput {
  AND: [ReviewResponseWhereInput!]
  NOT: [ReviewResponseWhereInput!]
  OR: [ReviewResponseWhereInput!]
  otherReviewResponses: ReviewResponseListRelationFilter
  parentResponseId: BigIntNullableFilter
  responseDate: DateTimeFilter
  responseText: StringFilter
  review: ReviewRelationFilter
  reviewId: BigIntFilter
  reviewResponse: ReviewResponseNullableRelationFilter
  reviewResponseId: BigIntFilter
  status: EnumReviewsResponsesStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
}

input ReviewResponseWhereUniqueInput {
  AND: [ReviewResponseWhereInput!]
  NOT: [ReviewResponseWhereInput!]
  OR: [ReviewResponseWhereInput!]
  otherReviewResponses: ReviewResponseListRelationFilter
  parentResponseId: BigIntNullableFilter
  responseDate: DateTimeFilter
  responseText: StringFilter
  review: ReviewRelationFilter
  reviewId: BigIntFilter
  reviewResponse: ReviewResponseNullableRelationFilter
  reviewResponseId: BigInt
  status: EnumReviewsResponsesStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  rating: DecimalFilter
  reviewDate: DateTimeFilter
  reviewId: BigIntFilter
  reviewText: StringFilter
  status: EnumReviewsStatusFilter
  userId: BigIntFilter
  workshopId: BigIntFilter
}

input ReviewUpdateManyMutationInput {
  rating: DecimalFieldUpdateOperationsInput
  reviewDate: DateTimeFieldUpdateOperationsInput
  reviewText: StringFieldUpdateOperationsInput
  status: EnumReviewsStatusFieldUpdateOperationsInput
}

input ReviewUpdateManyWithWhereWithoutUserInput {
  data: ReviewUpdateManyMutationInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateManyWithWhereWithoutWorkshopInput {
  data: ReviewUpdateManyMutationInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateManyWithoutUserNestedInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput!]
  create: [ReviewCreateWithoutUserInput!]
  createMany: ReviewCreateManyUserInputEnvelope
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input ReviewUpdateManyWithoutWorkshopNestedInput {
  connect: [ReviewWhereUniqueInput!]
  connectOrCreate: [ReviewCreateOrConnectWithoutWorkshopInput!]
  create: [ReviewCreateWithoutWorkshopInput!]
  createMany: ReviewCreateManyWorkshopInputEnvelope
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutWorkshopInput!]
  updateMany: [ReviewUpdateManyWithWhereWithoutWorkshopInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutWorkshopInput!]
}

input ReviewUpdateOneRequiredWithoutReviewResponsesNestedInput {
  connect: ReviewWhereUniqueInput
  connectOrCreate: ReviewCreateOrConnectWithoutReviewResponsesInput
  create: ReviewCreateWithoutReviewResponsesInput
  update: ReviewUpdateToOneWithWhereWithoutReviewResponsesInput
  upsert: ReviewUpsertWithoutReviewResponsesInput
}

input ReviewUpdateToOneWithWhereWithoutReviewResponsesInput {
  data: ReviewUpdateWithoutReviewResponsesInput!
  where: ReviewWhereInput
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  data: ReviewUpdateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutWorkshopInput {
  data: ReviewUpdateWithoutWorkshopInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithoutReviewResponsesInput {
  rating: DecimalFieldUpdateOperationsInput
  reviewDate: DateTimeFieldUpdateOperationsInput
  reviewText: StringFieldUpdateOperationsInput
  status: EnumReviewsStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewsNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutReviewsNestedInput
}

input ReviewUpdateWithoutUserInput {
  rating: DecimalFieldUpdateOperationsInput
  reviewDate: DateTimeFieldUpdateOperationsInput
  reviewResponses: ReviewResponseUpdateManyWithoutReviewNestedInput
  reviewText: StringFieldUpdateOperationsInput
  status: EnumReviewsStatusFieldUpdateOperationsInput
  workshop: WorkshopUpdateOneRequiredWithoutReviewsNestedInput
}

input ReviewUpdateWithoutWorkshopInput {
  rating: DecimalFieldUpdateOperationsInput
  reviewDate: DateTimeFieldUpdateOperationsInput
  reviewResponses: ReviewResponseUpdateManyWithoutReviewNestedInput
  reviewText: StringFieldUpdateOperationsInput
  status: EnumReviewsStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewsNestedInput
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  create: ReviewCreateWithoutUserInput!
  update: ReviewUpdateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutWorkshopInput {
  create: ReviewCreateWithoutWorkshopInput!
  update: ReviewUpdateWithoutWorkshopInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithoutReviewResponsesInput {
  create: ReviewCreateWithoutReviewResponsesInput!
  update: ReviewUpdateWithoutReviewResponsesInput!
  where: ReviewWhereInput
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  rating: DecimalFilter
  reviewDate: DateTimeFilter
  reviewId: BigIntFilter
  reviewResponses: ReviewResponseListRelationFilter
  reviewText: StringFilter
  status: EnumReviewsStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input ReviewWhereUniqueInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  rating: DecimalFilter
  reviewDate: DateTimeFilter
  reviewId: BigInt
  reviewResponses: ReviewResponseListRelationFilter
  reviewText: StringFilter
  status: EnumReviewsStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

enum ReviewsResponsesStatus {
  accepted
  denied
  pending
}

enum ReviewsStatus {
  accepted
  denied
  pending
}

type Service {
  _count: ServiceCount!
  customer: Customer!
  customerId: BigInt!
  deletedAt: DateTime
  description: String
  employee: Employee!
  employeeId: BigInt!
  payedOff: Boolean!
  paymentAmount: Decimal!
  serviceEndDate: DateTime
  serviceId: BigInt!
  serviceRequest: ServiceRequest
  serviceRequestId: BigInt
  serviceStartDate: DateTime!
  status: ServicesStatus
  tasks: [Task!]
  updatedAt: DateTime
  vehicle: Vehicle!
  vehicleId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ServiceCount {
  tasks: Int!
}

input ServiceCreateManyCustomerInput {
  description: String
  employeeId: BigInt!
  payedOff: Boolean
  paymentAmount: Decimal
  serviceEndDate: DateTime
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  updatedAt: DateTime
  vehicleId: BigInt!
}

input ServiceCreateManyCustomerInputEnvelope {
  data: [ServiceCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input ServiceCreateManyEmployeeInput {
  customerId: BigInt!
  description: String
  payedOff: Boolean
  paymentAmount: Decimal
  serviceEndDate: DateTime
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  updatedAt: DateTime
  vehicleId: BigInt!
}

input ServiceCreateManyEmployeeInputEnvelope {
  data: [ServiceCreateManyEmployeeInput!]!
  skipDuplicates: Boolean
}

input ServiceCreateManyVehicleInput {
  customerId: BigInt!
  description: String
  employeeId: BigInt!
  payedOff: Boolean
  paymentAmount: Decimal
  serviceEndDate: DateTime
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  updatedAt: DateTime
  workshopId: BigInt!
}

input ServiceCreateManyVehicleInputEnvelope {
  data: [ServiceCreateManyVehicleInput!]!
  skipDuplicates: Boolean
}

input ServiceCreateManyWorkshopInput {
  customerId: BigInt!
  description: String
  employeeId: BigInt!
  payedOff: Boolean
  paymentAmount: Decimal
  serviceEndDate: DateTime
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  updatedAt: DateTime
  vehicleId: BigInt!
}

input ServiceCreateManyWorkshopInputEnvelope {
  data: [ServiceCreateManyWorkshopInput!]!
  skipDuplicates: Boolean
}

input ServiceCreateNestedManyWithoutCustomerInput {
  connect: [ServiceWhereUniqueInput!]
  connectOrCreate: [ServiceCreateOrConnectWithoutCustomerInput!]
  create: [ServiceCreateWithoutCustomerInput!]
  createMany: ServiceCreateManyCustomerInputEnvelope
}

input ServiceCreateNestedManyWithoutEmployeeInput {
  connect: [ServiceWhereUniqueInput!]
  connectOrCreate: [ServiceCreateOrConnectWithoutEmployeeInput!]
  create: [ServiceCreateWithoutEmployeeInput!]
  createMany: ServiceCreateManyEmployeeInputEnvelope
}

input ServiceCreateNestedManyWithoutVehicleInput {
  connect: [ServiceWhereUniqueInput!]
  connectOrCreate: [ServiceCreateOrConnectWithoutVehicleInput!]
  create: [ServiceCreateWithoutVehicleInput!]
  createMany: ServiceCreateManyVehicleInputEnvelope
}

input ServiceCreateNestedManyWithoutWorkshopInput {
  connect: [ServiceWhereUniqueInput!]
  connectOrCreate: [ServiceCreateOrConnectWithoutWorkshopInput!]
  create: [ServiceCreateWithoutWorkshopInput!]
  createMany: ServiceCreateManyWorkshopInputEnvelope
}

input ServiceCreateNestedOneWithoutServiceRequestInput {
  connect: ServiceWhereUniqueInput
  connectOrCreate: ServiceCreateOrConnectWithoutServiceRequestInput
  create: ServiceCreateWithoutServiceRequestInput
}

input ServiceCreateNestedOneWithoutTasksInput {
  connect: ServiceWhereUniqueInput
  connectOrCreate: ServiceCreateOrConnectWithoutTasksInput
  create: ServiceCreateWithoutTasksInput
}

input ServiceCreateOrConnectWithoutCustomerInput {
  create: ServiceCreateWithoutCustomerInput!
  where: ServiceWhereUniqueInput!
}

input ServiceCreateOrConnectWithoutEmployeeInput {
  create: ServiceCreateWithoutEmployeeInput!
  where: ServiceWhereUniqueInput!
}

input ServiceCreateOrConnectWithoutServiceRequestInput {
  create: ServiceCreateWithoutServiceRequestInput!
  where: ServiceWhereUniqueInput!
}

input ServiceCreateOrConnectWithoutTasksInput {
  create: ServiceCreateWithoutTasksInput!
  where: ServiceWhereUniqueInput!
}

input ServiceCreateOrConnectWithoutVehicleInput {
  create: ServiceCreateWithoutVehicleInput!
  where: ServiceWhereUniqueInput!
}

input ServiceCreateOrConnectWithoutWorkshopInput {
  create: ServiceCreateWithoutWorkshopInput!
  where: ServiceWhereUniqueInput!
}

input ServiceCreateWithoutCustomerInput {
  description: String
  employee: EmployeeCreateNestedOneWithoutServicesInput!
  payedOff: Boolean
  paymentAmount: Decimal
  serviceEndDate: DateTime
  serviceRequest: ServiceRequestCreateNestedOneWithoutApprovedServiceInput
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  tasks: TaskCreateNestedManyWithoutServiceInput
  updatedAt: DateTime
  vehicle: VehicleCreateNestedOneWithoutServicesInput!
  workshop: WorkshopCreateNestedOneWithoutServicesInput!
}

input ServiceCreateWithoutEmployeeInput {
  customer: CustomerCreateNestedOneWithoutServicesInput!
  description: String
  payedOff: Boolean
  paymentAmount: Decimal
  serviceEndDate: DateTime
  serviceRequest: ServiceRequestCreateNestedOneWithoutApprovedServiceInput
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  tasks: TaskCreateNestedManyWithoutServiceInput
  updatedAt: DateTime
  vehicle: VehicleCreateNestedOneWithoutServicesInput!
  workshop: WorkshopCreateNestedOneWithoutServicesInput!
}

input ServiceCreateWithoutServiceRequestInput {
  customer: CustomerCreateNestedOneWithoutServicesInput!
  description: String
  employee: EmployeeCreateNestedOneWithoutServicesInput!
  payedOff: Boolean
  paymentAmount: Decimal
  serviceEndDate: DateTime
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  tasks: TaskCreateNestedManyWithoutServiceInput
  updatedAt: DateTime
  vehicle: VehicleCreateNestedOneWithoutServicesInput!
  workshop: WorkshopCreateNestedOneWithoutServicesInput!
}

input ServiceCreateWithoutTasksInput {
  customer: CustomerCreateNestedOneWithoutServicesInput!
  description: String
  employee: EmployeeCreateNestedOneWithoutServicesInput!
  payedOff: Boolean
  paymentAmount: Decimal
  serviceEndDate: DateTime
  serviceRequest: ServiceRequestCreateNestedOneWithoutApprovedServiceInput
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  updatedAt: DateTime
  vehicle: VehicleCreateNestedOneWithoutServicesInput!
  workshop: WorkshopCreateNestedOneWithoutServicesInput!
}

input ServiceCreateWithoutVehicleInput {
  customer: CustomerCreateNestedOneWithoutServicesInput!
  description: String
  employee: EmployeeCreateNestedOneWithoutServicesInput!
  payedOff: Boolean
  paymentAmount: Decimal
  serviceEndDate: DateTime
  serviceRequest: ServiceRequestCreateNestedOneWithoutApprovedServiceInput
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  tasks: TaskCreateNestedManyWithoutServiceInput
  updatedAt: DateTime
  workshop: WorkshopCreateNestedOneWithoutServicesInput!
}

input ServiceCreateWithoutWorkshopInput {
  customer: CustomerCreateNestedOneWithoutServicesInput!
  description: String
  employee: EmployeeCreateNestedOneWithoutServicesInput!
  payedOff: Boolean
  paymentAmount: Decimal
  serviceEndDate: DateTime
  serviceRequest: ServiceRequestCreateNestedOneWithoutApprovedServiceInput
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServicesStatus
  tasks: TaskCreateNestedManyWithoutServiceInput
  updatedAt: DateTime
  vehicle: VehicleCreateNestedOneWithoutServicesInput!
}

input ServiceListRelationFilter {
  every: ServiceWhereInput
  none: ServiceWhereInput
  some: ServiceWhereInput
}

input ServiceNullableRelationFilter {
  is: ServiceWhereInput
  isNot: ServiceWhereInput
}

input ServiceRelationFilter {
  is: ServiceWhereInput
  isNot: ServiceWhereInput
}

type ServiceRequest {
  _count: ServiceRequestCount!
  approvedService: Service
  approvedServiceId: String
  deletedAt: DateTime
  description: String
  jobs: [Job!]
  person: Person!
  personId: BigInt!
  requestedAt: DateTime!
  serviceRequestId: BigInt!
  status: ServiceRequestsStatus
  vehicle: Vehicle!
  vehicleId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ServiceRequestAvgAggregate {
  approvedServiceId: Float
  personId: Float
  serviceRequestId: Float
  vehicleId: Float
  workshopId: Float
}

type ServiceRequestCount {
  jobs: Int!
}

type ServiceRequestCountAggregate {
  _all: Int!
  approvedServiceId: Int!
  deletedAt: Int!
  description: Int!
  personId: Int!
  requestedAt: Int!
  serviceRequestId: Int!
  status: Int!
  vehicleId: Int!
  workshopId: Int!
}

input ServiceRequestCreateManyPersonInput {
  approvedServiceId: String
  description: String
  requestedAt: DateTime
  status: ServiceRequestsStatus
  vehicleId: BigInt!
  workshopId: BigInt!
}

input ServiceRequestCreateManyPersonInputEnvelope {
  data: [ServiceRequestCreateManyPersonInput!]!
  skipDuplicates: Boolean
}

input ServiceRequestCreateManyVehicleInput {
  approvedServiceId: String
  description: String
  personId: BigInt!
  requestedAt: DateTime
  status: ServiceRequestsStatus
  workshopId: BigInt!
}

input ServiceRequestCreateManyVehicleInputEnvelope {
  data: [ServiceRequestCreateManyVehicleInput!]!
  skipDuplicates: Boolean
}

input ServiceRequestCreateManyWorkshopInput {
  approvedServiceId: String
  description: String
  personId: BigInt!
  requestedAt: DateTime
  status: ServiceRequestsStatus
  vehicleId: BigInt!
}

input ServiceRequestCreateManyWorkshopInputEnvelope {
  data: [ServiceRequestCreateManyWorkshopInput!]!
  skipDuplicates: Boolean
}

input ServiceRequestCreateNestedManyWithoutJobsInput {
  connect: [ServiceRequestWhereUniqueInput!]
  connectOrCreate: [ServiceRequestCreateOrConnectWithoutJobsInput!]
  create: [ServiceRequestCreateWithoutJobsInput!]
}

input ServiceRequestCreateNestedManyWithoutPersonInput {
  connect: [ServiceRequestWhereUniqueInput!]
  connectOrCreate: [ServiceRequestCreateOrConnectWithoutPersonInput!]
  create: [ServiceRequestCreateWithoutPersonInput!]
  createMany: ServiceRequestCreateManyPersonInputEnvelope
}

input ServiceRequestCreateNestedManyWithoutVehicleInput {
  connect: [ServiceRequestWhereUniqueInput!]
  connectOrCreate: [ServiceRequestCreateOrConnectWithoutVehicleInput!]
  create: [ServiceRequestCreateWithoutVehicleInput!]
  createMany: ServiceRequestCreateManyVehicleInputEnvelope
}

input ServiceRequestCreateNestedManyWithoutWorkshopInput {
  connect: [ServiceRequestWhereUniqueInput!]
  connectOrCreate: [ServiceRequestCreateOrConnectWithoutWorkshopInput!]
  create: [ServiceRequestCreateWithoutWorkshopInput!]
  createMany: ServiceRequestCreateManyWorkshopInputEnvelope
}

input ServiceRequestCreateNestedOneWithoutApprovedServiceInput {
  connect: ServiceRequestWhereUniqueInput
  connectOrCreate: ServiceRequestCreateOrConnectWithoutApprovedServiceInput
  create: ServiceRequestCreateWithoutApprovedServiceInput
}

input ServiceRequestCreateOrConnectWithoutApprovedServiceInput {
  create: ServiceRequestCreateWithoutApprovedServiceInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestCreateOrConnectWithoutJobsInput {
  create: ServiceRequestCreateWithoutJobsInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestCreateOrConnectWithoutPersonInput {
  create: ServiceRequestCreateWithoutPersonInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestCreateOrConnectWithoutVehicleInput {
  create: ServiceRequestCreateWithoutVehicleInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestCreateOrConnectWithoutWorkshopInput {
  create: ServiceRequestCreateWithoutWorkshopInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestCreateWithoutApprovedServiceInput {
  description: String
  jobs: JobCreateNestedManyWithoutServiceRequestsInput
  person: PersonCreateNestedOneWithoutServiceRequestsInput!
  requestedAt: DateTime
  status: ServiceRequestsStatus
  vehicle: VehicleCreateNestedOneWithoutVehicleAssociatedServiceRequestsInput!
  workshop: WorkshopCreateNestedOneWithoutServiceRequestsInput!
}

input ServiceRequestCreateWithoutJobsInput {
  approvedService: ServiceCreateNestedOneWithoutServiceRequestInput
  description: String
  person: PersonCreateNestedOneWithoutServiceRequestsInput!
  requestedAt: DateTime
  status: ServiceRequestsStatus
  vehicle: VehicleCreateNestedOneWithoutVehicleAssociatedServiceRequestsInput!
  workshop: WorkshopCreateNestedOneWithoutServiceRequestsInput!
}

input ServiceRequestCreateWithoutPersonInput {
  approvedService: ServiceCreateNestedOneWithoutServiceRequestInput
  description: String
  jobs: JobCreateNestedManyWithoutServiceRequestsInput
  requestedAt: DateTime
  status: ServiceRequestsStatus
  vehicle: VehicleCreateNestedOneWithoutVehicleAssociatedServiceRequestsInput!
  workshop: WorkshopCreateNestedOneWithoutServiceRequestsInput!
}

input ServiceRequestCreateWithoutVehicleInput {
  approvedService: ServiceCreateNestedOneWithoutServiceRequestInput
  description: String
  jobs: JobCreateNestedManyWithoutServiceRequestsInput
  person: PersonCreateNestedOneWithoutServiceRequestsInput!
  requestedAt: DateTime
  status: ServiceRequestsStatus
  workshop: WorkshopCreateNestedOneWithoutServiceRequestsInput!
}

input ServiceRequestCreateWithoutWorkshopInput {
  approvedService: ServiceCreateNestedOneWithoutServiceRequestInput
  description: String
  jobs: JobCreateNestedManyWithoutServiceRequestsInput
  person: PersonCreateNestedOneWithoutServiceRequestsInput!
  requestedAt: DateTime
  status: ServiceRequestsStatus
  vehicle: VehicleCreateNestedOneWithoutVehicleAssociatedServiceRequestsInput!
}

input ServiceRequestListRelationFilter {
  every: ServiceRequestWhereInput
  none: ServiceRequestWhereInput
  some: ServiceRequestWhereInput
}

type ServiceRequestMaxAggregate {
  approvedServiceId: String
  deletedAt: DateTime
  description: String
  personId: BigInt
  requestedAt: DateTime
  serviceRequestId: BigInt
  status: ServiceRequestsStatus
  vehicleId: BigInt
  workshopId: BigInt
}

type ServiceRequestMinAggregate {
  approvedServiceId: String
  deletedAt: DateTime
  description: String
  personId: BigInt
  requestedAt: DateTime
  serviceRequestId: BigInt
  status: ServiceRequestsStatus
  vehicleId: BigInt
  workshopId: BigInt
}

input ServiceRequestNullableRelationFilter {
  is: ServiceRequestWhereInput
  isNot: ServiceRequestWhereInput
}

input ServiceRequestScalarWhereInput {
  AND: [ServiceRequestScalarWhereInput!]
  NOT: [ServiceRequestScalarWhereInput!]
  OR: [ServiceRequestScalarWhereInput!]
  approvedServiceId: BigIntNullableFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  personId: BigIntFilter
  requestedAt: DateTimeFilter
  serviceRequestId: BigIntFilter
  status: EnumServiceRequestsStatusNullableFilter
  vehicleId: BigIntFilter
  workshopId: BigIntFilter
}

type ServiceRequestSumAggregate {
  approvedServiceId: String
  personId: BigInt
  serviceRequestId: BigInt
  vehicleId: BigInt
  workshopId: BigInt
}

input ServiceRequestUpdateManyMutationInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  requestedAt: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServiceRequestsStatusFieldUpdateOperationsInput
}

input ServiceRequestUpdateManyWithWhereWithoutJobsInput {
  data: ServiceRequestUpdateManyMutationInput!
  where: ServiceRequestScalarWhereInput!
}

input ServiceRequestUpdateManyWithWhereWithoutPersonInput {
  data: ServiceRequestUpdateManyMutationInput!
  where: ServiceRequestScalarWhereInput!
}

input ServiceRequestUpdateManyWithWhereWithoutVehicleInput {
  data: ServiceRequestUpdateManyMutationInput!
  where: ServiceRequestScalarWhereInput!
}

input ServiceRequestUpdateManyWithWhereWithoutWorkshopInput {
  data: ServiceRequestUpdateManyMutationInput!
  where: ServiceRequestScalarWhereInput!
}

input ServiceRequestUpdateManyWithoutJobsNestedInput {
  connect: [ServiceRequestWhereUniqueInput!]
  connectOrCreate: [ServiceRequestCreateOrConnectWithoutJobsInput!]
  create: [ServiceRequestCreateWithoutJobsInput!]
  delete: [ServiceRequestWhereUniqueInput!]
  deleteMany: [ServiceRequestScalarWhereInput!]
  disconnect: [ServiceRequestWhereUniqueInput!]
  set: [ServiceRequestWhereUniqueInput!]
  update: [ServiceRequestUpdateWithWhereUniqueWithoutJobsInput!]
  updateMany: [ServiceRequestUpdateManyWithWhereWithoutJobsInput!]
  upsert: [ServiceRequestUpsertWithWhereUniqueWithoutJobsInput!]
}

input ServiceRequestUpdateManyWithoutPersonNestedInput {
  connect: [ServiceRequestWhereUniqueInput!]
  connectOrCreate: [ServiceRequestCreateOrConnectWithoutPersonInput!]
  create: [ServiceRequestCreateWithoutPersonInput!]
  createMany: ServiceRequestCreateManyPersonInputEnvelope
  delete: [ServiceRequestWhereUniqueInput!]
  deleteMany: [ServiceRequestScalarWhereInput!]
  disconnect: [ServiceRequestWhereUniqueInput!]
  set: [ServiceRequestWhereUniqueInput!]
  update: [ServiceRequestUpdateWithWhereUniqueWithoutPersonInput!]
  updateMany: [ServiceRequestUpdateManyWithWhereWithoutPersonInput!]
  upsert: [ServiceRequestUpsertWithWhereUniqueWithoutPersonInput!]
}

input ServiceRequestUpdateManyWithoutVehicleNestedInput {
  connect: [ServiceRequestWhereUniqueInput!]
  connectOrCreate: [ServiceRequestCreateOrConnectWithoutVehicleInput!]
  create: [ServiceRequestCreateWithoutVehicleInput!]
  createMany: ServiceRequestCreateManyVehicleInputEnvelope
  delete: [ServiceRequestWhereUniqueInput!]
  deleteMany: [ServiceRequestScalarWhereInput!]
  disconnect: [ServiceRequestWhereUniqueInput!]
  set: [ServiceRequestWhereUniqueInput!]
  update: [ServiceRequestUpdateWithWhereUniqueWithoutVehicleInput!]
  updateMany: [ServiceRequestUpdateManyWithWhereWithoutVehicleInput!]
  upsert: [ServiceRequestUpsertWithWhereUniqueWithoutVehicleInput!]
}

input ServiceRequestUpdateManyWithoutWorkshopNestedInput {
  connect: [ServiceRequestWhereUniqueInput!]
  connectOrCreate: [ServiceRequestCreateOrConnectWithoutWorkshopInput!]
  create: [ServiceRequestCreateWithoutWorkshopInput!]
  createMany: ServiceRequestCreateManyWorkshopInputEnvelope
  delete: [ServiceRequestWhereUniqueInput!]
  deleteMany: [ServiceRequestScalarWhereInput!]
  disconnect: [ServiceRequestWhereUniqueInput!]
  set: [ServiceRequestWhereUniqueInput!]
  update: [ServiceRequestUpdateWithWhereUniqueWithoutWorkshopInput!]
  updateMany: [ServiceRequestUpdateManyWithWhereWithoutWorkshopInput!]
  upsert: [ServiceRequestUpsertWithWhereUniqueWithoutWorkshopInput!]
}

input ServiceRequestUpdateOneWithoutApprovedServiceNestedInput {
  connect: ServiceRequestWhereUniqueInput
  connectOrCreate: ServiceRequestCreateOrConnectWithoutApprovedServiceInput
  create: ServiceRequestCreateWithoutApprovedServiceInput
  delete: ServiceRequestWhereInput
  disconnect: ServiceRequestWhereInput
  update: ServiceRequestUpdateToOneWithWhereWithoutApprovedServiceInput
  upsert: ServiceRequestUpsertWithoutApprovedServiceInput
}

input ServiceRequestUpdateToOneWithWhereWithoutApprovedServiceInput {
  data: ServiceRequestUpdateWithoutApprovedServiceInput!
  where: ServiceRequestWhereInput
}

input ServiceRequestUpdateWithWhereUniqueWithoutJobsInput {
  data: ServiceRequestUpdateWithoutJobsInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestUpdateWithWhereUniqueWithoutPersonInput {
  data: ServiceRequestUpdateWithoutPersonInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestUpdateWithWhereUniqueWithoutVehicleInput {
  data: ServiceRequestUpdateWithoutVehicleInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestUpdateWithWhereUniqueWithoutWorkshopInput {
  data: ServiceRequestUpdateWithoutWorkshopInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestUpdateWithoutApprovedServiceInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutServiceRequestsNestedInput
  person: PersonUpdateOneRequiredWithoutServiceRequestsNestedInput
  requestedAt: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServiceRequestsStatusFieldUpdateOperationsInput
  vehicle: VehicleUpdateOneRequiredWithoutVehicleAssociatedServiceRequestsNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutServiceRequestsNestedInput
}

input ServiceRequestUpdateWithoutJobsInput {
  approvedService: ServiceUpdateOneWithoutServiceRequestNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  person: PersonUpdateOneRequiredWithoutServiceRequestsNestedInput
  requestedAt: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServiceRequestsStatusFieldUpdateOperationsInput
  vehicle: VehicleUpdateOneRequiredWithoutVehicleAssociatedServiceRequestsNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutServiceRequestsNestedInput
}

input ServiceRequestUpdateWithoutPersonInput {
  approvedService: ServiceUpdateOneWithoutServiceRequestNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutServiceRequestsNestedInput
  requestedAt: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServiceRequestsStatusFieldUpdateOperationsInput
  vehicle: VehicleUpdateOneRequiredWithoutVehicleAssociatedServiceRequestsNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutServiceRequestsNestedInput
}

input ServiceRequestUpdateWithoutVehicleInput {
  approvedService: ServiceUpdateOneWithoutServiceRequestNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutServiceRequestsNestedInput
  person: PersonUpdateOneRequiredWithoutServiceRequestsNestedInput
  requestedAt: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServiceRequestsStatusFieldUpdateOperationsInput
  workshop: WorkshopUpdateOneRequiredWithoutServiceRequestsNestedInput
}

input ServiceRequestUpdateWithoutWorkshopInput {
  approvedService: ServiceUpdateOneWithoutServiceRequestNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutServiceRequestsNestedInput
  person: PersonUpdateOneRequiredWithoutServiceRequestsNestedInput
  requestedAt: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServiceRequestsStatusFieldUpdateOperationsInput
  vehicle: VehicleUpdateOneRequiredWithoutVehicleAssociatedServiceRequestsNestedInput
}

input ServiceRequestUpsertWithWhereUniqueWithoutJobsInput {
  create: ServiceRequestCreateWithoutJobsInput!
  update: ServiceRequestUpdateWithoutJobsInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestUpsertWithWhereUniqueWithoutPersonInput {
  create: ServiceRequestCreateWithoutPersonInput!
  update: ServiceRequestUpdateWithoutPersonInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestUpsertWithWhereUniqueWithoutVehicleInput {
  create: ServiceRequestCreateWithoutVehicleInput!
  update: ServiceRequestUpdateWithoutVehicleInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestUpsertWithWhereUniqueWithoutWorkshopInput {
  create: ServiceRequestCreateWithoutWorkshopInput!
  update: ServiceRequestUpdateWithoutWorkshopInput!
  where: ServiceRequestWhereUniqueInput!
}

input ServiceRequestUpsertWithoutApprovedServiceInput {
  create: ServiceRequestCreateWithoutApprovedServiceInput!
  update: ServiceRequestUpdateWithoutApprovedServiceInput!
  where: ServiceRequestWhereInput
}

input ServiceRequestWhereInput {
  AND: [ServiceRequestWhereInput!]
  NOT: [ServiceRequestWhereInput!]
  OR: [ServiceRequestWhereInput!]
  approvedService: ServiceNullableRelationFilter
  approvedServiceId: BigIntNullableFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  jobs: JobListRelationFilter
  person: PersonRelationFilter
  personId: BigIntFilter
  requestedAt: DateTimeFilter
  serviceRequestId: BigIntFilter
  status: EnumServiceRequestsStatusNullableFilter
  vehicle: VehicleRelationFilter
  vehicleId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input ServiceRequestWhereUniqueInput {
  AND: [ServiceRequestWhereInput!]
  NOT: [ServiceRequestWhereInput!]
  OR: [ServiceRequestWhereInput!]
  approvedService: ServiceNullableRelationFilter
  approvedServiceId: String
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  jobs: JobListRelationFilter
  person: PersonRelationFilter
  personId: BigIntFilter
  requestedAt: DateTimeFilter
  serviceRequestId: BigInt
  status: EnumServiceRequestsStatusNullableFilter
  vehicle: VehicleRelationFilter
  vehicleId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

enum ServiceRequestsStatus {
  accepted
  pending
  rejected
}

input ServiceScalarWhereInput {
  AND: [ServiceScalarWhereInput!]
  NOT: [ServiceScalarWhereInput!]
  OR: [ServiceScalarWhereInput!]
  customerId: BigIntFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  employeeId: BigIntFilter
  payedOff: BoolFilter
  paymentAmount: DecimalFilter
  serviceEndDate: DateTimeNullableFilter
  serviceId: BigIntFilter
  serviceRequestId: BigIntNullableFilter
  serviceStartDate: DateTimeFilter
  status: EnumServicesStatusNullableFilter
  updatedAt: DateTimeNullableFilter
  vehicleId: BigIntFilter
  workshopId: BigIntFilter
}

input ServiceUpdateManyMutationInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  payedOff: BoolFieldUpdateOperationsInput
  paymentAmount: DecimalFieldUpdateOperationsInput
  serviceEndDate: NullableDateTimeFieldUpdateOperationsInput
  serviceRequestId: NullableBigIntFieldUpdateOperationsInput
  serviceStartDate: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServicesStatusFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ServiceUpdateManyWithWhereWithoutCustomerInput {
  data: ServiceUpdateManyMutationInput!
  where: ServiceScalarWhereInput!
}

input ServiceUpdateManyWithWhereWithoutEmployeeInput {
  data: ServiceUpdateManyMutationInput!
  where: ServiceScalarWhereInput!
}

input ServiceUpdateManyWithWhereWithoutVehicleInput {
  data: ServiceUpdateManyMutationInput!
  where: ServiceScalarWhereInput!
}

input ServiceUpdateManyWithWhereWithoutWorkshopInput {
  data: ServiceUpdateManyMutationInput!
  where: ServiceScalarWhereInput!
}

input ServiceUpdateManyWithoutCustomerNestedInput {
  connect: [ServiceWhereUniqueInput!]
  connectOrCreate: [ServiceCreateOrConnectWithoutCustomerInput!]
  create: [ServiceCreateWithoutCustomerInput!]
  createMany: ServiceCreateManyCustomerInputEnvelope
  delete: [ServiceWhereUniqueInput!]
  deleteMany: [ServiceScalarWhereInput!]
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  update: [ServiceUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [ServiceUpdateManyWithWhereWithoutCustomerInput!]
  upsert: [ServiceUpsertWithWhereUniqueWithoutCustomerInput!]
}

input ServiceUpdateManyWithoutEmployeeNestedInput {
  connect: [ServiceWhereUniqueInput!]
  connectOrCreate: [ServiceCreateOrConnectWithoutEmployeeInput!]
  create: [ServiceCreateWithoutEmployeeInput!]
  createMany: ServiceCreateManyEmployeeInputEnvelope
  delete: [ServiceWhereUniqueInput!]
  deleteMany: [ServiceScalarWhereInput!]
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  update: [ServiceUpdateWithWhereUniqueWithoutEmployeeInput!]
  updateMany: [ServiceUpdateManyWithWhereWithoutEmployeeInput!]
  upsert: [ServiceUpsertWithWhereUniqueWithoutEmployeeInput!]
}

input ServiceUpdateManyWithoutVehicleNestedInput {
  connect: [ServiceWhereUniqueInput!]
  connectOrCreate: [ServiceCreateOrConnectWithoutVehicleInput!]
  create: [ServiceCreateWithoutVehicleInput!]
  createMany: ServiceCreateManyVehicleInputEnvelope
  delete: [ServiceWhereUniqueInput!]
  deleteMany: [ServiceScalarWhereInput!]
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  update: [ServiceUpdateWithWhereUniqueWithoutVehicleInput!]
  updateMany: [ServiceUpdateManyWithWhereWithoutVehicleInput!]
  upsert: [ServiceUpsertWithWhereUniqueWithoutVehicleInput!]
}

input ServiceUpdateManyWithoutWorkshopNestedInput {
  connect: [ServiceWhereUniqueInput!]
  connectOrCreate: [ServiceCreateOrConnectWithoutWorkshopInput!]
  create: [ServiceCreateWithoutWorkshopInput!]
  createMany: ServiceCreateManyWorkshopInputEnvelope
  delete: [ServiceWhereUniqueInput!]
  deleteMany: [ServiceScalarWhereInput!]
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  update: [ServiceUpdateWithWhereUniqueWithoutWorkshopInput!]
  updateMany: [ServiceUpdateManyWithWhereWithoutWorkshopInput!]
  upsert: [ServiceUpsertWithWhereUniqueWithoutWorkshopInput!]
}

input ServiceUpdateOneRequiredWithoutTasksNestedInput {
  connect: ServiceWhereUniqueInput
  connectOrCreate: ServiceCreateOrConnectWithoutTasksInput
  create: ServiceCreateWithoutTasksInput
  update: ServiceUpdateToOneWithWhereWithoutTasksInput
  upsert: ServiceUpsertWithoutTasksInput
}

input ServiceUpdateOneWithoutServiceRequestNestedInput {
  connect: ServiceWhereUniqueInput
  connectOrCreate: ServiceCreateOrConnectWithoutServiceRequestInput
  create: ServiceCreateWithoutServiceRequestInput
  delete: ServiceWhereInput
  disconnect: ServiceWhereInput
  update: ServiceUpdateToOneWithWhereWithoutServiceRequestInput
  upsert: ServiceUpsertWithoutServiceRequestInput
}

input ServiceUpdateToOneWithWhereWithoutServiceRequestInput {
  data: ServiceUpdateWithoutServiceRequestInput!
  where: ServiceWhereInput
}

input ServiceUpdateToOneWithWhereWithoutTasksInput {
  data: ServiceUpdateWithoutTasksInput!
  where: ServiceWhereInput
}

input ServiceUpdateWithWhereUniqueWithoutCustomerInput {
  data: ServiceUpdateWithoutCustomerInput!
  where: ServiceWhereUniqueInput!
}

input ServiceUpdateWithWhereUniqueWithoutEmployeeInput {
  data: ServiceUpdateWithoutEmployeeInput!
  where: ServiceWhereUniqueInput!
}

input ServiceUpdateWithWhereUniqueWithoutVehicleInput {
  data: ServiceUpdateWithoutVehicleInput!
  where: ServiceWhereUniqueInput!
}

input ServiceUpdateWithWhereUniqueWithoutWorkshopInput {
  data: ServiceUpdateWithoutWorkshopInput!
  where: ServiceWhereUniqueInput!
}

input ServiceUpdateWithoutCustomerInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  employee: EmployeeUpdateOneRequiredWithoutServicesNestedInput
  payedOff: BoolFieldUpdateOperationsInput
  paymentAmount: DecimalFieldUpdateOperationsInput
  serviceEndDate: NullableDateTimeFieldUpdateOperationsInput
  serviceRequest: ServiceRequestUpdateOneWithoutApprovedServiceNestedInput
  serviceRequestId: NullableBigIntFieldUpdateOperationsInput
  serviceStartDate: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServicesStatusFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutServiceNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  vehicle: VehicleUpdateOneRequiredWithoutServicesNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutServicesNestedInput
}

input ServiceUpdateWithoutEmployeeInput {
  customer: CustomerUpdateOneRequiredWithoutServicesNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  payedOff: BoolFieldUpdateOperationsInput
  paymentAmount: DecimalFieldUpdateOperationsInput
  serviceEndDate: NullableDateTimeFieldUpdateOperationsInput
  serviceRequest: ServiceRequestUpdateOneWithoutApprovedServiceNestedInput
  serviceRequestId: NullableBigIntFieldUpdateOperationsInput
  serviceStartDate: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServicesStatusFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutServiceNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  vehicle: VehicleUpdateOneRequiredWithoutServicesNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutServicesNestedInput
}

input ServiceUpdateWithoutServiceRequestInput {
  customer: CustomerUpdateOneRequiredWithoutServicesNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  employee: EmployeeUpdateOneRequiredWithoutServicesNestedInput
  payedOff: BoolFieldUpdateOperationsInput
  paymentAmount: DecimalFieldUpdateOperationsInput
  serviceEndDate: NullableDateTimeFieldUpdateOperationsInput
  serviceRequestId: NullableBigIntFieldUpdateOperationsInput
  serviceStartDate: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServicesStatusFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutServiceNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  vehicle: VehicleUpdateOneRequiredWithoutServicesNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutServicesNestedInput
}

input ServiceUpdateWithoutTasksInput {
  customer: CustomerUpdateOneRequiredWithoutServicesNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  employee: EmployeeUpdateOneRequiredWithoutServicesNestedInput
  payedOff: BoolFieldUpdateOperationsInput
  paymentAmount: DecimalFieldUpdateOperationsInput
  serviceEndDate: NullableDateTimeFieldUpdateOperationsInput
  serviceRequest: ServiceRequestUpdateOneWithoutApprovedServiceNestedInput
  serviceRequestId: NullableBigIntFieldUpdateOperationsInput
  serviceStartDate: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServicesStatusFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  vehicle: VehicleUpdateOneRequiredWithoutServicesNestedInput
  workshop: WorkshopUpdateOneRequiredWithoutServicesNestedInput
}

input ServiceUpdateWithoutVehicleInput {
  customer: CustomerUpdateOneRequiredWithoutServicesNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  employee: EmployeeUpdateOneRequiredWithoutServicesNestedInput
  payedOff: BoolFieldUpdateOperationsInput
  paymentAmount: DecimalFieldUpdateOperationsInput
  serviceEndDate: NullableDateTimeFieldUpdateOperationsInput
  serviceRequest: ServiceRequestUpdateOneWithoutApprovedServiceNestedInput
  serviceRequestId: NullableBigIntFieldUpdateOperationsInput
  serviceStartDate: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServicesStatusFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutServiceNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  workshop: WorkshopUpdateOneRequiredWithoutServicesNestedInput
}

input ServiceUpdateWithoutWorkshopInput {
  customer: CustomerUpdateOneRequiredWithoutServicesNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  employee: EmployeeUpdateOneRequiredWithoutServicesNestedInput
  payedOff: BoolFieldUpdateOperationsInput
  paymentAmount: DecimalFieldUpdateOperationsInput
  serviceEndDate: NullableDateTimeFieldUpdateOperationsInput
  serviceRequest: ServiceRequestUpdateOneWithoutApprovedServiceNestedInput
  serviceRequestId: NullableBigIntFieldUpdateOperationsInput
  serviceStartDate: DateTimeFieldUpdateOperationsInput
  status: NullableEnumServicesStatusFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutServiceNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  vehicle: VehicleUpdateOneRequiredWithoutServicesNestedInput
}

input ServiceUpsertWithWhereUniqueWithoutCustomerInput {
  create: ServiceCreateWithoutCustomerInput!
  update: ServiceUpdateWithoutCustomerInput!
  where: ServiceWhereUniqueInput!
}

input ServiceUpsertWithWhereUniqueWithoutEmployeeInput {
  create: ServiceCreateWithoutEmployeeInput!
  update: ServiceUpdateWithoutEmployeeInput!
  where: ServiceWhereUniqueInput!
}

input ServiceUpsertWithWhereUniqueWithoutVehicleInput {
  create: ServiceCreateWithoutVehicleInput!
  update: ServiceUpdateWithoutVehicleInput!
  where: ServiceWhereUniqueInput!
}

input ServiceUpsertWithWhereUniqueWithoutWorkshopInput {
  create: ServiceCreateWithoutWorkshopInput!
  update: ServiceUpdateWithoutWorkshopInput!
  where: ServiceWhereUniqueInput!
}

input ServiceUpsertWithoutServiceRequestInput {
  create: ServiceCreateWithoutServiceRequestInput!
  update: ServiceUpdateWithoutServiceRequestInput!
  where: ServiceWhereInput
}

input ServiceUpsertWithoutTasksInput {
  create: ServiceCreateWithoutTasksInput!
  update: ServiceUpdateWithoutTasksInput!
  where: ServiceWhereInput
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  customer: CustomerRelationFilter
  customerId: BigIntFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  employee: EmployeeRelationFilter
  employeeId: BigIntFilter
  payedOff: BoolFilter
  paymentAmount: DecimalFilter
  serviceEndDate: DateTimeNullableFilter
  serviceId: BigIntFilter
  serviceRequest: ServiceRequestNullableRelationFilter
  serviceRequestId: BigIntNullableFilter
  serviceStartDate: DateTimeFilter
  status: EnumServicesStatusNullableFilter
  tasks: TaskListRelationFilter
  updatedAt: DateTimeNullableFilter
  vehicle: VehicleRelationFilter
  vehicleId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input ServiceWhereUniqueInput {
  AND: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  customer: CustomerRelationFilter
  customerId: BigIntFilter
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  employee: EmployeeRelationFilter
  employeeId: BigIntFilter
  payedOff: BoolFilter
  paymentAmount: DecimalFilter
  serviceEndDate: DateTimeNullableFilter
  serviceId: BigInt
  serviceRequest: ServiceRequestNullableRelationFilter
  serviceRequestId: BigInt
  serviceStartDate: DateTimeFilter
  status: EnumServicesStatusNullableFilter
  tasks: TaskListRelationFilter
  updatedAt: DateTimeNullableFilter
  vehicle: VehicleRelationFilter
  vehicleId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

enum ServicesStatus {
  cancelled
  completed
  pending
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  _count: TaskCount!
  customName: String
  description: String!
  executionTime: Float!
  jobId: BigInt
  partsCost: Decimal!
  service: Service!
  serviceId: BigInt!
  status: TasksStatus
  taskEmployees: [EmployeeTask!]
  taskId: BigInt!
}

type TaskCount {
  taskEmployees: Int!
}

input TaskCreateManyServiceInput {
  customName: String
  description: String!
  executionTime: Float!
  jobId: BigInt
  partsCost: Decimal
  status: TasksStatus
}

input TaskCreateManyServiceInputEnvelope {
  data: [TaskCreateManyServiceInput!]!
  skipDuplicates: Boolean
}

input TaskCreateNestedManyWithoutServiceInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutServiceInput!]
  create: [TaskCreateWithoutServiceInput!]
  createMany: TaskCreateManyServiceInputEnvelope
}

input TaskCreateNestedOneWithoutTaskEmployeesInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutTaskEmployeesInput
  create: TaskCreateWithoutTaskEmployeesInput
}

input TaskCreateOrConnectWithoutServiceInput {
  create: TaskCreateWithoutServiceInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutTaskEmployeesInput {
  create: TaskCreateWithoutTaskEmployeesInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutServiceInput {
  customName: String
  description: String!
  executionTime: Float!
  jobId: BigInt
  partsCost: Decimal
  status: TasksStatus
  taskEmployees: EmployeeTaskCreateNestedManyWithoutTaskInput
}

input TaskCreateWithoutTaskEmployeesInput {
  customName: String
  description: String!
  executionTime: Float!
  jobId: BigInt
  partsCost: Decimal
  service: ServiceCreateNestedOneWithoutTasksInput!
  status: TasksStatus
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

input TaskRelationFilter {
  is: TaskWhereInput
  isNot: TaskWhereInput
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  customName: StringNullableFilter
  description: StringFilter
  executionTime: FloatFilter
  jobId: BigIntNullableFilter
  partsCost: DecimalFilter
  serviceId: BigIntFilter
  status: EnumTasksStatusNullableFilter
  taskId: BigIntFilter
}

input TaskUpdateManyMutationInput {
  customName: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  executionTime: FloatFieldUpdateOperationsInput
  jobId: NullableBigIntFieldUpdateOperationsInput
  partsCost: DecimalFieldUpdateOperationsInput
  status: NullableEnumTasksStatusFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutServiceInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutServiceNestedInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutServiceInput!]
  create: [TaskCreateWithoutServiceInput!]
  createMany: TaskCreateManyServiceInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutServiceInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutServiceInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutServiceInput!]
}

input TaskUpdateOneRequiredWithoutTaskEmployeesNestedInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutTaskEmployeesInput
  create: TaskCreateWithoutTaskEmployeesInput
  update: TaskUpdateToOneWithWhereWithoutTaskEmployeesInput
  upsert: TaskUpsertWithoutTaskEmployeesInput
}

input TaskUpdateToOneWithWhereWithoutTaskEmployeesInput {
  data: TaskUpdateWithoutTaskEmployeesInput!
  where: TaskWhereInput
}

input TaskUpdateWithWhereUniqueWithoutServiceInput {
  data: TaskUpdateWithoutServiceInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutServiceInput {
  customName: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  executionTime: FloatFieldUpdateOperationsInput
  jobId: NullableBigIntFieldUpdateOperationsInput
  partsCost: DecimalFieldUpdateOperationsInput
  status: NullableEnumTasksStatusFieldUpdateOperationsInput
  taskEmployees: EmployeeTaskUpdateManyWithoutTaskNestedInput
}

input TaskUpdateWithoutTaskEmployeesInput {
  customName: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  executionTime: FloatFieldUpdateOperationsInput
  jobId: NullableBigIntFieldUpdateOperationsInput
  partsCost: DecimalFieldUpdateOperationsInput
  service: ServiceUpdateOneRequiredWithoutTasksNestedInput
  status: NullableEnumTasksStatusFieldUpdateOperationsInput
}

input TaskUpsertWithWhereUniqueWithoutServiceInput {
  create: TaskCreateWithoutServiceInput!
  update: TaskUpdateWithoutServiceInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithoutTaskEmployeesInput {
  create: TaskCreateWithoutTaskEmployeesInput!
  update: TaskUpdateWithoutTaskEmployeesInput!
  where: TaskWhereInput
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  customName: StringNullableFilter
  description: StringFilter
  executionTime: FloatFilter
  jobId: BigIntNullableFilter
  partsCost: DecimalFilter
  service: ServiceRelationFilter
  serviceId: BigIntFilter
  status: EnumTasksStatusNullableFilter
  taskEmployees: EmployeeTaskListRelationFilter
  taskId: BigIntFilter
}

input TaskWhereUniqueInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  customName: StringNullableFilter
  description: StringFilter
  executionTime: FloatFilter
  jobId: BigIntNullableFilter
  partsCost: DecimalFilter
  service: ServiceRelationFilter
  serviceId: BigIntFilter
  status: EnumTasksStatusNullableFilter
  taskEmployees: EmployeeTaskListRelationFilter
  taskId: BigInt
}

enum TasksStatus {
  cancelled
  completed
  pending
}

type User {
  _count: UserCount!
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isVerified: Boolean
  person: Person
  personId: BigInt
  reviewResponses: [ReviewResponse!]
  reviews: [Review!]
  status: UsersStatus
  updatedAt: DateTime
  userId: BigInt!
  userReports: [UserReport!]
  username: String!
}

type UserAvgAggregate {
  personId: Float
  userId: Float
}

type UserCount {
  reviewResponses: Int!
  reviews: Int!
  userReports: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  email: Int!
  isVerified: Int!
  personId: Int!
  status: Int!
  updatedAt: Int!
  userId: Int!
  username: Int!
}

input UserCreateNestedOneWithoutPersonInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPersonInput
  create: UserCreateWithoutPersonInput
}

input UserCreateNestedOneWithoutReviewResponsesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewResponsesInput
  create: UserCreateWithoutReviewResponsesInput
}

input UserCreateNestedOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  create: UserCreateWithoutReviewsInput
}

input UserCreateOrConnectWithoutPersonInput {
  create: UserCreateWithoutPersonInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReviewResponsesInput {
  create: UserCreateWithoutReviewResponsesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPersonInput {
  createdAt: DateTime
  email: String
  isVerified: Boolean
  password: String!
  reviewResponses: ReviewResponseCreateNestedManyWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  status: UsersStatus
  updatedAt: DateTime
  userReports: UserReportCreateNestedManyWithoutUserInput
  username: String!
}

input UserCreateWithoutReviewResponsesInput {
  createdAt: DateTime
  email: String
  isVerified: Boolean
  password: String!
  person: PersonCreateNestedOneWithoutUserInput
  reviews: ReviewCreateNestedManyWithoutUserInput
  status: UsersStatus
  updatedAt: DateTime
  userReports: UserReportCreateNestedManyWithoutUserInput
  username: String!
}

input UserCreateWithoutReviewsInput {
  createdAt: DateTime
  email: String
  isVerified: Boolean
  password: String!
  person: PersonCreateNestedOneWithoutUserInput
  reviewResponses: ReviewResponseCreateNestedManyWithoutUserInput
  status: UsersStatus
  updatedAt: DateTime
  userReports: UserReportCreateNestedManyWithoutUserInput
  username: String!
}

type UserMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isVerified: Boolean
  personId: BigInt
  status: UsersStatus
  updatedAt: DateTime
  userId: BigInt
  username: String
}

type UserMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isVerified: Boolean
  personId: BigInt
  status: UsersStatus
  updatedAt: DateTime
  userId: BigInt
  username: String
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

type UserReport {
  createdAt: DateTime!
  reportId: BigInt!
  reportText: String!
  reportedId: String!
  reportedType: UserReportsReportedType!
  status: UserReportsStatus!
  updatedAt: DateTime
  user: User!
  userId: BigInt!
}

input UserReportCreateManyUserInput {
  createdAt: DateTime
  reportText: String!
  reportedId: String!
  reportedType: UserReportsReportedType!
  status: UserReportsStatus
  updatedAt: DateTime
}

input UserReportCreateManyUserInputEnvelope {
  data: [UserReportCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserReportCreateNestedManyWithoutUserInput {
  connect: [UserReportWhereUniqueInput!]
  connectOrCreate: [UserReportCreateOrConnectWithoutUserInput!]
  create: [UserReportCreateWithoutUserInput!]
  createMany: UserReportCreateManyUserInputEnvelope
}

input UserReportCreateOrConnectWithoutUserInput {
  create: UserReportCreateWithoutUserInput!
  where: UserReportWhereUniqueInput!
}

input UserReportCreateWithoutUserInput {
  createdAt: DateTime
  reportText: String!
  reportedId: String!
  reportedType: UserReportsReportedType!
  status: UserReportsStatus
  updatedAt: DateTime
}

input UserReportListRelationFilter {
  every: UserReportWhereInput
  none: UserReportWhereInput
  some: UserReportWhereInput
}

input UserReportScalarWhereInput {
  AND: [UserReportScalarWhereInput!]
  NOT: [UserReportScalarWhereInput!]
  OR: [UserReportScalarWhereInput!]
  createdAt: DateTimeFilter
  reportId: BigIntFilter
  reportText: StringFilter
  reportedId: BigIntFilter
  reportedType: EnumUserReportsReportedTypeFilter
  status: EnumUserReportsStatusFilter
  updatedAt: DateTimeNullableFilter
  userId: BigIntFilter
}

input UserReportUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reportText: StringFieldUpdateOperationsInput
  reportedId: BigIntFieldUpdateOperationsInput
  reportedType: EnumUserReportsReportedTypeFieldUpdateOperationsInput
  status: EnumUserReportsStatusFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserReportUpdateManyWithWhereWithoutUserInput {
  data: UserReportUpdateManyMutationInput!
  where: UserReportScalarWhereInput!
}

input UserReportUpdateManyWithoutUserNestedInput {
  connect: [UserReportWhereUniqueInput!]
  connectOrCreate: [UserReportCreateOrConnectWithoutUserInput!]
  create: [UserReportCreateWithoutUserInput!]
  createMany: UserReportCreateManyUserInputEnvelope
  delete: [UserReportWhereUniqueInput!]
  deleteMany: [UserReportScalarWhereInput!]
  disconnect: [UserReportWhereUniqueInput!]
  set: [UserReportWhereUniqueInput!]
  update: [UserReportUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserReportUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserReportUpsertWithWhereUniqueWithoutUserInput!]
}

input UserReportUpdateWithWhereUniqueWithoutUserInput {
  data: UserReportUpdateWithoutUserInput!
  where: UserReportWhereUniqueInput!
}

input UserReportUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reportText: StringFieldUpdateOperationsInput
  reportedId: BigIntFieldUpdateOperationsInput
  reportedType: EnumUserReportsReportedTypeFieldUpdateOperationsInput
  status: EnumUserReportsStatusFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserReportUpsertWithWhereUniqueWithoutUserInput {
  create: UserReportCreateWithoutUserInput!
  update: UserReportUpdateWithoutUserInput!
  where: UserReportWhereUniqueInput!
}

input UserReportWhereInput {
  AND: [UserReportWhereInput!]
  NOT: [UserReportWhereInput!]
  OR: [UserReportWhereInput!]
  createdAt: DateTimeFilter
  reportId: BigIntFilter
  reportText: StringFilter
  reportedId: BigIntFilter
  reportedType: EnumUserReportsReportedTypeFilter
  status: EnumUserReportsStatusFilter
  updatedAt: DateTimeNullableFilter
  user: UserRelationFilter
  userId: BigIntFilter
}

input UserReportWhereUniqueInput {
  AND: [UserReportWhereInput!]
  NOT: [UserReportWhereInput!]
  OR: [UserReportWhereInput!]
  createdAt: DateTimeFilter
  reportId: BigInt
  reportText: StringFilter
  reportedId: BigIntFilter
  reportedType: EnumUserReportsReportedTypeFilter
  status: EnumUserReportsStatusFilter
  updatedAt: DateTimeNullableFilter
  user: UserRelationFilter
  userId: BigIntFilter
}

enum UserReportsReportedType {
  review
  review_response
  user
  workshop
}

enum UserReportsStatus {
  closed
  considered
  pending
}

type UserSumAggregate {
  personId: BigInt
  userId: BigInt
}

input UserUpdateOneRequiredWithoutReviewResponsesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewResponsesInput
  create: UserCreateWithoutReviewResponsesInput
  update: UserUpdateToOneWithWhereWithoutReviewResponsesInput
  upsert: UserUpsertWithoutReviewResponsesInput
}

input UserUpdateOneRequiredWithoutReviewsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  create: UserCreateWithoutReviewsInput
  update: UserUpdateToOneWithWhereWithoutReviewsInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateOneWithoutPersonNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPersonInput
  create: UserCreateWithoutPersonInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutPersonInput
  upsert: UserUpsertWithoutPersonInput
}

input UserUpdateToOneWithWhereWithoutPersonInput {
  data: UserUpdateWithoutPersonInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutReviewResponsesInput {
  data: UserUpdateWithoutReviewResponsesInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutReviewsInput {
  data: UserUpdateWithoutReviewsInput!
  where: UserWhereInput
}

input UserUpdateWithoutPersonInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  reviewResponses: ReviewResponseUpdateManyWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  status: NullableEnumUsersStatusFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  userReports: UserReportUpdateManyWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutReviewResponsesInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  person: PersonUpdateOneWithoutUserNestedInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  status: NullableEnumUsersStatusFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  userReports: UserReportUpdateManyWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpdateWithoutReviewsInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  person: PersonUpdateOneWithoutUserNestedInput
  reviewResponses: ReviewResponseUpdateManyWithoutUserNestedInput
  status: NullableEnumUsersStatusFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  userReports: UserReportUpdateManyWithoutUserNestedInput
  username: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutPersonInput {
  create: UserCreateWithoutPersonInput!
  update: UserUpdateWithoutPersonInput!
  where: UserWhereInput
}

input UserUpsertWithoutReviewResponsesInput {
  create: UserCreateWithoutReviewResponsesInput!
  update: UserUpdateWithoutReviewResponsesInput!
  where: UserWhereInput
}

input UserUpsertWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput!
  update: UserUpdateWithoutReviewsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  email: StringNullableFilter
  isVerified: BoolNullableFilter
  password: StringFilter
  person: PersonNullableRelationFilter
  personId: BigIntNullableFilter
  reviewResponses: ReviewResponseListRelationFilter
  reviews: ReviewListRelationFilter
  status: EnumUsersStatusNullableFilter
  updatedAt: DateTimeNullableFilter
  userId: BigIntFilter
  userReports: UserReportListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  email: StringNullableFilter
  isVerified: BoolNullableFilter
  password: StringFilter
  person: PersonNullableRelationFilter
  personId: BigInt
  reviewResponses: ReviewResponseListRelationFilter
  reviews: ReviewListRelationFilter
  status: EnumUsersStatusNullableFilter
  updatedAt: DateTimeNullableFilter
  userId: BigInt
  userReports: UserReportListRelationFilter
  username: String
}

enum UsersStatus {
  active
  suspended
}

type Vehicle {
  _count: VehicleCount!
  deletedAt: DateTime
  modelId: BigInt!
  person: Person!
  personId: BigInt!
  services: [Service!]
  vehicleAssociatedServiceRequests: [ServiceRequest!]
  vehicleId: BigInt!
  vehicleModel: VehicleModel!
  vehiclesDetails: VehicleDetails
}

type VehicleAvgAggregate {
  modelId: Float
  personId: Float
  vehicleId: Float
}

type VehicleBrand {
  _count: VehicleBrandCount!
  brandName: String!
  createdAt: DateTime
  updatedAt: DateTime
  vehicleModels: [VehicleModel!]
}

type VehicleBrandCount {
  vehicleModels: Int!
}

input VehicleBrandCreateNestedOneWithoutVehicleModelsInput {
  connect: VehicleBrandWhereUniqueInput
  connectOrCreate: VehicleBrandCreateOrConnectWithoutVehicleModelsInput
  create: VehicleBrandCreateWithoutVehicleModelsInput
}

input VehicleBrandCreateOrConnectWithoutVehicleModelsInput {
  create: VehicleBrandCreateWithoutVehicleModelsInput!
  where: VehicleBrandWhereUniqueInput!
}

input VehicleBrandCreateWithoutVehicleModelsInput {
  brandName: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input VehicleBrandRelationFilter {
  is: VehicleBrandWhereInput
  isNot: VehicleBrandWhereInput
}

input VehicleBrandUpdateOneRequiredWithoutVehicleModelsNestedInput {
  connect: VehicleBrandWhereUniqueInput
  connectOrCreate: VehicleBrandCreateOrConnectWithoutVehicleModelsInput
  create: VehicleBrandCreateWithoutVehicleModelsInput
  update: VehicleBrandUpdateToOneWithWhereWithoutVehicleModelsInput
  upsert: VehicleBrandUpsertWithoutVehicleModelsInput
}

input VehicleBrandUpdateToOneWithWhereWithoutVehicleModelsInput {
  data: VehicleBrandUpdateWithoutVehicleModelsInput!
  where: VehicleBrandWhereInput
}

input VehicleBrandUpdateWithoutVehicleModelsInput {
  brandName: StringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VehicleBrandUpsertWithoutVehicleModelsInput {
  create: VehicleBrandCreateWithoutVehicleModelsInput!
  update: VehicleBrandUpdateWithoutVehicleModelsInput!
  where: VehicleBrandWhereInput
}

input VehicleBrandWhereInput {
  AND: [VehicleBrandWhereInput!]
  NOT: [VehicleBrandWhereInput!]
  OR: [VehicleBrandWhereInput!]
  brandName: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  vehicleModels: VehicleModelListRelationFilter
}

input VehicleBrandWhereUniqueInput {
  AND: [VehicleBrandWhereInput!]
  NOT: [VehicleBrandWhereInput!]
  OR: [VehicleBrandWhereInput!]
  brandName: String
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  vehicleModels: VehicleModelListRelationFilter
}

type VehicleCount {
  services: Int!
  vehicleAssociatedServiceRequests: Int!
}

type VehicleCountAggregate {
  _all: Int!
  deletedAt: Int!
  modelId: Int!
  personId: Int!
  vehicleId: Int!
}

input VehicleCreateManyPersonInput {
  modelId: BigInt!
}

input VehicleCreateManyPersonInputEnvelope {
  data: [VehicleCreateManyPersonInput!]!
  skipDuplicates: Boolean
}

input VehicleCreateNestedManyWithoutPersonInput {
  connect: [VehicleWhereUniqueInput!]
  connectOrCreate: [VehicleCreateOrConnectWithoutPersonInput!]
  create: [VehicleCreateWithoutPersonInput!]
  createMany: VehicleCreateManyPersonInputEnvelope
}

input VehicleCreateNestedOneWithoutServicesInput {
  connect: VehicleWhereUniqueInput
  connectOrCreate: VehicleCreateOrConnectWithoutServicesInput
  create: VehicleCreateWithoutServicesInput
}

input VehicleCreateNestedOneWithoutVehicleAssociatedServiceRequestsInput {
  connect: VehicleWhereUniqueInput
  connectOrCreate: VehicleCreateOrConnectWithoutVehicleAssociatedServiceRequestsInput
  create: VehicleCreateWithoutVehicleAssociatedServiceRequestsInput
}

input VehicleCreateOrConnectWithoutPersonInput {
  create: VehicleCreateWithoutPersonInput!
  where: VehicleWhereUniqueInput!
}

input VehicleCreateOrConnectWithoutServicesInput {
  create: VehicleCreateWithoutServicesInput!
  where: VehicleWhereUniqueInput!
}

input VehicleCreateOrConnectWithoutVehicleAssociatedServiceRequestsInput {
  create: VehicleCreateWithoutVehicleAssociatedServiceRequestsInput!
  where: VehicleWhereUniqueInput!
}

input VehicleCreateWithoutPersonInput {
  services: ServiceCreateNestedManyWithoutVehicleInput
  vehicleAssociatedServiceRequests: ServiceRequestCreateNestedManyWithoutVehicleInput
  vehicleModel: VehicleModelCreateNestedOneWithoutVehiclesInput!
  vehiclesDetails: VehicleDetailsCreateNestedOneWithoutVehicleInput
}

input VehicleCreateWithoutServicesInput {
  person: PersonCreateNestedOneWithoutVehiclesInput!
  vehicleAssociatedServiceRequests: ServiceRequestCreateNestedManyWithoutVehicleInput
  vehicleModel: VehicleModelCreateNestedOneWithoutVehiclesInput!
  vehiclesDetails: VehicleDetailsCreateNestedOneWithoutVehicleInput
}

input VehicleCreateWithoutVehicleAssociatedServiceRequestsInput {
  person: PersonCreateNestedOneWithoutVehiclesInput!
  services: ServiceCreateNestedManyWithoutVehicleInput
  vehicleModel: VehicleModelCreateNestedOneWithoutVehiclesInput!
  vehiclesDetails: VehicleDetailsCreateNestedOneWithoutVehicleInput
}

type VehicleDetails {
  VIN: String
  bodyColor: String
  deletedAt: DateTime
  engineCapacity: String
  engineNo: String
  fuelType: String
  licensePlate: String
  vehicle: Vehicle
  vehicleDetailsId: BigInt!
  vehicleId: BigInt
  yearOfProduction: Int
}

input VehicleDetailsCreateNestedOneWithoutVehicleInput {
  connect: VehicleDetailsWhereUniqueInput
  connectOrCreate: VehicleDetailsCreateOrConnectWithoutVehicleInput
  create: VehicleDetailsCreateWithoutVehicleInput
}

input VehicleDetailsCreateOrConnectWithoutVehicleInput {
  create: VehicleDetailsCreateWithoutVehicleInput!
  where: VehicleDetailsWhereUniqueInput!
}

input VehicleDetailsCreateWithoutVehicleInput {
  VIN: String
  bodyColor: String
  engineCapacity: String
  engineNo: String
  fuelType: String
  licensePlate: String
  vehicleDetailsId: BigInt
  yearOfProduction: Int
}

input VehicleDetailsNullableRelationFilter {
  is: VehicleDetailsWhereInput
  isNot: VehicleDetailsWhereInput
}

input VehicleDetailsUpdateOneWithoutVehicleNestedInput {
  connect: VehicleDetailsWhereUniqueInput
  connectOrCreate: VehicleDetailsCreateOrConnectWithoutVehicleInput
  create: VehicleDetailsCreateWithoutVehicleInput
  delete: VehicleDetailsWhereInput
  disconnect: VehicleDetailsWhereInput
  update: VehicleDetailsUpdateToOneWithWhereWithoutVehicleInput
  upsert: VehicleDetailsUpsertWithoutVehicleInput
}

input VehicleDetailsUpdateToOneWithWhereWithoutVehicleInput {
  data: VehicleDetailsUpdateWithoutVehicleInput!
  where: VehicleDetailsWhereInput
}

input VehicleDetailsUpdateWithoutVehicleInput {
  VIN: NullableStringFieldUpdateOperationsInput
  bodyColor: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  engineCapacity: NullableStringFieldUpdateOperationsInput
  engineNo: NullableStringFieldUpdateOperationsInput
  fuelType: NullableStringFieldUpdateOperationsInput
  licensePlate: NullableStringFieldUpdateOperationsInput
  vehicleDetailsId: BigIntFieldUpdateOperationsInput
  yearOfProduction: NullableIntFieldUpdateOperationsInput
}

input VehicleDetailsUpsertWithoutVehicleInput {
  create: VehicleDetailsCreateWithoutVehicleInput!
  update: VehicleDetailsUpdateWithoutVehicleInput!
  where: VehicleDetailsWhereInput
}

input VehicleDetailsWhereInput {
  AND: [VehicleDetailsWhereInput!]
  NOT: [VehicleDetailsWhereInput!]
  OR: [VehicleDetailsWhereInput!]
  VIN: StringNullableFilter
  bodyColor: StringNullableFilter
  deletedAt: DateTimeNullableFilter
  engineCapacity: StringNullableFilter
  engineNo: StringNullableFilter
  fuelType: StringNullableFilter
  licensePlate: StringNullableFilter
  vehicle: VehicleNullableRelationFilter
  vehicleDetailsId: BigIntFilter
  vehicleId: BigIntNullableFilter
  yearOfProduction: IntNullableFilter
}

input VehicleDetailsWhereUniqueInput {
  AND: [VehicleDetailsWhereInput!]
  NOT: [VehicleDetailsWhereInput!]
  OR: [VehicleDetailsWhereInput!]
  VIN: StringNullableFilter
  bodyColor: StringNullableFilter
  deletedAt: DateTimeNullableFilter
  engineCapacity: StringNullableFilter
  engineNo: StringNullableFilter
  fuelType: StringNullableFilter
  licensePlate: StringNullableFilter
  vehicle: VehicleNullableRelationFilter
  vehicleDetailsId: BigInt
  vehicleId: BigInt
  yearOfProduction: IntNullableFilter
}

input VehicleListRelationFilter {
  every: VehicleWhereInput
  none: VehicleWhereInput
  some: VehicleWhereInput
}

type VehicleMaxAggregate {
  deletedAt: DateTime
  modelId: BigInt
  personId: BigInt
  vehicleId: BigInt
}

type VehicleMinAggregate {
  deletedAt: DateTime
  modelId: BigInt
  personId: BigInt
  vehicleId: BigInt
}

type VehicleModel {
  _count: VehicleModelCount!
  brandName: String!
  createdAt: DateTime
  modelId: BigInt!
  modelName: String!
  updatedAt: DateTime
  vehicles: [Vehicle!]
  vehiclesBrand: VehicleBrand!
}

type VehicleModelCount {
  vehicles: Int!
}

input VehicleModelCreateNestedOneWithoutVehiclesInput {
  connect: VehicleModelWhereUniqueInput
  connectOrCreate: VehicleModelCreateOrConnectWithoutVehiclesInput
  create: VehicleModelCreateWithoutVehiclesInput
}

input VehicleModelCreateOrConnectWithoutVehiclesInput {
  create: VehicleModelCreateWithoutVehiclesInput!
  where: VehicleModelWhereUniqueInput!
}

input VehicleModelCreateWithoutVehiclesInput {
  createdAt: DateTime
  modelName: String!
  updatedAt: DateTime
  vehiclesBrand: VehicleBrandCreateNestedOneWithoutVehicleModelsInput!
}

input VehicleModelListRelationFilter {
  every: VehicleModelWhereInput
  none: VehicleModelWhereInput
  some: VehicleModelWhereInput
}

input VehicleModelModelNameBrandNameCompoundUniqueInput {
  brandName: String!
  modelName: String!
}

input VehicleModelRelationFilter {
  is: VehicleModelWhereInput
  isNot: VehicleModelWhereInput
}

input VehicleModelUpdateOneRequiredWithoutVehiclesNestedInput {
  connect: VehicleModelWhereUniqueInput
  connectOrCreate: VehicleModelCreateOrConnectWithoutVehiclesInput
  create: VehicleModelCreateWithoutVehiclesInput
  update: VehicleModelUpdateToOneWithWhereWithoutVehiclesInput
  upsert: VehicleModelUpsertWithoutVehiclesInput
}

input VehicleModelUpdateToOneWithWhereWithoutVehiclesInput {
  data: VehicleModelUpdateWithoutVehiclesInput!
  where: VehicleModelWhereInput
}

input VehicleModelUpdateWithoutVehiclesInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  modelName: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  vehiclesBrand: VehicleBrandUpdateOneRequiredWithoutVehicleModelsNestedInput
}

input VehicleModelUpsertWithoutVehiclesInput {
  create: VehicleModelCreateWithoutVehiclesInput!
  update: VehicleModelUpdateWithoutVehiclesInput!
  where: VehicleModelWhereInput
}

input VehicleModelWhereInput {
  AND: [VehicleModelWhereInput!]
  NOT: [VehicleModelWhereInput!]
  OR: [VehicleModelWhereInput!]
  brandName: StringFilter
  createdAt: DateTimeNullableFilter
  modelId: BigIntFilter
  modelName: StringFilter
  updatedAt: DateTimeNullableFilter
  vehicles: VehicleListRelationFilter
  vehiclesBrand: VehicleBrandRelationFilter
}

input VehicleModelWhereUniqueInput {
  AND: [VehicleModelWhereInput!]
  NOT: [VehicleModelWhereInput!]
  OR: [VehicleModelWhereInput!]
  brandName: StringFilter
  createdAt: DateTimeNullableFilter
  modelId: BigInt
  modelName: StringFilter
  modelName_brandName: VehicleModelModelNameBrandNameCompoundUniqueInput
  updatedAt: DateTimeNullableFilter
  vehicles: VehicleListRelationFilter
  vehiclesBrand: VehicleBrandRelationFilter
}

input VehicleNullableRelationFilter {
  is: VehicleWhereInput
  isNot: VehicleWhereInput
}

input VehicleRelationFilter {
  is: VehicleWhereInput
  isNot: VehicleWhereInput
}

input VehicleScalarWhereInput {
  AND: [VehicleScalarWhereInput!]
  NOT: [VehicleScalarWhereInput!]
  OR: [VehicleScalarWhereInput!]
  deletedAt: DateTimeNullableFilter
  modelId: BigIntFilter
  personId: BigIntFilter
  vehicleId: BigIntFilter
}

type VehicleSumAggregate {
  modelId: BigInt
  personId: BigInt
  vehicleId: BigInt
}

input VehicleUpdateManyMutationInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VehicleUpdateManyWithWhereWithoutPersonInput {
  data: VehicleUpdateManyMutationInput!
  where: VehicleScalarWhereInput!
}

input VehicleUpdateManyWithoutPersonNestedInput {
  connect: [VehicleWhereUniqueInput!]
  connectOrCreate: [VehicleCreateOrConnectWithoutPersonInput!]
  create: [VehicleCreateWithoutPersonInput!]
  createMany: VehicleCreateManyPersonInputEnvelope
  delete: [VehicleWhereUniqueInput!]
  deleteMany: [VehicleScalarWhereInput!]
  disconnect: [VehicleWhereUniqueInput!]
  set: [VehicleWhereUniqueInput!]
  update: [VehicleUpdateWithWhereUniqueWithoutPersonInput!]
  updateMany: [VehicleUpdateManyWithWhereWithoutPersonInput!]
  upsert: [VehicleUpsertWithWhereUniqueWithoutPersonInput!]
}

input VehicleUpdateOneRequiredWithoutServicesNestedInput {
  connect: VehicleWhereUniqueInput
  connectOrCreate: VehicleCreateOrConnectWithoutServicesInput
  create: VehicleCreateWithoutServicesInput
  update: VehicleUpdateToOneWithWhereWithoutServicesInput
  upsert: VehicleUpsertWithoutServicesInput
}

input VehicleUpdateOneRequiredWithoutVehicleAssociatedServiceRequestsNestedInput {
  connect: VehicleWhereUniqueInput
  connectOrCreate: VehicleCreateOrConnectWithoutVehicleAssociatedServiceRequestsInput
  create: VehicleCreateWithoutVehicleAssociatedServiceRequestsInput
  update: VehicleUpdateToOneWithWhereWithoutVehicleAssociatedServiceRequestsInput
  upsert: VehicleUpsertWithoutVehicleAssociatedServiceRequestsInput
}

input VehicleUpdateToOneWithWhereWithoutServicesInput {
  data: VehicleUpdateWithoutServicesInput!
  where: VehicleWhereInput
}

input VehicleUpdateToOneWithWhereWithoutVehicleAssociatedServiceRequestsInput {
  data: VehicleUpdateWithoutVehicleAssociatedServiceRequestsInput!
  where: VehicleWhereInput
}

input VehicleUpdateWithWhereUniqueWithoutPersonInput {
  data: VehicleUpdateWithoutPersonInput!
  where: VehicleWhereUniqueInput!
}

input VehicleUpdateWithoutPersonInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  services: ServiceUpdateManyWithoutVehicleNestedInput
  vehicleAssociatedServiceRequests: ServiceRequestUpdateManyWithoutVehicleNestedInput
  vehicleModel: VehicleModelUpdateOneRequiredWithoutVehiclesNestedInput
  vehiclesDetails: VehicleDetailsUpdateOneWithoutVehicleNestedInput
}

input VehicleUpdateWithoutServicesInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  person: PersonUpdateOneRequiredWithoutVehiclesNestedInput
  vehicleAssociatedServiceRequests: ServiceRequestUpdateManyWithoutVehicleNestedInput
  vehicleModel: VehicleModelUpdateOneRequiredWithoutVehiclesNestedInput
  vehiclesDetails: VehicleDetailsUpdateOneWithoutVehicleNestedInput
}

input VehicleUpdateWithoutVehicleAssociatedServiceRequestsInput {
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  person: PersonUpdateOneRequiredWithoutVehiclesNestedInput
  services: ServiceUpdateManyWithoutVehicleNestedInput
  vehicleModel: VehicleModelUpdateOneRequiredWithoutVehiclesNestedInput
  vehiclesDetails: VehicleDetailsUpdateOneWithoutVehicleNestedInput
}

input VehicleUpsertWithWhereUniqueWithoutPersonInput {
  create: VehicleCreateWithoutPersonInput!
  update: VehicleUpdateWithoutPersonInput!
  where: VehicleWhereUniqueInput!
}

input VehicleUpsertWithoutServicesInput {
  create: VehicleCreateWithoutServicesInput!
  update: VehicleUpdateWithoutServicesInput!
  where: VehicleWhereInput
}

input VehicleUpsertWithoutVehicleAssociatedServiceRequestsInput {
  create: VehicleCreateWithoutVehicleAssociatedServiceRequestsInput!
  update: VehicleUpdateWithoutVehicleAssociatedServiceRequestsInput!
  where: VehicleWhereInput
}

input VehicleWhereInput {
  AND: [VehicleWhereInput!]
  NOT: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  deletedAt: DateTimeNullableFilter
  modelId: BigIntFilter
  person: PersonRelationFilter
  personId: BigIntFilter
  services: ServiceListRelationFilter
  vehicleAssociatedServiceRequests: ServiceRequestListRelationFilter
  vehicleId: BigIntFilter
  vehicleModel: VehicleModelRelationFilter
  vehiclesDetails: VehicleDetailsNullableRelationFilter
}

input VehicleWhereUniqueInput {
  AND: [VehicleWhereInput!]
  NOT: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  deletedAt: DateTimeNullableFilter
  modelId: BigIntFilter
  person: PersonRelationFilter
  personId: BigIntFilter
  services: ServiceListRelationFilter
  vehicleAssociatedServiceRequests: ServiceRequestListRelationFilter
  vehicleId: BigInt
  vehicleModel: VehicleModelRelationFilter
  vehiclesDetails: VehicleDetailsNullableRelationFilter
}

type Workshop {
  _count: WorkshopCount!
  addresses: [Address!]
  createdAt: DateTime
  customers: [Customer!]
  deletedAt: DateTime
  email: String
  employees: [Employee!]
  isManagingWork: Boolean
  isVerified: Boolean
  jobCategories: [JobCategory!]
  permissionSets: [PermissionSet!]
  person: Person!
  personId: BigInt!
  reviews: [Review!]
  serviceRequests: [ServiceRequest!]
  services: [Service!]
  updatedAt: DateTime
  workshopDetails: WorkshopDetails
  workshopId: BigInt!
  workshopJobs: [WorkshopJob!]
}

type WorkshopAvgAggregate {
  personId: Float
  workshopId: Float
}

type WorkshopCount {
  addresses: Int!
  customers: Int!
  employees: Int!
  jobCategories: Int!
  permissionSets: Int!
  reviews: Int!
  serviceRequests: Int!
  services: Int!
  workshopJobs: Int!
}

type WorkshopCountAggregate {
  _all: Int!
  createdAt: Int!
  deletedAt: Int!
  email: Int!
  isManagingWork: Int!
  isVerified: Int!
  personId: Int!
  updatedAt: Int!
  workshopId: Int!
}

input WorkshopCreateManyPersonInput {
  createdAt: DateTime
  email: String
  isManagingWork: Boolean
  isVerified: Boolean
  updatedAt: DateTime
}

input WorkshopCreateManyPersonInputEnvelope {
  data: [WorkshopCreateManyPersonInput!]!
  skipDuplicates: Boolean
}

input WorkshopCreateNestedManyWithoutAddressesInput {
  connect: [WorkshopWhereUniqueInput!]
  connectOrCreate: [WorkshopCreateOrConnectWithoutAddressesInput!]
  create: [WorkshopCreateWithoutAddressesInput!]
}

input WorkshopCreateNestedManyWithoutJobCategoriesInput {
  connect: [WorkshopWhereUniqueInput!]
  connectOrCreate: [WorkshopCreateOrConnectWithoutJobCategoriesInput!]
  create: [WorkshopCreateWithoutJobCategoriesInput!]
}

input WorkshopCreateNestedManyWithoutPersonInput {
  connect: [WorkshopWhereUniqueInput!]
  connectOrCreate: [WorkshopCreateOrConnectWithoutPersonInput!]
  create: [WorkshopCreateWithoutPersonInput!]
  createMany: WorkshopCreateManyPersonInputEnvelope
}

input WorkshopCreateNestedOneWithoutCustomersInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutCustomersInput
  create: WorkshopCreateWithoutCustomersInput
}

input WorkshopCreateNestedOneWithoutEmployeesInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutEmployeesInput
  create: WorkshopCreateWithoutEmployeesInput
}

input WorkshopCreateNestedOneWithoutPermissionSetsInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutPermissionSetsInput
  create: WorkshopCreateWithoutPermissionSetsInput
}

input WorkshopCreateNestedOneWithoutReviewsInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutReviewsInput
  create: WorkshopCreateWithoutReviewsInput
}

input WorkshopCreateNestedOneWithoutServiceRequestsInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutServiceRequestsInput
  create: WorkshopCreateWithoutServiceRequestsInput
}

input WorkshopCreateNestedOneWithoutServicesInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutServicesInput
  create: WorkshopCreateWithoutServicesInput
}

input WorkshopCreateNestedOneWithoutWorkshopJobsInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutWorkshopJobsInput
  create: WorkshopCreateWithoutWorkshopJobsInput
}

input WorkshopCreateOrConnectWithoutAddressesInput {
  create: WorkshopCreateWithoutAddressesInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopCreateOrConnectWithoutCustomersInput {
  create: WorkshopCreateWithoutCustomersInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopCreateOrConnectWithoutEmployeesInput {
  create: WorkshopCreateWithoutEmployeesInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopCreateOrConnectWithoutJobCategoriesInput {
  create: WorkshopCreateWithoutJobCategoriesInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopCreateOrConnectWithoutPermissionSetsInput {
  create: WorkshopCreateWithoutPermissionSetsInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopCreateOrConnectWithoutPersonInput {
  create: WorkshopCreateWithoutPersonInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopCreateOrConnectWithoutReviewsInput {
  create: WorkshopCreateWithoutReviewsInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopCreateOrConnectWithoutServiceRequestsInput {
  create: WorkshopCreateWithoutServiceRequestsInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopCreateOrConnectWithoutServicesInput {
  create: WorkshopCreateWithoutServicesInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopCreateOrConnectWithoutWorkshopJobsInput {
  create: WorkshopCreateWithoutWorkshopJobsInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopCreateWithoutAddressesInput {
  createdAt: DateTime
  customers: CustomerCreateNestedManyWithoutWorkshopInput
  email: String
  employees: EmployeeCreateNestedManyWithoutWorkshopInput
  isManagingWork: Boolean
  isVerified: Boolean
  jobCategories: JobCategoryCreateNestedManyWithoutWorkshopsInput
  permissionSets: PermissionSetCreateNestedManyWithoutWorkshopInput
  person: PersonCreateNestedOneWithoutWorkshopsInput!
  reviews: ReviewCreateNestedManyWithoutWorkshopInput
  serviceRequests: ServiceRequestCreateNestedManyWithoutWorkshopInput
  services: ServiceCreateNestedManyWithoutWorkshopInput
  updatedAt: DateTime
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
  workshopJobs: WorkshopJobCreateNestedManyWithoutWorkshopInput
}

input WorkshopCreateWithoutCustomersInput {
  addresses: AddressCreateNestedManyWithoutWorkshopsInput
  createdAt: DateTime
  email: String
  employees: EmployeeCreateNestedManyWithoutWorkshopInput
  isManagingWork: Boolean
  isVerified: Boolean
  jobCategories: JobCategoryCreateNestedManyWithoutWorkshopsInput
  permissionSets: PermissionSetCreateNestedManyWithoutWorkshopInput
  person: PersonCreateNestedOneWithoutWorkshopsInput!
  reviews: ReviewCreateNestedManyWithoutWorkshopInput
  serviceRequests: ServiceRequestCreateNestedManyWithoutWorkshopInput
  services: ServiceCreateNestedManyWithoutWorkshopInput
  updatedAt: DateTime
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
  workshopJobs: WorkshopJobCreateNestedManyWithoutWorkshopInput
}

input WorkshopCreateWithoutEmployeesInput {
  addresses: AddressCreateNestedManyWithoutWorkshopsInput
  createdAt: DateTime
  customers: CustomerCreateNestedManyWithoutWorkshopInput
  email: String
  isManagingWork: Boolean
  isVerified: Boolean
  jobCategories: JobCategoryCreateNestedManyWithoutWorkshopsInput
  permissionSets: PermissionSetCreateNestedManyWithoutWorkshopInput
  person: PersonCreateNestedOneWithoutWorkshopsInput!
  reviews: ReviewCreateNestedManyWithoutWorkshopInput
  serviceRequests: ServiceRequestCreateNestedManyWithoutWorkshopInput
  services: ServiceCreateNestedManyWithoutWorkshopInput
  updatedAt: DateTime
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
  workshopJobs: WorkshopJobCreateNestedManyWithoutWorkshopInput
}

input WorkshopCreateWithoutJobCategoriesInput {
  addresses: AddressCreateNestedManyWithoutWorkshopsInput
  createdAt: DateTime
  customers: CustomerCreateNestedManyWithoutWorkshopInput
  email: String
  employees: EmployeeCreateNestedManyWithoutWorkshopInput
  isManagingWork: Boolean
  isVerified: Boolean
  permissionSets: PermissionSetCreateNestedManyWithoutWorkshopInput
  person: PersonCreateNestedOneWithoutWorkshopsInput!
  reviews: ReviewCreateNestedManyWithoutWorkshopInput
  serviceRequests: ServiceRequestCreateNestedManyWithoutWorkshopInput
  services: ServiceCreateNestedManyWithoutWorkshopInput
  updatedAt: DateTime
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
  workshopJobs: WorkshopJobCreateNestedManyWithoutWorkshopInput
}

input WorkshopCreateWithoutPermissionSetsInput {
  addresses: AddressCreateNestedManyWithoutWorkshopsInput
  createdAt: DateTime
  customers: CustomerCreateNestedManyWithoutWorkshopInput
  email: String
  employees: EmployeeCreateNestedManyWithoutWorkshopInput
  isManagingWork: Boolean
  isVerified: Boolean
  jobCategories: JobCategoryCreateNestedManyWithoutWorkshopsInput
  person: PersonCreateNestedOneWithoutWorkshopsInput!
  reviews: ReviewCreateNestedManyWithoutWorkshopInput
  serviceRequests: ServiceRequestCreateNestedManyWithoutWorkshopInput
  services: ServiceCreateNestedManyWithoutWorkshopInput
  updatedAt: DateTime
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
  workshopJobs: WorkshopJobCreateNestedManyWithoutWorkshopInput
}

input WorkshopCreateWithoutPersonInput {
  addresses: AddressCreateNestedManyWithoutWorkshopsInput
  createdAt: DateTime
  customers: CustomerCreateNestedManyWithoutWorkshopInput
  email: String
  employees: EmployeeCreateNestedManyWithoutWorkshopInput
  isManagingWork: Boolean
  isVerified: Boolean
  jobCategories: JobCategoryCreateNestedManyWithoutWorkshopsInput
  permissionSets: PermissionSetCreateNestedManyWithoutWorkshopInput
  reviews: ReviewCreateNestedManyWithoutWorkshopInput
  serviceRequests: ServiceRequestCreateNestedManyWithoutWorkshopInput
  services: ServiceCreateNestedManyWithoutWorkshopInput
  updatedAt: DateTime
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
  workshopJobs: WorkshopJobCreateNestedManyWithoutWorkshopInput
}

input WorkshopCreateWithoutReviewsInput {
  addresses: AddressCreateNestedManyWithoutWorkshopsInput
  createdAt: DateTime
  customers: CustomerCreateNestedManyWithoutWorkshopInput
  email: String
  employees: EmployeeCreateNestedManyWithoutWorkshopInput
  isManagingWork: Boolean
  isVerified: Boolean
  jobCategories: JobCategoryCreateNestedManyWithoutWorkshopsInput
  permissionSets: PermissionSetCreateNestedManyWithoutWorkshopInput
  person: PersonCreateNestedOneWithoutWorkshopsInput!
  serviceRequests: ServiceRequestCreateNestedManyWithoutWorkshopInput
  services: ServiceCreateNestedManyWithoutWorkshopInput
  updatedAt: DateTime
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
  workshopJobs: WorkshopJobCreateNestedManyWithoutWorkshopInput
}

input WorkshopCreateWithoutServiceRequestsInput {
  addresses: AddressCreateNestedManyWithoutWorkshopsInput
  createdAt: DateTime
  customers: CustomerCreateNestedManyWithoutWorkshopInput
  email: String
  employees: EmployeeCreateNestedManyWithoutWorkshopInput
  isManagingWork: Boolean
  isVerified: Boolean
  jobCategories: JobCategoryCreateNestedManyWithoutWorkshopsInput
  permissionSets: PermissionSetCreateNestedManyWithoutWorkshopInput
  person: PersonCreateNestedOneWithoutWorkshopsInput!
  reviews: ReviewCreateNestedManyWithoutWorkshopInput
  services: ServiceCreateNestedManyWithoutWorkshopInput
  updatedAt: DateTime
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
  workshopJobs: WorkshopJobCreateNestedManyWithoutWorkshopInput
}

input WorkshopCreateWithoutServicesInput {
  addresses: AddressCreateNestedManyWithoutWorkshopsInput
  createdAt: DateTime
  customers: CustomerCreateNestedManyWithoutWorkshopInput
  email: String
  employees: EmployeeCreateNestedManyWithoutWorkshopInput
  isManagingWork: Boolean
  isVerified: Boolean
  jobCategories: JobCategoryCreateNestedManyWithoutWorkshopsInput
  permissionSets: PermissionSetCreateNestedManyWithoutWorkshopInput
  person: PersonCreateNestedOneWithoutWorkshopsInput!
  reviews: ReviewCreateNestedManyWithoutWorkshopInput
  serviceRequests: ServiceRequestCreateNestedManyWithoutWorkshopInput
  updatedAt: DateTime
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
  workshopJobs: WorkshopJobCreateNestedManyWithoutWorkshopInput
}

input WorkshopCreateWithoutWorkshopJobsInput {
  addresses: AddressCreateNestedManyWithoutWorkshopsInput
  createdAt: DateTime
  customers: CustomerCreateNestedManyWithoutWorkshopInput
  email: String
  employees: EmployeeCreateNestedManyWithoutWorkshopInput
  isManagingWork: Boolean
  isVerified: Boolean
  jobCategories: JobCategoryCreateNestedManyWithoutWorkshopsInput
  permissionSets: PermissionSetCreateNestedManyWithoutWorkshopInput
  person: PersonCreateNestedOneWithoutWorkshopsInput!
  reviews: ReviewCreateNestedManyWithoutWorkshopInput
  serviceRequests: ServiceRequestCreateNestedManyWithoutWorkshopInput
  services: ServiceCreateNestedManyWithoutWorkshopInput
  updatedAt: DateTime
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
}

type WorkshopDetails {
  NIP: String
  deletedAt: DateTime
  description: String
  logoURL: String
  rating: Decimal!
  status: WorkshopsDetailsStatus
  telephoneNumber: String
  workshop: Workshop!
  workshopId: BigInt!
  workshopName: String!
}

input WorkshopDetailsCreateNestedOneWithoutWorkshopInput {
  connect: WorkshopDetailsWhereUniqueInput
  connectOrCreate: WorkshopDetailsCreateOrConnectWithoutWorkshopInput
  create: WorkshopDetailsCreateWithoutWorkshopInput
}

input WorkshopDetailsCreateOrConnectWithoutWorkshopInput {
  create: WorkshopDetailsCreateWithoutWorkshopInput!
  where: WorkshopDetailsWhereUniqueInput!
}

input WorkshopDetailsCreateWithoutWorkshopInput {
  NIP: String
  description: String
  logoURL: String
  rating: Decimal
  status: WorkshopsDetailsStatus
  telephoneNumber: String
  workshopName: String!
}

input WorkshopDetailsNullableRelationFilter {
  is: WorkshopDetailsWhereInput
  isNot: WorkshopDetailsWhereInput
}

input WorkshopDetailsUpdateOneWithoutWorkshopNestedInput {
  connect: WorkshopDetailsWhereUniqueInput
  connectOrCreate: WorkshopDetailsCreateOrConnectWithoutWorkshopInput
  create: WorkshopDetailsCreateWithoutWorkshopInput
  delete: WorkshopDetailsWhereInput
  disconnect: WorkshopDetailsWhereInput
  update: WorkshopDetailsUpdateToOneWithWhereWithoutWorkshopInput
  upsert: WorkshopDetailsUpsertWithoutWorkshopInput
}

input WorkshopDetailsUpdateToOneWithWhereWithoutWorkshopInput {
  data: WorkshopDetailsUpdateWithoutWorkshopInput!
  where: WorkshopDetailsWhereInput
}

input WorkshopDetailsUpdateWithoutWorkshopInput {
  NIP: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  logoURL: NullableStringFieldUpdateOperationsInput
  rating: DecimalFieldUpdateOperationsInput
  status: NullableEnumWorkshopsDetailsStatusFieldUpdateOperationsInput
  telephoneNumber: NullableStringFieldUpdateOperationsInput
  workshopName: StringFieldUpdateOperationsInput
}

input WorkshopDetailsUpsertWithoutWorkshopInput {
  create: WorkshopDetailsCreateWithoutWorkshopInput!
  update: WorkshopDetailsUpdateWithoutWorkshopInput!
  where: WorkshopDetailsWhereInput
}

input WorkshopDetailsWhereInput {
  AND: [WorkshopDetailsWhereInput!]
  NIP: StringNullableFilter
  NOT: [WorkshopDetailsWhereInput!]
  OR: [WorkshopDetailsWhereInput!]
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  logoURL: StringNullableFilter
  rating: DecimalFilter
  status: EnumWorkshopsDetailsStatusNullableFilter
  telephoneNumber: StringNullableFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
  workshopName: StringFilter
}

input WorkshopDetailsWhereUniqueInput {
  AND: [WorkshopDetailsWhereInput!]
  NIP: StringNullableFilter
  NOT: [WorkshopDetailsWhereInput!]
  OR: [WorkshopDetailsWhereInput!]
  deletedAt: DateTimeNullableFilter
  description: StringNullableFilter
  logoURL: StringNullableFilter
  rating: DecimalFilter
  status: EnumWorkshopsDetailsStatusNullableFilter
  telephoneNumber: StringNullableFilter
  workshop: WorkshopRelationFilter
  workshopId: BigInt
  workshopName: StringFilter
}

type WorkshopJob {
  availability: Boolean!
  job: Job!
  jobId: BigInt!
  maxPrice: Decimal
  minPrice: Decimal
  price: Decimal
  workshop: Workshop!
  workshopDescription: String
  workshopId: BigInt!
  workshopJobId: BigInt!
}

input WorkshopJobCreateManyJobInput {
  availability: Boolean
  maxPrice: Decimal
  minPrice: Decimal
  price: Decimal
  workshopDescription: String
  workshopId: BigInt!
}

input WorkshopJobCreateManyJobInputEnvelope {
  data: [WorkshopJobCreateManyJobInput!]!
  skipDuplicates: Boolean
}

input WorkshopJobCreateManyWorkshopInput {
  availability: Boolean
  jobId: BigInt!
  maxPrice: Decimal
  minPrice: Decimal
  price: Decimal
  workshopDescription: String
}

input WorkshopJobCreateManyWorkshopInputEnvelope {
  data: [WorkshopJobCreateManyWorkshopInput!]!
  skipDuplicates: Boolean
}

input WorkshopJobCreateNestedManyWithoutJobInput {
  connect: [WorkshopJobWhereUniqueInput!]
  connectOrCreate: [WorkshopJobCreateOrConnectWithoutJobInput!]
  create: [WorkshopJobCreateWithoutJobInput!]
  createMany: WorkshopJobCreateManyJobInputEnvelope
}

input WorkshopJobCreateNestedManyWithoutWorkshopInput {
  connect: [WorkshopJobWhereUniqueInput!]
  connectOrCreate: [WorkshopJobCreateOrConnectWithoutWorkshopInput!]
  create: [WorkshopJobCreateWithoutWorkshopInput!]
  createMany: WorkshopJobCreateManyWorkshopInputEnvelope
}

input WorkshopJobCreateOrConnectWithoutJobInput {
  create: WorkshopJobCreateWithoutJobInput!
  where: WorkshopJobWhereUniqueInput!
}

input WorkshopJobCreateOrConnectWithoutWorkshopInput {
  create: WorkshopJobCreateWithoutWorkshopInput!
  where: WorkshopJobWhereUniqueInput!
}

input WorkshopJobCreateWithoutJobInput {
  availability: Boolean
  maxPrice: Decimal
  minPrice: Decimal
  price: Decimal
  workshop: WorkshopCreateNestedOneWithoutWorkshopJobsInput!
  workshopDescription: String
}

input WorkshopJobCreateWithoutWorkshopInput {
  availability: Boolean
  job: JobCreateNestedOneWithoutJobWorkshopsInput!
  maxPrice: Decimal
  minPrice: Decimal
  price: Decimal
  workshopDescription: String
}

input WorkshopJobListRelationFilter {
  every: WorkshopJobWhereInput
  none: WorkshopJobWhereInput
  some: WorkshopJobWhereInput
}

input WorkshopJobScalarWhereInput {
  AND: [WorkshopJobScalarWhereInput!]
  NOT: [WorkshopJobScalarWhereInput!]
  OR: [WorkshopJobScalarWhereInput!]
  availability: BoolFilter
  jobId: BigIntFilter
  maxPrice: DecimalNullableFilter
  minPrice: DecimalNullableFilter
  price: DecimalNullableFilter
  workshopDescription: StringNullableFilter
  workshopId: BigIntFilter
  workshopJobId: BigIntFilter
}

input WorkshopJobUpdateManyMutationInput {
  availability: BoolFieldUpdateOperationsInput
  maxPrice: NullableDecimalFieldUpdateOperationsInput
  minPrice: NullableDecimalFieldUpdateOperationsInput
  price: NullableDecimalFieldUpdateOperationsInput
  workshopDescription: NullableStringFieldUpdateOperationsInput
}

input WorkshopJobUpdateManyWithWhereWithoutJobInput {
  data: WorkshopJobUpdateManyMutationInput!
  where: WorkshopJobScalarWhereInput!
}

input WorkshopJobUpdateManyWithWhereWithoutWorkshopInput {
  data: WorkshopJobUpdateManyMutationInput!
  where: WorkshopJobScalarWhereInput!
}

input WorkshopJobUpdateManyWithoutJobNestedInput {
  connect: [WorkshopJobWhereUniqueInput!]
  connectOrCreate: [WorkshopJobCreateOrConnectWithoutJobInput!]
  create: [WorkshopJobCreateWithoutJobInput!]
  createMany: WorkshopJobCreateManyJobInputEnvelope
  delete: [WorkshopJobWhereUniqueInput!]
  deleteMany: [WorkshopJobScalarWhereInput!]
  disconnect: [WorkshopJobWhereUniqueInput!]
  set: [WorkshopJobWhereUniqueInput!]
  update: [WorkshopJobUpdateWithWhereUniqueWithoutJobInput!]
  updateMany: [WorkshopJobUpdateManyWithWhereWithoutJobInput!]
  upsert: [WorkshopJobUpsertWithWhereUniqueWithoutJobInput!]
}

input WorkshopJobUpdateManyWithoutWorkshopNestedInput {
  connect: [WorkshopJobWhereUniqueInput!]
  connectOrCreate: [WorkshopJobCreateOrConnectWithoutWorkshopInput!]
  create: [WorkshopJobCreateWithoutWorkshopInput!]
  createMany: WorkshopJobCreateManyWorkshopInputEnvelope
  delete: [WorkshopJobWhereUniqueInput!]
  deleteMany: [WorkshopJobScalarWhereInput!]
  disconnect: [WorkshopJobWhereUniqueInput!]
  set: [WorkshopJobWhereUniqueInput!]
  update: [WorkshopJobUpdateWithWhereUniqueWithoutWorkshopInput!]
  updateMany: [WorkshopJobUpdateManyWithWhereWithoutWorkshopInput!]
  upsert: [WorkshopJobUpsertWithWhereUniqueWithoutWorkshopInput!]
}

input WorkshopJobUpdateWithWhereUniqueWithoutJobInput {
  data: WorkshopJobUpdateWithoutJobInput!
  where: WorkshopJobWhereUniqueInput!
}

input WorkshopJobUpdateWithWhereUniqueWithoutWorkshopInput {
  data: WorkshopJobUpdateWithoutWorkshopInput!
  where: WorkshopJobWhereUniqueInput!
}

input WorkshopJobUpdateWithoutJobInput {
  availability: BoolFieldUpdateOperationsInput
  maxPrice: NullableDecimalFieldUpdateOperationsInput
  minPrice: NullableDecimalFieldUpdateOperationsInput
  price: NullableDecimalFieldUpdateOperationsInput
  workshop: WorkshopUpdateOneRequiredWithoutWorkshopJobsNestedInput
  workshopDescription: NullableStringFieldUpdateOperationsInput
}

input WorkshopJobUpdateWithoutWorkshopInput {
  availability: BoolFieldUpdateOperationsInput
  job: JobUpdateOneRequiredWithoutJobWorkshopsNestedInput
  maxPrice: NullableDecimalFieldUpdateOperationsInput
  minPrice: NullableDecimalFieldUpdateOperationsInput
  price: NullableDecimalFieldUpdateOperationsInput
  workshopDescription: NullableStringFieldUpdateOperationsInput
}

input WorkshopJobUpsertWithWhereUniqueWithoutJobInput {
  create: WorkshopJobCreateWithoutJobInput!
  update: WorkshopJobUpdateWithoutJobInput!
  where: WorkshopJobWhereUniqueInput!
}

input WorkshopJobUpsertWithWhereUniqueWithoutWorkshopInput {
  create: WorkshopJobCreateWithoutWorkshopInput!
  update: WorkshopJobUpdateWithoutWorkshopInput!
  where: WorkshopJobWhereUniqueInput!
}

input WorkshopJobWhereInput {
  AND: [WorkshopJobWhereInput!]
  NOT: [WorkshopJobWhereInput!]
  OR: [WorkshopJobWhereInput!]
  availability: BoolFilter
  job: JobRelationFilter
  jobId: BigIntFilter
  maxPrice: DecimalNullableFilter
  minPrice: DecimalNullableFilter
  price: DecimalNullableFilter
  workshop: WorkshopRelationFilter
  workshopDescription: StringNullableFilter
  workshopId: BigIntFilter
  workshopJobId: BigIntFilter
}

input WorkshopJobWhereUniqueInput {
  AND: [WorkshopJobWhereInput!]
  NOT: [WorkshopJobWhereInput!]
  OR: [WorkshopJobWhereInput!]
  availability: BoolFilter
  job: JobRelationFilter
  jobId: BigIntFilter
  maxPrice: DecimalNullableFilter
  minPrice: DecimalNullableFilter
  price: DecimalNullableFilter
  workshop: WorkshopRelationFilter
  workshopDescription: StringNullableFilter
  workshopId: BigIntFilter
  workshopId_jobId: WorkshopJobWorkshopIdJobIdCompoundUniqueInput
  workshopJobId: BigInt
}

input WorkshopJobWorkshopIdJobIdCompoundUniqueInput {
  jobId: BigInt!
  workshopId: BigInt!
}

input WorkshopListRelationFilter {
  every: WorkshopWhereInput
  none: WorkshopWhereInput
  some: WorkshopWhereInput
}

type WorkshopMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isManagingWork: Boolean
  isVerified: Boolean
  personId: BigInt
  updatedAt: DateTime
  workshopId: BigInt
}

type WorkshopMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isManagingWork: Boolean
  isVerified: Boolean
  personId: BigInt
  updatedAt: DateTime
  workshopId: BigInt
}

input WorkshopNullableRelationFilter {
  is: WorkshopWhereInput
  isNot: WorkshopWhereInput
}

input WorkshopRelationFilter {
  is: WorkshopWhereInput
  isNot: WorkshopWhereInput
}

input WorkshopScalarWhereInput {
  AND: [WorkshopScalarWhereInput!]
  NOT: [WorkshopScalarWhereInput!]
  OR: [WorkshopScalarWhereInput!]
  createdAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  email: StringNullableFilter
  isManagingWork: BoolNullableFilter
  isVerified: BoolNullableFilter
  personId: BigIntFilter
  updatedAt: DateTimeNullableFilter
  workshopId: BigIntFilter
}

type WorkshopSumAggregate {
  personId: BigInt
  workshopId: BigInt
}

input WorkshopUpdateManyMutationInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  isManagingWork: NullableBoolFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input WorkshopUpdateManyWithWhereWithoutAddressesInput {
  data: WorkshopUpdateManyMutationInput!
  where: WorkshopScalarWhereInput!
}

input WorkshopUpdateManyWithWhereWithoutJobCategoriesInput {
  data: WorkshopUpdateManyMutationInput!
  where: WorkshopScalarWhereInput!
}

input WorkshopUpdateManyWithWhereWithoutPersonInput {
  data: WorkshopUpdateManyMutationInput!
  where: WorkshopScalarWhereInput!
}

input WorkshopUpdateManyWithoutAddressesNestedInput {
  connect: [WorkshopWhereUniqueInput!]
  connectOrCreate: [WorkshopCreateOrConnectWithoutAddressesInput!]
  create: [WorkshopCreateWithoutAddressesInput!]
  delete: [WorkshopWhereUniqueInput!]
  deleteMany: [WorkshopScalarWhereInput!]
  disconnect: [WorkshopWhereUniqueInput!]
  set: [WorkshopWhereUniqueInput!]
  update: [WorkshopUpdateWithWhereUniqueWithoutAddressesInput!]
  updateMany: [WorkshopUpdateManyWithWhereWithoutAddressesInput!]
  upsert: [WorkshopUpsertWithWhereUniqueWithoutAddressesInput!]
}

input WorkshopUpdateManyWithoutJobCategoriesNestedInput {
  connect: [WorkshopWhereUniqueInput!]
  connectOrCreate: [WorkshopCreateOrConnectWithoutJobCategoriesInput!]
  create: [WorkshopCreateWithoutJobCategoriesInput!]
  delete: [WorkshopWhereUniqueInput!]
  deleteMany: [WorkshopScalarWhereInput!]
  disconnect: [WorkshopWhereUniqueInput!]
  set: [WorkshopWhereUniqueInput!]
  update: [WorkshopUpdateWithWhereUniqueWithoutJobCategoriesInput!]
  updateMany: [WorkshopUpdateManyWithWhereWithoutJobCategoriesInput!]
  upsert: [WorkshopUpsertWithWhereUniqueWithoutJobCategoriesInput!]
}

input WorkshopUpdateManyWithoutPersonNestedInput {
  connect: [WorkshopWhereUniqueInput!]
  connectOrCreate: [WorkshopCreateOrConnectWithoutPersonInput!]
  create: [WorkshopCreateWithoutPersonInput!]
  createMany: WorkshopCreateManyPersonInputEnvelope
  delete: [WorkshopWhereUniqueInput!]
  deleteMany: [WorkshopScalarWhereInput!]
  disconnect: [WorkshopWhereUniqueInput!]
  set: [WorkshopWhereUniqueInput!]
  update: [WorkshopUpdateWithWhereUniqueWithoutPersonInput!]
  updateMany: [WorkshopUpdateManyWithWhereWithoutPersonInput!]
  upsert: [WorkshopUpsertWithWhereUniqueWithoutPersonInput!]
}

input WorkshopUpdateOneRequiredWithoutCustomersNestedInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutCustomersInput
  create: WorkshopCreateWithoutCustomersInput
  update: WorkshopUpdateToOneWithWhereWithoutCustomersInput
  upsert: WorkshopUpsertWithoutCustomersInput
}

input WorkshopUpdateOneRequiredWithoutEmployeesNestedInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutEmployeesInput
  create: WorkshopCreateWithoutEmployeesInput
  update: WorkshopUpdateToOneWithWhereWithoutEmployeesInput
  upsert: WorkshopUpsertWithoutEmployeesInput
}

input WorkshopUpdateOneRequiredWithoutReviewsNestedInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutReviewsInput
  create: WorkshopCreateWithoutReviewsInput
  update: WorkshopUpdateToOneWithWhereWithoutReviewsInput
  upsert: WorkshopUpsertWithoutReviewsInput
}

input WorkshopUpdateOneRequiredWithoutServiceRequestsNestedInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutServiceRequestsInput
  create: WorkshopCreateWithoutServiceRequestsInput
  update: WorkshopUpdateToOneWithWhereWithoutServiceRequestsInput
  upsert: WorkshopUpsertWithoutServiceRequestsInput
}

input WorkshopUpdateOneRequiredWithoutServicesNestedInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutServicesInput
  create: WorkshopCreateWithoutServicesInput
  update: WorkshopUpdateToOneWithWhereWithoutServicesInput
  upsert: WorkshopUpsertWithoutServicesInput
}

input WorkshopUpdateOneRequiredWithoutWorkshopJobsNestedInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutWorkshopJobsInput
  create: WorkshopCreateWithoutWorkshopJobsInput
  update: WorkshopUpdateToOneWithWhereWithoutWorkshopJobsInput
  upsert: WorkshopUpsertWithoutWorkshopJobsInput
}

input WorkshopUpdateOneWithoutPermissionSetsNestedInput {
  connect: WorkshopWhereUniqueInput
  connectOrCreate: WorkshopCreateOrConnectWithoutPermissionSetsInput
  create: WorkshopCreateWithoutPermissionSetsInput
  delete: WorkshopWhereInput
  disconnect: WorkshopWhereInput
  update: WorkshopUpdateToOneWithWhereWithoutPermissionSetsInput
  upsert: WorkshopUpsertWithoutPermissionSetsInput
}

input WorkshopUpdateToOneWithWhereWithoutCustomersInput {
  data: WorkshopUpdateWithoutCustomersInput!
  where: WorkshopWhereInput
}

input WorkshopUpdateToOneWithWhereWithoutEmployeesInput {
  data: WorkshopUpdateWithoutEmployeesInput!
  where: WorkshopWhereInput
}

input WorkshopUpdateToOneWithWhereWithoutPermissionSetsInput {
  data: WorkshopUpdateWithoutPermissionSetsInput!
  where: WorkshopWhereInput
}

input WorkshopUpdateToOneWithWhereWithoutReviewsInput {
  data: WorkshopUpdateWithoutReviewsInput!
  where: WorkshopWhereInput
}

input WorkshopUpdateToOneWithWhereWithoutServiceRequestsInput {
  data: WorkshopUpdateWithoutServiceRequestsInput!
  where: WorkshopWhereInput
}

input WorkshopUpdateToOneWithWhereWithoutServicesInput {
  data: WorkshopUpdateWithoutServicesInput!
  where: WorkshopWhereInput
}

input WorkshopUpdateToOneWithWhereWithoutWorkshopJobsInput {
  data: WorkshopUpdateWithoutWorkshopJobsInput!
  where: WorkshopWhereInput
}

input WorkshopUpdateWithWhereUniqueWithoutAddressesInput {
  data: WorkshopUpdateWithoutAddressesInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopUpdateWithWhereUniqueWithoutJobCategoriesInput {
  data: WorkshopUpdateWithoutJobCategoriesInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopUpdateWithWhereUniqueWithoutPersonInput {
  data: WorkshopUpdateWithoutPersonInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopUpdateWithoutAddressesInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  customers: CustomerUpdateManyWithoutWorkshopNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutWorkshopNestedInput
  isManagingWork: NullableBoolFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  jobCategories: JobCategoryUpdateManyWithoutWorkshopsNestedInput
  permissionSets: PermissionSetUpdateManyWithoutWorkshopNestedInput
  person: PersonUpdateOneRequiredWithoutWorkshopsNestedInput
  reviews: ReviewUpdateManyWithoutWorkshopNestedInput
  serviceRequests: ServiceRequestUpdateManyWithoutWorkshopNestedInput
  services: ServiceUpdateManyWithoutWorkshopNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  workshopDetails: WorkshopDetailsUpdateOneWithoutWorkshopNestedInput
  workshopJobs: WorkshopJobUpdateManyWithoutWorkshopNestedInput
}

input WorkshopUpdateWithoutCustomersInput {
  addresses: AddressUpdateManyWithoutWorkshopsNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutWorkshopNestedInput
  isManagingWork: NullableBoolFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  jobCategories: JobCategoryUpdateManyWithoutWorkshopsNestedInput
  permissionSets: PermissionSetUpdateManyWithoutWorkshopNestedInput
  person: PersonUpdateOneRequiredWithoutWorkshopsNestedInput
  reviews: ReviewUpdateManyWithoutWorkshopNestedInput
  serviceRequests: ServiceRequestUpdateManyWithoutWorkshopNestedInput
  services: ServiceUpdateManyWithoutWorkshopNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  workshopDetails: WorkshopDetailsUpdateOneWithoutWorkshopNestedInput
  workshopJobs: WorkshopJobUpdateManyWithoutWorkshopNestedInput
}

input WorkshopUpdateWithoutEmployeesInput {
  addresses: AddressUpdateManyWithoutWorkshopsNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  customers: CustomerUpdateManyWithoutWorkshopNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  isManagingWork: NullableBoolFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  jobCategories: JobCategoryUpdateManyWithoutWorkshopsNestedInput
  permissionSets: PermissionSetUpdateManyWithoutWorkshopNestedInput
  person: PersonUpdateOneRequiredWithoutWorkshopsNestedInput
  reviews: ReviewUpdateManyWithoutWorkshopNestedInput
  serviceRequests: ServiceRequestUpdateManyWithoutWorkshopNestedInput
  services: ServiceUpdateManyWithoutWorkshopNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  workshopDetails: WorkshopDetailsUpdateOneWithoutWorkshopNestedInput
  workshopJobs: WorkshopJobUpdateManyWithoutWorkshopNestedInput
}

input WorkshopUpdateWithoutJobCategoriesInput {
  addresses: AddressUpdateManyWithoutWorkshopsNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  customers: CustomerUpdateManyWithoutWorkshopNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutWorkshopNestedInput
  isManagingWork: NullableBoolFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  permissionSets: PermissionSetUpdateManyWithoutWorkshopNestedInput
  person: PersonUpdateOneRequiredWithoutWorkshopsNestedInput
  reviews: ReviewUpdateManyWithoutWorkshopNestedInput
  serviceRequests: ServiceRequestUpdateManyWithoutWorkshopNestedInput
  services: ServiceUpdateManyWithoutWorkshopNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  workshopDetails: WorkshopDetailsUpdateOneWithoutWorkshopNestedInput
  workshopJobs: WorkshopJobUpdateManyWithoutWorkshopNestedInput
}

input WorkshopUpdateWithoutPermissionSetsInput {
  addresses: AddressUpdateManyWithoutWorkshopsNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  customers: CustomerUpdateManyWithoutWorkshopNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutWorkshopNestedInput
  isManagingWork: NullableBoolFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  jobCategories: JobCategoryUpdateManyWithoutWorkshopsNestedInput
  person: PersonUpdateOneRequiredWithoutWorkshopsNestedInput
  reviews: ReviewUpdateManyWithoutWorkshopNestedInput
  serviceRequests: ServiceRequestUpdateManyWithoutWorkshopNestedInput
  services: ServiceUpdateManyWithoutWorkshopNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  workshopDetails: WorkshopDetailsUpdateOneWithoutWorkshopNestedInput
  workshopJobs: WorkshopJobUpdateManyWithoutWorkshopNestedInput
}

input WorkshopUpdateWithoutPersonInput {
  addresses: AddressUpdateManyWithoutWorkshopsNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  customers: CustomerUpdateManyWithoutWorkshopNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutWorkshopNestedInput
  isManagingWork: NullableBoolFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  jobCategories: JobCategoryUpdateManyWithoutWorkshopsNestedInput
  permissionSets: PermissionSetUpdateManyWithoutWorkshopNestedInput
  reviews: ReviewUpdateManyWithoutWorkshopNestedInput
  serviceRequests: ServiceRequestUpdateManyWithoutWorkshopNestedInput
  services: ServiceUpdateManyWithoutWorkshopNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  workshopDetails: WorkshopDetailsUpdateOneWithoutWorkshopNestedInput
  workshopJobs: WorkshopJobUpdateManyWithoutWorkshopNestedInput
}

input WorkshopUpdateWithoutReviewsInput {
  addresses: AddressUpdateManyWithoutWorkshopsNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  customers: CustomerUpdateManyWithoutWorkshopNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutWorkshopNestedInput
  isManagingWork: NullableBoolFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  jobCategories: JobCategoryUpdateManyWithoutWorkshopsNestedInput
  permissionSets: PermissionSetUpdateManyWithoutWorkshopNestedInput
  person: PersonUpdateOneRequiredWithoutWorkshopsNestedInput
  serviceRequests: ServiceRequestUpdateManyWithoutWorkshopNestedInput
  services: ServiceUpdateManyWithoutWorkshopNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  workshopDetails: WorkshopDetailsUpdateOneWithoutWorkshopNestedInput
  workshopJobs: WorkshopJobUpdateManyWithoutWorkshopNestedInput
}

input WorkshopUpdateWithoutServiceRequestsInput {
  addresses: AddressUpdateManyWithoutWorkshopsNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  customers: CustomerUpdateManyWithoutWorkshopNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutWorkshopNestedInput
  isManagingWork: NullableBoolFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  jobCategories: JobCategoryUpdateManyWithoutWorkshopsNestedInput
  permissionSets: PermissionSetUpdateManyWithoutWorkshopNestedInput
  person: PersonUpdateOneRequiredWithoutWorkshopsNestedInput
  reviews: ReviewUpdateManyWithoutWorkshopNestedInput
  services: ServiceUpdateManyWithoutWorkshopNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  workshopDetails: WorkshopDetailsUpdateOneWithoutWorkshopNestedInput
  workshopJobs: WorkshopJobUpdateManyWithoutWorkshopNestedInput
}

input WorkshopUpdateWithoutServicesInput {
  addresses: AddressUpdateManyWithoutWorkshopsNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  customers: CustomerUpdateManyWithoutWorkshopNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutWorkshopNestedInput
  isManagingWork: NullableBoolFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  jobCategories: JobCategoryUpdateManyWithoutWorkshopsNestedInput
  permissionSets: PermissionSetUpdateManyWithoutWorkshopNestedInput
  person: PersonUpdateOneRequiredWithoutWorkshopsNestedInput
  reviews: ReviewUpdateManyWithoutWorkshopNestedInput
  serviceRequests: ServiceRequestUpdateManyWithoutWorkshopNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  workshopDetails: WorkshopDetailsUpdateOneWithoutWorkshopNestedInput
  workshopJobs: WorkshopJobUpdateManyWithoutWorkshopNestedInput
}

input WorkshopUpdateWithoutWorkshopJobsInput {
  addresses: AddressUpdateManyWithoutWorkshopsNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  customers: CustomerUpdateManyWithoutWorkshopNestedInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employees: EmployeeUpdateManyWithoutWorkshopNestedInput
  isManagingWork: NullableBoolFieldUpdateOperationsInput
  isVerified: NullableBoolFieldUpdateOperationsInput
  jobCategories: JobCategoryUpdateManyWithoutWorkshopsNestedInput
  permissionSets: PermissionSetUpdateManyWithoutWorkshopNestedInput
  person: PersonUpdateOneRequiredWithoutWorkshopsNestedInput
  reviews: ReviewUpdateManyWithoutWorkshopNestedInput
  serviceRequests: ServiceRequestUpdateManyWithoutWorkshopNestedInput
  services: ServiceUpdateManyWithoutWorkshopNestedInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  workshopDetails: WorkshopDetailsUpdateOneWithoutWorkshopNestedInput
}

input WorkshopUpsertWithWhereUniqueWithoutAddressesInput {
  create: WorkshopCreateWithoutAddressesInput!
  update: WorkshopUpdateWithoutAddressesInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopUpsertWithWhereUniqueWithoutJobCategoriesInput {
  create: WorkshopCreateWithoutJobCategoriesInput!
  update: WorkshopUpdateWithoutJobCategoriesInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopUpsertWithWhereUniqueWithoutPersonInput {
  create: WorkshopCreateWithoutPersonInput!
  update: WorkshopUpdateWithoutPersonInput!
  where: WorkshopWhereUniqueInput!
}

input WorkshopUpsertWithoutCustomersInput {
  create: WorkshopCreateWithoutCustomersInput!
  update: WorkshopUpdateWithoutCustomersInput!
  where: WorkshopWhereInput
}

input WorkshopUpsertWithoutEmployeesInput {
  create: WorkshopCreateWithoutEmployeesInput!
  update: WorkshopUpdateWithoutEmployeesInput!
  where: WorkshopWhereInput
}

input WorkshopUpsertWithoutPermissionSetsInput {
  create: WorkshopCreateWithoutPermissionSetsInput!
  update: WorkshopUpdateWithoutPermissionSetsInput!
  where: WorkshopWhereInput
}

input WorkshopUpsertWithoutReviewsInput {
  create: WorkshopCreateWithoutReviewsInput!
  update: WorkshopUpdateWithoutReviewsInput!
  where: WorkshopWhereInput
}

input WorkshopUpsertWithoutServiceRequestsInput {
  create: WorkshopCreateWithoutServiceRequestsInput!
  update: WorkshopUpdateWithoutServiceRequestsInput!
  where: WorkshopWhereInput
}

input WorkshopUpsertWithoutServicesInput {
  create: WorkshopCreateWithoutServicesInput!
  update: WorkshopUpdateWithoutServicesInput!
  where: WorkshopWhereInput
}

input WorkshopUpsertWithoutWorkshopJobsInput {
  create: WorkshopCreateWithoutWorkshopJobsInput!
  update: WorkshopUpdateWithoutWorkshopJobsInput!
  where: WorkshopWhereInput
}

input WorkshopWhereInput {
  AND: [WorkshopWhereInput!]
  NOT: [WorkshopWhereInput!]
  OR: [WorkshopWhereInput!]
  addresses: AddressListRelationFilter
  createdAt: DateTimeNullableFilter
  customers: CustomerListRelationFilter
  deletedAt: DateTimeNullableFilter
  email: StringNullableFilter
  employees: EmployeeListRelationFilter
  isManagingWork: BoolNullableFilter
  isVerified: BoolNullableFilter
  jobCategories: JobCategoryListRelationFilter
  permissionSets: PermissionSetListRelationFilter
  person: PersonRelationFilter
  personId: BigIntFilter
  reviews: ReviewListRelationFilter
  serviceRequests: ServiceRequestListRelationFilter
  services: ServiceListRelationFilter
  updatedAt: DateTimeNullableFilter
  workshopDetails: WorkshopDetailsNullableRelationFilter
  workshopId: BigIntFilter
  workshopJobs: WorkshopJobListRelationFilter
}

input WorkshopWhereUniqueInput {
  AND: [WorkshopWhereInput!]
  NOT: [WorkshopWhereInput!]
  OR: [WorkshopWhereInput!]
  addresses: AddressListRelationFilter
  createdAt: DateTimeNullableFilter
  customers: CustomerListRelationFilter
  deletedAt: DateTimeNullableFilter
  email: StringNullableFilter
  employees: EmployeeListRelationFilter
  isManagingWork: BoolNullableFilter
  isVerified: BoolNullableFilter
  jobCategories: JobCategoryListRelationFilter
  permissionSets: PermissionSetListRelationFilter
  person: PersonRelationFilter
  personId: BigIntFilter
  reviews: ReviewListRelationFilter
  serviceRequests: ServiceRequestListRelationFilter
  services: ServiceListRelationFilter
  updatedAt: DateTimeNullableFilter
  workshopDetails: WorkshopDetailsNullableRelationFilter
  workshopId: BigInt
  workshopJobs: WorkshopJobListRelationFilter
}

enum WorkshopsDetailsStatus {
  active
  suspended
}