# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcceptServiceRequestInput {
  customer: CustomerCreateWithoutVehiclesInput
  employeeId: BigInt!
  serviceDescription: String
  serviceRequestId: BigInt!
  serviceStartDate: DateTime
  tasks: [TaskCreateInput!]
}

input AcceptWorkshopDeviceInput {
  deviceId: BigInt!
  deviceName: String!
}

type Address {
  addressId: BigInt!
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  postCode: String!
  region: String!
  street: String
  workshop: Workshop
}

type AddressAvgAggregate {
  addressId: Float
}

type AddressCountAggregate {
  _all: Int!
  addressId: Int!
  buildingNo: Int!
  city: Int!
  country: Int!
  flatNo: Int!
  postCode: Int!
  region: Int!
  street: Int!
}

input AddressCreateInput {
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  postCode: String!
  region: String!
  street: String
}

input AddressCreateNestedOneWithoutWorkshopInput {
  create: AddressCreateWithoutWorkshopInput
}

input AddressCreateOrConnectWithoutWorkshopInput {
  create: AddressCreateWithoutWorkshopInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateWithoutWorkshopInput {
  buildingNo: String!
  city: String!
  country: String!
  flatNo: String
  postCode: String!
  region: String!
  street: String
}

type AddressMaxAggregate {
  addressId: BigInt
  buildingNo: String
  city: String
  country: String
  flatNo: String
  postCode: String
  region: String
  street: String
}

type AddressMinAggregate {
  addressId: BigInt
  buildingNo: String
  city: String
  country: String
  flatNo: String
  postCode: String
  region: String
  street: String
}

input AddressNullableRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressOrderByWithRelationInput {
  addressId: SortOrder
  buildingNo: SortOrder
  city: SortOrder
  country: SortOrder
  flatNo: SortOrderInput
  postCode: SortOrder
  region: SortOrder
  street: SortOrderInput
  workshop: WorkshopOrderByWithRelationInput
}

enum AddressScalarFieldEnum {
  addressId
  buildingNo
  city
  country
  flatNo
  postCode
  region
  street
}

type AddressSumAggregate {
  addressId: BigInt
}

input AddressUpdateInput {
  buildingNo: String
  city: String
  country: String
  flatNo: String
  postCode: String
  region: String
  street: String
}

input AddressUpdateOneWithoutWorkshopNestedInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutWorkshopInput
  create: AddressCreateWithoutWorkshopInput
  delete: AddressWhereInput
  disconnect: AddressWhereInput
  update: AddressUpdateToOneWithWhereWithoutWorkshopInput
  upsert: AddressUpsertWithoutWorkshopInput
}

input AddressUpdateToOneWithWhereWithoutWorkshopInput {
  data: AddressUpdateWithoutWorkshopInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutWorkshopInput {
  buildingNo: String
  city: String
  country: String
  flatNo: String
  postCode: String
  region: String
  street: String
}

input AddressUpsertWithoutWorkshopInput {
  create: AddressCreateWithoutWorkshopInput!
  update: AddressUpdateWithoutWorkshopInput!
  where: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  addressId: BigIntFilter
  buildingNo: StringFilter
  city: StringFilter
  country: StringFilter
  flatNo: StringNullableFilter
  postCode: StringFilter
  region: StringFilter
  street: StringNullableFilter
  workshop: WorkshopNullableRelationFilter
}

input AddressWhereUniqueInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  addressId: BigInt
  buildingNo: StringFilter
  city: StringFilter
  country: StringFilter
  flatNo: StringNullableFilter
  postCode: StringFilter
  region: StringFilter
  street: StringNullableFilter
  workshop: WorkshopNullableRelationFilter
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BigIntFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntFilter
  notIn: [String!]
}

input BigIntNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntNullableFilter
  notIn: [String!]
}

enum BodyColor {
  BLACK
  BLUE
  BROWN
  GRAY
  GREEN
  OTHER
  RED
  SILVER
  WHITE
  YELLOW
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CloseOneServiceInput {
  payedOff: Boolean
  paymentAmount: Decimal
  serviceDescription: String
  serviceEndDate: DateTime
  status: ServiceStatus
}

input CreateServiceRequestAsGuestInput {
  guest: GuestCreateInput!
  serviceRequest: ServiceRequestCreateInput!
  vehicle: VehicleCreateInput!
}

input CreateVehicleForUserInput {
  user: UserCreateNestedOneWithoutVehiclesInput!
  vehicleDetails: VehicleDetailsCreateNestedOneWithoutVehicleInput
  vehicleModel: VehicleModelCreateNestedOneWithoutVehiclesInput!
}

type Customer {
  NIP: String
  _count: CustomerCount!
  companyName: String
  createdAt: DateTime!
  createdBy: BigInt

  """Note: Fill this field in Service layer."""
  creationSource: CustomerCreationSource!
  customerId: BigInt!
  deletedAt: DateTime
  description: String
  email: String
  firstName: String
  guest: Guest
  guestId: BigInt
  isVerified: Boolean!
  services: [Service!]
  telephoneNumber: String

  """Note: Optional because it defaults to 0.00"""
  totalDue: Decimal!
  updatedAt: DateTime
  updatedBy: BigInt
  user: User
  userId: BigInt
  vehicles: [Vehicle!]
  workshop: Workshop!
  workshopId: BigInt!
}

type CustomerAvgAggregate {
  createdBy: Float
  customerId: Float
  guestId: Float
  totalDue: Decimal
  updatedBy: Float
  userId: Float
  workshopId: Float
}

type CustomerCount {
  services: Int!
  vehicles: Int!
}

type CustomerCountAggregate {
  NIP: Int!
  _all: Int!
  companyName: Int!
  createdAt: Int!
  createdBy: Int!
  creationSource: Int!
  customerId: Int!
  deletedAt: Int!
  description: Int!
  email: Int!
  firstName: Int!
  guestId: Int!
  isVerified: Int!
  telephoneNumber: Int!
  totalDue: Int!
  updatedAt: Int!
  updatedBy: Int!
  userId: Int!
  workshopId: Int!
}

input CustomerCreateInput {
  NIP: String
  companyName: String
  creationSource: CustomerCreationSource!
  description: String
  email: String
  firstName: String
  guest: GuestCreateNestedOneWithoutCustomerInput
  services: ServiceCreateNestedManyWithoutCustomerInput
  telephoneNumber: String
  totalDue: Decimal
  user: UserCreateNestedOneWithoutCustomersInput
  vehicles: VehicleCreateNestedManyWithoutCustomerInput
  workshop: WorkshopCreateNestedOneWithoutCustomersInput!
}

input CustomerCreateNestedOneWithoutServicesInput {
  connect: CustomerWhereUniqueInput
  connectOrCreate: CustomerCreateOrConnectWithoutServicesInput
  create: CustomerCreateWithoutServicesInput
}

input CustomerCreateNestedOneWithoutVehiclesInput {
  connect: CustomerWhereUniqueInput
}

input CustomerCreateOrConnectWithoutServicesInput {
  create: CustomerCreateWithoutServicesInput!
  where: CustomerWhereUniqueInput!
}

input CustomerCreateWithoutServicesInput {
  NIP: String
  companyName: String
  creationSource: CustomerCreationSource!
  description: String
  email: String
  firstName: String
  guest: GuestCreateNestedOneWithoutCustomerInput
  telephoneNumber: String
  totalDue: Decimal
  user: UserCreateNestedOneWithoutCustomersInput
  vehicles: VehicleCreateNestedManyWithoutCustomerInput
  workshop: WorkshopCreateNestedOneWithoutCustomersInput!
}

input CustomerCreateWithoutVehiclesInput {
  NIP: String
  companyName: String
  creationSource: CustomerCreationSource!
  description: String
  email: String
  firstName: String
  guest: GuestCreateNestedOneWithoutCustomerInput
  services: ServiceCreateNestedManyWithoutCustomerInput
  telephoneNumber: String
  totalDue: Decimal
  user: UserCreateNestedOneWithoutCustomersInput
  workshop: WorkshopCreateNestedOneWithoutCustomersInput!
}

enum CustomerCreationSource {
  GUEST
  USER
  WORKSHOP
}

input CustomerListRelationFilter {
  every: CustomerWhereInput
  none: CustomerWhereInput
  some: CustomerWhereInput
}

type CustomerMaxAggregate {
  NIP: String
  companyName: String
  createdAt: DateTime
  createdBy: BigInt
  creationSource: CustomerCreationSource
  customerId: BigInt
  deletedAt: DateTime
  description: String
  email: String
  firstName: String
  guestId: BigInt
  isVerified: Boolean
  telephoneNumber: String
  totalDue: Decimal
  updatedAt: DateTime
  updatedBy: BigInt
  userId: BigInt
  workshopId: BigInt
}

type CustomerMinAggregate {
  NIP: String
  companyName: String
  createdAt: DateTime
  createdBy: BigInt
  creationSource: CustomerCreationSource
  customerId: BigInt
  deletedAt: DateTime
  description: String
  email: String
  firstName: String
  guestId: BigInt
  isVerified: Boolean
  telephoneNumber: String
  totalDue: Decimal
  updatedAt: DateTime
  updatedBy: BigInt
  userId: BigInt
  workshopId: BigInt
}

input CustomerNullableRelationFilter {
  is: CustomerWhereInput
  isNot: CustomerWhereInput
}

input CustomerOrderByRelationAggregateInput {
  _count: SortOrder
}

input CustomerOrderByWithRelationInput {
  NIP: SortOrderInput
  companyName: SortOrderInput
  creationSource: SortOrder
  customerId: SortOrder
  description: SortOrderInput
  email: SortOrderInput
  firstName: SortOrderInput
  guest: GuestOrderByWithRelationInput
  guestId: SortOrderInput
  isVerified: SortOrder
  services: ServiceOrderByRelationAggregateInput
  telephoneNumber: SortOrderInput
  totalDue: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
  vehicles: VehicleOrderByRelationAggregateInput
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
}

input CustomerRelationFilter {
  is: CustomerWhereInput
  isNot: CustomerWhereInput
}

enum CustomerScalarFieldEnum {
  NIP
  companyName
  createdAt
  createdBy
  creationSource
  customerId
  deletedAt
  description
  email
  firstName
  guestId
  isVerified
  telephoneNumber
  totalDue
  updatedAt
  updatedBy
  userId
  workshopId
}

type CustomerSumAggregate {
  createdBy: BigInt
  customerId: BigInt
  guestId: BigInt
  totalDue: Decimal
  updatedBy: BigInt
  userId: BigInt
  workshopId: BigInt
}

input CustomerUpdateInput {
  NIP: String
  companyName: String
  creationSource: CustomerCreationSource
  description: String
  email: String
  firstName: String
  isVerified: Boolean
  telephoneNumber: String
  totalDue: Decimal
}

input CustomerUserIdWorkshopIdCompoundUniqueInput {
  userId: BigInt!
  workshopId: BigInt!
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  NIP: StringNullableFilter
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  companyName: StringNullableFilter
  creationSource: EnumCustomerCreationSourceFilter
  customerId: BigIntFilter
  description: StringNullableFilter
  email: StringNullableFilter
  firstName: StringNullableFilter
  guest: GuestNullableRelationFilter
  guestId: BigIntNullableFilter
  isVerified: BoolFilter
  services: ServiceListRelationFilter
  telephoneNumber: StringNullableFilter
  totalDue: DecimalFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  vehicles: VehicleListRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input CustomerWhereUniqueInput {
  AND: [CustomerWhereInput!]
  NIP: StringNullableFilter
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  companyName: StringNullableFilter
  creationSource: EnumCustomerCreationSourceFilter
  customerId: BigInt
  description: StringNullableFilter
  email: StringNullableFilter
  firstName: StringNullableFilter
  guest: GuestNullableRelationFilter
  guestId: BigInt
  isVerified: BoolFilter
  services: ServiceListRelationFilter
  telephoneNumber: StringNullableFilter
  totalDue: DecimalFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  userId_workshopId: CustomerUserIdWorkshopIdCompoundUniqueInput
  vehicles: VehicleListRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

input DecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input DecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input EditOneTaskInput {
  customName: String
  description: String
  executionTime: Float
  partsCost: Decimal
}

input EditReviewInput {
  rating: Decimal
  reviewText: String
}

input EditReviewResponseInput {
  responseText: String!
}

type Employee {
  _count: EmployeeCount!
  createdAt: DateTime!
  createdBy: BigInt
  deletedAt: DateTime
  employeeId: BigInt!
  joinWorkshopRequests: [JoinWorkshopRequest!]

  """Note: Optional because field defaults to now()"""
  joinedAt: DateTime!
  login: String!
  nickname: BigInt

  """Note: Connect or Create only allowed"""
  permissions: [EmployeePermission!]
  refreshToken: String
  services: [Service!]
  status: EmployeeStatus!
  tasks: [Task!]
  updatedAt: DateTime
  updatedBy: BigInt

  """Note: Depends solely on join workshop request status."""
  user: User
  userId: BigInt
  workshop: Workshop!
  workshopId: BigInt!
}

type EmployeeAvgAggregate {
  createdBy: Float
  employeeId: Float
  updatedBy: Float
  userId: Float
  workshopId: Float
}

type EmployeeCount {
  joinWorkshopRequests: Int!
  permissions: Int!
  services: Int!
  tasks: Int!
}

type EmployeeCountAggregate {
  _all: Int!
  createdAt: Int!
  createdBy: Int!
  deletedAt: Int!
  employeeId: Int!
  joinedAt: Int!
  login: Int!
  nickname: Int!
  refreshToken: Int!
  status: Int!
  updatedAt: Int!
  updatedBy: Int!
  userId: Int!
  workshopId: Int!
}

input EmployeeCreateInput {
  joinWorkshopRequests: JoinWorkshopRequestCreateNestedManyWithoutEmployeeInput
  joinedAt: DateTime
  login: String!
  nickname: BigInt
  password: String!
  permissions: EmployeePermissionCreateNestedManyWithoutEmployeesInput
  workshop: WorkshopCreateNestedOneWithoutEmployeesInput!
}

input EmployeeCreateNestedManyWithoutTasksInput {
  connect: [EmployeeWhereUniqueInput!]
}

input EmployeeCreateNestedOneWithoutJoinWorkshopRequestsInput {
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateNestedOneWithoutServicesInput {
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateOrConnectWithoutTasksInput {
  create: EmployeeCreateWithoutTasksInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeCreateWithoutTasksInput {
  joinWorkshopRequests: JoinWorkshopRequestCreateNestedManyWithoutEmployeeInput
  joinedAt: DateTime
  login: String!
  nickname: BigInt
  password: String!
  permissions: EmployeePermissionCreateNestedManyWithoutEmployeesInput
  workshop: WorkshopCreateNestedOneWithoutEmployeesInput!
}

input EmployeeListRelationFilter {
  every: EmployeeWhereInput
  none: EmployeeWhereInput
  some: EmployeeWhereInput
}

input EmployeeLoginWorkshopIdCompoundUniqueInput {
  login: String!
  workshopId: BigInt!
}

type EmployeeMaxAggregate {
  createdAt: DateTime
  createdBy: BigInt
  deletedAt: DateTime
  employeeId: BigInt
  joinedAt: DateTime
  login: String
  nickname: BigInt
  refreshToken: String
  status: EmployeeStatus
  updatedAt: DateTime
  updatedBy: BigInt
  userId: BigInt
  workshopId: BigInt
}

type EmployeeMinAggregate {
  createdAt: DateTime
  createdBy: BigInt
  deletedAt: DateTime
  employeeId: BigInt
  joinedAt: DateTime
  login: String
  nickname: BigInt
  refreshToken: String
  status: EmployeeStatus
  updatedAt: DateTime
  updatedBy: BigInt
  userId: BigInt
  workshopId: BigInt
}

input EmployeeOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmployeeOrderByWithRelationInput {
  employeeId: SortOrder
  joinWorkshopRequests: JoinWorkshopRequestOrderByRelationAggregateInput
  joinedAt: SortOrder
  login: SortOrder
  nickname: SortOrderInput
  password: SortOrder
  permissions: EmployeePermissionOrderByRelationAggregateInput
  refreshToken: SortOrderInput
  services: ServiceOrderByRelationAggregateInput
  status: SortOrder
  tasks: TaskOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
}

type EmployeePermission {
  _count: EmployeePermissionCount!
  action: String!
  conditions: JSON
  createdAt: DateTime!
  description: String
  employees: [Employee!]
  name: String!
  permissionId: BigInt!
  subject: String!
  updatedAt: DateTime!
}

type EmployeePermissionAvgAggregate {
  permissionId: Float
}

type EmployeePermissionCount {
  employees: Int!
}

type EmployeePermissionCountAggregate {
  _all: Int!
  action: Int!
  conditions: Int!
  createdAt: Int!
  description: Int!
  name: Int!
  permissionId: Int!
  subject: Int!
  updatedAt: Int!
}

input EmployeePermissionCreateInput {
  action: String!
  conditions: JSON
  description: String
  name: String!
  permissionId: BigInt
  subject: String!
}

input EmployeePermissionCreateNestedManyWithoutEmployeesInput {
  connect: [EmployeePermissionWhereUniqueInput!]
  connectOrCreate: [EmployeePermissionCreateOrConnectWithoutEmployeesInput!]
  create: [EmployeePermissionCreateWithoutEmployeesInput!]
}

input EmployeePermissionCreateOrConnectWithoutEmployeesInput {
  create: EmployeePermissionCreateWithoutEmployeesInput!
  where: EmployeePermissionWhereUniqueInput!
}

input EmployeePermissionCreateWithoutEmployeesInput {
  action: String!
  conditions: JSON
  description: String
  name: String!
  permissionId: BigInt
  subject: String!
}

input EmployeePermissionListRelationFilter {
  every: EmployeePermissionWhereInput
  none: EmployeePermissionWhereInput
  some: EmployeePermissionWhereInput
}

type EmployeePermissionMaxAggregate {
  action: String
  createdAt: DateTime
  description: String
  name: String
  permissionId: BigInt
  subject: String
  updatedAt: DateTime
}

type EmployeePermissionMinAggregate {
  action: String
  createdAt: DateTime
  description: String
  name: String
  permissionId: BigInt
  subject: String
  updatedAt: DateTime
}

input EmployeePermissionOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmployeePermissionOrderByWithRelationInput {
  action: SortOrder
  conditions: SortOrderInput
  description: SortOrderInput
  employees: EmployeeOrderByRelationAggregateInput
  name: SortOrder
  permissionId: SortOrder
  subject: SortOrder
}

enum EmployeePermissionScalarFieldEnum {
  action
  conditions
  createdAt
  description
  name
  permissionId
  subject
  updatedAt
}

input EmployeePermissionScalarWhereInput {
  AND: [EmployeePermissionScalarWhereInput!]
  NOT: [EmployeePermissionScalarWhereInput!]
  OR: [EmployeePermissionScalarWhereInput!]
  action: StringFilter
  conditions: JsonNullableFilter
  description: StringNullableFilter
  name: StringFilter
  permissionId: BigIntFilter
  subject: StringFilter
}

type EmployeePermissionSumAggregate {
  permissionId: BigInt
}

input EmployeePermissionUpdateInput {
  action: String
  conditions: JSON
  description: String
  name: String
  permissionId: BigInt
  subject: String
}

input EmployeePermissionUpdateManyMutationInput {
  action: String
  conditions: JSON
  description: String
  name: String
  permissionId: BigInt
  subject: String
}

input EmployeePermissionUpdateManyWithWhereWithoutEmployeesInput {
  data: EmployeePermissionUpdateManyMutationInput!
  where: EmployeePermissionScalarWhereInput!
}

input EmployeePermissionUpdateManyWithoutEmployeesNestedInput {
  connect: [EmployeePermissionWhereUniqueInput!]
  connectOrCreate: [EmployeePermissionCreateOrConnectWithoutEmployeesInput!]
  create: [EmployeePermissionCreateWithoutEmployeesInput!]
  delete: [EmployeePermissionWhereUniqueInput!]
  deleteMany: [EmployeePermissionScalarWhereInput!]
  disconnect: [EmployeePermissionWhereUniqueInput!]
  set: [EmployeePermissionWhereUniqueInput!]
  update: [EmployeePermissionUpdateWithWhereUniqueWithoutEmployeesInput!]
  updateMany: [EmployeePermissionUpdateManyWithWhereWithoutEmployeesInput!]
  upsert: [EmployeePermissionUpsertWithWhereUniqueWithoutEmployeesInput!]
}

input EmployeePermissionUpdateWithWhereUniqueWithoutEmployeesInput {
  data: EmployeePermissionUpdateWithoutEmployeesInput!
  where: EmployeePermissionWhereUniqueInput!
}

input EmployeePermissionUpdateWithoutEmployeesInput {
  action: String
  conditions: JSON
  description: String
  name: String
  permissionId: BigInt
  subject: String
}

input EmployeePermissionUpsertWithWhereUniqueWithoutEmployeesInput {
  create: EmployeePermissionCreateWithoutEmployeesInput!
  update: EmployeePermissionUpdateWithoutEmployeesInput!
  where: EmployeePermissionWhereUniqueInput!
}

input EmployeePermissionWhereInput {
  AND: [EmployeePermissionWhereInput!]
  NOT: [EmployeePermissionWhereInput!]
  OR: [EmployeePermissionWhereInput!]
  action: StringFilter
  conditions: JsonNullableFilter
  description: StringNullableFilter
  employees: EmployeeListRelationFilter
  name: StringFilter
  permissionId: BigIntFilter
  subject: StringFilter
}

input EmployeePermissionWhereUniqueInput {
  AND: [EmployeePermissionWhereInput!]
  NOT: [EmployeePermissionWhereInput!]
  OR: [EmployeePermissionWhereInput!]
  action: StringFilter
  conditions: JsonNullableFilter
  description: StringNullableFilter
  employees: EmployeeListRelationFilter
  name: String
  permissionId: BigInt
  subject: StringFilter
}

input EmployeeRelationFilter {
  is: EmployeeWhereInput
  isNot: EmployeeWhereInput
}

enum EmployeeScalarFieldEnum {
  createdAt
  createdBy
  deletedAt
  employeeId
  joinedAt
  login
  nickname
  password
  refreshToken
  status
  updatedAt
  updatedBy
  userId
  workshopId
}

input EmployeeScalarWhereInput {
  AND: [EmployeeScalarWhereInput!]
  NOT: [EmployeeScalarWhereInput!]
  OR: [EmployeeScalarWhereInput!]
  employeeId: BigIntFilter
  joinedAt: DateTimeFilter
  login: StringFilter
  nickname: StringNullableFilter
  password: StringFilter
  refreshToken: StringNullableFilter
  status: EnumEmployeeStatusFilter
  userId: BigIntNullableFilter
  workshopId: BigIntFilter
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

type EmployeeSumAggregate {
  createdBy: BigInt
  employeeId: BigInt
  updatedBy: BigInt
  userId: BigInt
  workshopId: BigInt
}

input EmployeeUpdateInput {
  joinWorkshopRequests: JoinWorkshopRequestUpdateManyWithoutEmployeeNestedInput
  joinedAt: DateTime
  login: String
  nickname: BigInt
  password: String
  permissions: EmployeePermissionUpdateManyWithoutEmployeesNestedInput
}

input EmployeeUpdateManyMutationInput {
  joinedAt: DateTime
  login: String
  nickname: BigInt
  password: String
}

input EmployeeUpdateManyWithWhereWithoutTasksInput {
  data: EmployeeUpdateManyMutationInput!
  where: EmployeeScalarWhereInput!
}

input EmployeeUpdateManyWithoutTasksNestedInput {
  connect: [EmployeeWhereUniqueInput!]
  connectOrCreate: [EmployeeCreateOrConnectWithoutTasksInput!]
  create: [EmployeeCreateWithoutTasksInput!]
  delete: [EmployeeWhereUniqueInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutTasksInput!]
  updateMany: [EmployeeUpdateManyWithWhereWithoutTasksInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutTasksInput!]
}

input EmployeeUpdateWithWhereUniqueWithoutTasksInput {
  data: EmployeeUpdateWithoutTasksInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeUpdateWithoutTasksInput {
  joinWorkshopRequests: JoinWorkshopRequestUpdateManyWithoutEmployeeNestedInput
  joinedAt: DateTime
  login: String
  nickname: BigInt
  password: String
  permissions: EmployeePermissionUpdateManyWithoutEmployeesNestedInput
}

input EmployeeUpsertWithWhereUniqueWithoutTasksInput {
  create: EmployeeCreateWithoutTasksInput!
  update: EmployeeUpdateWithoutTasksInput!
  where: EmployeeWhereUniqueInput!
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  employeeId: BigIntFilter
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  joinedAt: DateTimeFilter
  login: StringFilter
  nickname: StringNullableFilter
  password: StringFilter
  permissions: EmployeePermissionListRelationFilter
  refreshToken: StringNullableFilter
  services: ServiceListRelationFilter
  status: EnumEmployeeStatusFilter
  tasks: TaskListRelationFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input EmployeeWhereUniqueInput {
  AND: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  employeeId: BigInt
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  joinedAt: DateTimeFilter
  login: StringFilter
  login_workshopId: EmployeeLoginWorkshopIdCompoundUniqueInput
  nickname: StringNullableFilter
  password: StringFilter
  permissions: EmployeePermissionListRelationFilter
  refreshToken: StringNullableFilter
  services: ServiceListRelationFilter
  status: EnumEmployeeStatusFilter
  tasks: TaskListRelationFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input EnumBodyColorNullableFilter {
  equals: BodyColor
  in: [BodyColor!]
  not: NestedEnumBodyColorNullableFilter
  notIn: [BodyColor!]
}

input EnumCustomerCreationSourceFilter {
  equals: CustomerCreationSource
  in: [CustomerCreationSource!]
  not: NestedEnumCustomerCreationSourceFilter
  notIn: [CustomerCreationSource!]
}

input EnumEmployeeStatusFilter {
  equals: EmployeeStatus
  in: [EmployeeStatus!]
  not: NestedEnumEmployeeStatusFilter
  notIn: [EmployeeStatus!]
}

input EnumFuelTypeNullableFilter {
  equals: FuelType
  in: [FuelType!]
  not: NestedEnumFuelTypeNullableFilter
  notIn: [FuelType!]
}

input EnumJoinWorkshopRequestStatusFilter {
  equals: JoinWorkshopRequestStatus
  in: [JoinWorkshopRequestStatus!]
  not: NestedEnumJoinWorkshopRequestStatusFilter
  notIn: [JoinWorkshopRequestStatus!]
}

input EnumReviewResponseStatusFilter {
  equals: ReviewResponseStatus
  in: [ReviewResponseStatus!]
  not: NestedEnumReviewResponseStatusFilter
  notIn: [ReviewResponseStatus!]
}

input EnumReviewStatusFilter {
  equals: ReviewStatus
  in: [ReviewStatus!]
  not: NestedEnumReviewStatusFilter
  notIn: [ReviewStatus!]
}

input EnumServiceRequestStatusNullableFilter {
  equals: ServiceRequestStatus
  in: [ServiceRequestStatus!]
  not: NestedEnumServiceRequestStatusNullableFilter
  notIn: [ServiceRequestStatus!]
}

input EnumServiceStatusNullableFilter {
  equals: ServiceStatus
  in: [ServiceStatus!]
  not: NestedEnumServiceStatusNullableFilter
  notIn: [ServiceStatus!]
}

input EnumTaskStatusNullableFilter {
  equals: TaskStatus
  in: [TaskStatus!]
  not: NestedEnumTaskStatusNullableFilter
  notIn: [TaskStatus!]
}

input EnumUserReportReportedEntityTypeFilter {
  equals: UserReportReportedEntityType
  in: [UserReportReportedEntityType!]
  not: NestedEnumUserReportReportedEntityTypeFilter
  notIn: [UserReportReportedEntityType!]
}

input EnumUserReportStatusFilter {
  equals: UserReportStatus
  in: [UserReportStatus!]
  not: NestedEnumUserReportStatusFilter
  notIn: [UserReportStatus!]
}

input EnumUserReportTypeFilter {
  equals: UserReportType
  in: [UserReportType!]
  not: NestedEnumUserReportTypeFilter
  notIn: [UserReportType!]
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

input EnumUserStatusNullableFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusNullableFilter
  notIn: [UserStatus!]
}

input EnumWorkshopDetailsStatusNullableFilter {
  equals: WorkshopDetailsStatus
  in: [WorkshopDetailsStatus!]
  not: NestedEnumWorkshopDetailsStatusNullableFilter
  notIn: [WorkshopDetailsStatus!]
}

input EnumWorkshopDeviceStatusNullableFilter {
  equals: WorkshopDeviceStatus
  in: [WorkshopDeviceStatus!]
  not: NestedEnumWorkshopDeviceStatusNullableFilter
  notIn: [WorkshopDeviceStatus!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

enum FuelType {
  CNG
  DIESEL
  ELECTRIC
  HYBRID
  LPG
  OTHER
  PETROL
  ROCKET
}

"""
Note: When service request is accepted guest is removed and customer is updated with service request id. Updated and deleted automatically.
"""
type Guest {
  NIP: String
  companyName: String
  customer: Customer
  email: String
  firstName: String!
  guestId: BigInt!
  serviceRequest: ServiceRequest
  telephoneNumber: String
  vehicle: Vehicle
}

type GuestAvgAggregate {
  guestId: Float
}

type GuestCountAggregate {
  NIP: Int!
  _all: Int!
  companyName: Int!
  email: Int!
  firstName: Int!
  guestId: Int!
  telephoneNumber: Int!
}

input GuestCreateInput {
  NIP: String
  companyName: String
  email: String
  firstName: String!
  guestId: BigInt
  serviceRequest: ServiceRequestCreateNestedOneWithoutGuestInput
  telephoneNumber: String
  vehicle: VehicleCreateNestedOneWithoutGuestInput
}

input GuestCreateNestedOneWithoutCustomerInput {
  connect: GuestWhereUniqueInput
}

type GuestMaxAggregate {
  NIP: String
  companyName: String
  email: String
  firstName: String
  guestId: BigInt
  telephoneNumber: String
}

type GuestMinAggregate {
  NIP: String
  companyName: String
  email: String
  firstName: String
  guestId: BigInt
  telephoneNumber: String
}

input GuestNullableRelationFilter {
  is: GuestWhereInput
  isNot: GuestWhereInput
}

input GuestOrderByWithRelationInput {
  NIP: SortOrderInput
  companyName: SortOrderInput
  customer: CustomerOrderByWithRelationInput
  email: SortOrderInput
  firstName: SortOrder
  guestId: SortOrder
  serviceRequest: ServiceRequestOrderByWithRelationInput
  telephoneNumber: SortOrderInput
  vehicle: VehicleOrderByWithRelationInput
}

enum GuestScalarFieldEnum {
  NIP
  companyName
  email
  firstName
  guestId
  telephoneNumber
}

type GuestSumAggregate {
  guestId: BigInt
}

input GuestUpdateInput {
  NIP: String
  companyName: String
  email: String
  guestId: BigInt
}

input GuestWhereInput {
  AND: [GuestWhereInput!]
  NIP: StringNullableFilter
  NOT: [GuestWhereInput!]
  OR: [GuestWhereInput!]
  companyName: StringNullableFilter
  customer: CustomerNullableRelationFilter
  email: StringNullableFilter
  firstName: StringFilter
  guestId: BigIntFilter
  serviceRequest: ServiceRequestNullableRelationFilter
  telephoneNumber: StringNullableFilter
  vehicle: VehicleNullableRelationFilter
}

input GuestWhereUniqueInput {
  AND: [GuestWhereInput!]
  NIP: StringNullableFilter
  NOT: [GuestWhereInput!]
  OR: [GuestWhereInput!]
  companyName: StringNullableFilter
  customer: CustomerNullableRelationFilter
  email: StringNullableFilter
  firstName: StringFilter
  guestId: BigInt
  serviceRequest: ServiceRequestNullableRelationFilter
  telephoneNumber: StringNullableFilter
  vehicle: VehicleNullableRelationFilter
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Job {
  _count: JobCount!
  categoryId: BigInt!
  description: String

  """Note: Optional because field defaults to false"""
  isPopular: Boolean!
  jobCategory: JobCategory!
  jobId: BigInt!
  jobWorkshops: [WorkshopJob!]
  name: String
  serviceRequests: [ServiceRequest!]
}

type JobAvgAggregate {
  categoryId: Float
  jobId: Float
}

type JobCategory {
  _count: JobCategoryCount!
  categoryId: BigInt!
  children: [JobCategory!]
  description: String

  """Note: Optional because field defaults to false"""
  isPopular: Boolean!
  jobs: [Job!]
  name: String!
  parent: JobCategory
  parentId: BigInt
  workshops: [Workshop!]
}

type JobCategoryAvgAggregate {
  categoryId: Float
  parentId: Float
}

type JobCategoryCount {
  children: Int!
  jobs: Int!
  workshops: Int!
}

type JobCategoryCountAggregate {
  _all: Int!
  categoryId: Int!
  description: Int!
  isPopular: Int!
  name: Int!
  parentId: Int!
}

input JobCategoryCreateInput {
  children: JobCategoryCreateNestedManyWithoutParentInput
  description: String
  isPopular: Boolean
  name: String!
  parent: JobCategoryCreateNestedOneWithoutChildrenInput
}

input JobCategoryCreateNestedManyWithoutParentInput {
  connect: [JobCategoryWhereUniqueInput!]
}

input JobCategoryCreateNestedManyWithoutWorkshopsInput {
  connect: [JobCategoryWhereUniqueInput!]
}

input JobCategoryCreateNestedOneWithoutChildrenInput {
  connect: JobCategoryWhereUniqueInput
}

input JobCategoryCreateNestedOneWithoutJobsInput {
  connect: JobCategoryWhereUniqueInput
}

input JobCategoryCreateOrConnectWithoutChildrenInput {
  create: JobCategoryCreateWithoutChildrenInput!
  where: JobCategoryWhereUniqueInput!
}

input JobCategoryCreateWithoutChildrenInput {
  description: String
  isPopular: Boolean
  name: String!
  parent: JobCategoryCreateNestedOneWithoutChildrenInput
}

input JobCategoryListRelationFilter {
  every: JobCategoryWhereInput
  none: JobCategoryWhereInput
  some: JobCategoryWhereInput
}

type JobCategoryMaxAggregate {
  categoryId: BigInt
  description: String
  isPopular: Boolean
  name: String
  parentId: BigInt
}

type JobCategoryMinAggregate {
  categoryId: BigInt
  description: String
  isPopular: Boolean
  name: String
  parentId: BigInt
}

input JobCategoryNullableRelationFilter {
  is: JobCategoryWhereInput
  isNot: JobCategoryWhereInput
}

input JobCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input JobCategoryOrderByWithRelationInput {
  categoryId: SortOrder
  children: JobCategoryOrderByRelationAggregateInput
  description: SortOrderInput
  isPopular: SortOrder
  jobs: JobOrderByRelationAggregateInput
  name: SortOrder
  parent: JobCategoryOrderByWithRelationInput
  parentId: SortOrderInput
  workshops: WorkshopOrderByRelationAggregateInput
}

input JobCategoryRelationFilter {
  is: JobCategoryWhereInput
  isNot: JobCategoryWhereInput
}

enum JobCategoryScalarFieldEnum {
  categoryId
  description
  isPopular
  name
  parentId
}

type JobCategorySumAggregate {
  categoryId: BigInt
  parentId: BigInt
}

input JobCategoryUpdateInput {
  description: String
  isPopular: Boolean
  name: String
  parent: JobCategoryUpdateOneWithoutChildrenNestedInput
}

input JobCategoryUpdateOneWithoutChildrenNestedInput {
  connect: JobCategoryWhereUniqueInput
  connectOrCreate: JobCategoryCreateOrConnectWithoutChildrenInput
  create: JobCategoryCreateWithoutChildrenInput
  delete: JobCategoryWhereInput
  disconnect: JobCategoryWhereInput
  update: JobCategoryUpdateToOneWithWhereWithoutChildrenInput
  upsert: JobCategoryUpsertWithoutChildrenInput
}

input JobCategoryUpdateToOneWithWhereWithoutChildrenInput {
  data: JobCategoryUpdateWithoutChildrenInput!
  where: JobCategoryWhereInput
}

input JobCategoryUpdateWithoutChildrenInput {
  description: String
  isPopular: Boolean
  name: String
  parent: JobCategoryUpdateOneWithoutChildrenNestedInput
}

input JobCategoryUpsertWithoutChildrenInput {
  create: JobCategoryCreateWithoutChildrenInput!
  update: JobCategoryUpdateWithoutChildrenInput!
  where: JobCategoryWhereInput
}

input JobCategoryWhereInput {
  AND: [JobCategoryWhereInput!]
  NOT: [JobCategoryWhereInput!]
  OR: [JobCategoryWhereInput!]
  categoryId: BigIntFilter
  children: JobCategoryListRelationFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobs: JobListRelationFilter
  name: StringFilter
  parent: JobCategoryNullableRelationFilter
  parentId: BigIntNullableFilter
  workshops: WorkshopListRelationFilter
}

input JobCategoryWhereUniqueInput {
  AND: [JobCategoryWhereInput!]
  NOT: [JobCategoryWhereInput!]
  OR: [JobCategoryWhereInput!]
  categoryId: BigInt
  children: JobCategoryListRelationFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobs: JobListRelationFilter
  name: String
  parent: JobCategoryNullableRelationFilter
  parentId: BigIntNullableFilter
  workshops: WorkshopListRelationFilter
}

type JobCount {
  jobWorkshops: Int!
  serviceRequests: Int!
}

type JobCountAggregate {
  _all: Int!
  categoryId: Int!
  description: Int!
  isPopular: Int!
  jobId: Int!
  name: Int!
}

input JobCreateInput {
  description: String
  isPopular: Boolean
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  name: String
}

input JobCreateNestedManyWithoutServiceRequestsInput {
  connect: [JobWhereUniqueInput!]
}

input JobCreateNestedOneWithoutJobWorkshopsInput {
  connect: JobWhereUniqueInput
}

input JobCreateOrConnectWithoutJobWorkshopsInput {
  create: JobCreateWithoutJobWorkshopsInput!
  where: JobWhereUniqueInput!
}

input JobCreateOrConnectWithoutServiceRequestsInput {
  create: JobCreateWithoutServiceRequestsInput!
  where: JobWhereUniqueInput!
}

input JobCreateWithoutJobWorkshopsInput {
  description: String
  isPopular: Boolean
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  name: String
}

input JobCreateWithoutServiceRequestsInput {
  description: String
  isPopular: Boolean
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  name: String
}

input JobListRelationFilter {
  every: JobWhereInput
  none: JobWhereInput
  some: JobWhereInput
}

type JobMaxAggregate {
  categoryId: BigInt
  description: String
  isPopular: Boolean
  jobId: BigInt
  name: String
}

type JobMinAggregate {
  categoryId: BigInt
  description: String
  isPopular: Boolean
  jobId: BigInt
  name: String
}

input JobOrderByRelationAggregateInput {
  _count: SortOrder
}

input JobOrderByWithRelationInput {
  categoryId: SortOrder
  description: SortOrderInput
  isPopular: SortOrder
  jobCategory: JobCategoryOrderByWithRelationInput
  jobId: SortOrder
  jobWorkshops: WorkshopJobOrderByRelationAggregateInput
  name: SortOrderInput
  serviceRequests: ServiceRequestOrderByRelationAggregateInput
}

input JobRelationFilter {
  is: JobWhereInput
  isNot: JobWhereInput
}

enum JobScalarFieldEnum {
  categoryId
  description
  isPopular
  jobId
  name
}

input JobScalarWhereInput {
  AND: [JobScalarWhereInput!]
  NOT: [JobScalarWhereInput!]
  OR: [JobScalarWhereInput!]
  categoryId: BigIntFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobId: BigIntFilter
  name: StringNullableFilter
}

type JobSumAggregate {
  categoryId: BigInt
  jobId: BigInt
}

input JobUpdateInput {
  description: String
  isPopular: Boolean
  name: String
}

input JobUpdateManyMutationInput {
  description: String
  isPopular: Boolean
  name: String
}

input JobUpdateManyWithWhereWithoutServiceRequestsInput {
  data: JobUpdateManyMutationInput!
  where: JobScalarWhereInput!
}

input JobUpdateManyWithoutServiceRequestsNestedInput {
  connect: [JobWhereUniqueInput!]
  connectOrCreate: [JobCreateOrConnectWithoutServiceRequestsInput!]
  create: [JobCreateWithoutServiceRequestsInput!]
  delete: [JobWhereUniqueInput!]
  deleteMany: [JobScalarWhereInput!]
  disconnect: [JobWhereUniqueInput!]
  set: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutServiceRequestsInput!]
  updateMany: [JobUpdateManyWithWhereWithoutServiceRequestsInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutServiceRequestsInput!]
}

input JobUpdateOneRequiredWithoutJobWorkshopsNestedInput {
  connect: JobWhereUniqueInput
  connectOrCreate: JobCreateOrConnectWithoutJobWorkshopsInput
  create: JobCreateWithoutJobWorkshopsInput
  update: JobUpdateToOneWithWhereWithoutJobWorkshopsInput
  upsert: JobUpsertWithoutJobWorkshopsInput
}

input JobUpdateToOneWithWhereWithoutJobWorkshopsInput {
  data: JobUpdateWithoutJobWorkshopsInput!
  where: JobWhereInput
}

input JobUpdateWithWhereUniqueWithoutServiceRequestsInput {
  data: JobUpdateWithoutServiceRequestsInput!
  where: JobWhereUniqueInput!
}

input JobUpdateWithoutJobWorkshopsInput {
  description: String
  isPopular: Boolean
  name: String
}

input JobUpdateWithoutServiceRequestsInput {
  description: String
  isPopular: Boolean
  name: String
}

input JobUpsertWithWhereUniqueWithoutServiceRequestsInput {
  create: JobCreateWithoutServiceRequestsInput!
  update: JobUpdateWithoutServiceRequestsInput!
  where: JobWhereUniqueInput!
}

input JobUpsertWithoutJobWorkshopsInput {
  create: JobCreateWithoutJobWorkshopsInput!
  update: JobUpdateWithoutJobWorkshopsInput!
  where: JobWhereInput
}

input JobWhereInput {
  AND: [JobWhereInput!]
  NOT: [JobWhereInput!]
  OR: [JobWhereInput!]
  categoryId: BigIntFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobCategory: JobCategoryRelationFilter
  jobId: BigIntFilter
  jobWorkshops: WorkshopJobListRelationFilter
  name: StringNullableFilter
  serviceRequests: ServiceRequestListRelationFilter
}

input JobWhereUniqueInput {
  AND: [JobWhereInput!]
  NOT: [JobWhereInput!]
  OR: [JobWhereInput!]
  categoryId: BigIntFilter
  description: StringNullableFilter
  isPopular: BoolFilter
  jobCategory: JobCategoryRelationFilter
  jobId: BigInt
  jobWorkshops: WorkshopJobListRelationFilter
  name: String
  serviceRequests: ServiceRequestListRelationFilter
}

"""Note: Do not allow receiver to update this model apart from status."""
type JoinWorkshopRequest {
  createdAt: DateTime!
  createdBy: BigInt
  employee: Employee!
  employeeId: BigInt!
  joinWorkshopRequestId: BigInt!
  message: String
  receiverId: BigInt!
  resolvedAt: DateTime

  """Note: Optional because field defaults to PENDING"""
  status: JoinWorkshopRequestStatus!
  updatedAt: DateTime
  updatedBy: BigInt
  user: User!
  workshop: Workshop!
  workshopId: BigInt!
}

type JoinWorkshopRequestAvgAggregate {
  createdBy: Float
  employeeId: Float
  joinWorkshopRequestId: Float
  receiverId: Float
  updatedBy: Float
  workshopId: Float
}

type JoinWorkshopRequestCountAggregate {
  _all: Int!
  createdAt: Int!
  createdBy: Int!
  employeeId: Int!
  joinWorkshopRequestId: Int!
  message: Int!
  receiverId: Int!
  resolvedAt: Int!
  status: Int!
  updatedAt: Int!
  updatedBy: Int!
  workshopId: Int!
}

input JoinWorkshopRequestCreateInput {
  employee: EmployeeCreateNestedOneWithoutJoinWorkshopRequestsInput!
  joinWorkshopRequestId: BigInt
  message: String
  user: UserCreateNestedOneWithoutJoinWorkshopRequestsInput!
  workshop: WorkshopCreateNestedOneWithoutJoinWorkshopRequestsInput!
}

input JoinWorkshopRequestCreateManyEmployeeInput {
  joinWorkshopRequestId: BigInt
  message: String
  receiverId: BigInt!
  workshopId: BigInt!
}

input JoinWorkshopRequestCreateManyEmployeeInputEnvelope {
  data: [JoinWorkshopRequestCreateManyEmployeeInput!]!
  skipDuplicates: Boolean
}

input JoinWorkshopRequestCreateNestedManyWithoutEmployeeInput {
  create: [JoinWorkshopRequestCreateWithoutEmployeeInput!]
  createMany: JoinWorkshopRequestCreateManyEmployeeInputEnvelope
}

input JoinWorkshopRequestCreateOrConnectWithoutEmployeeInput {
  create: JoinWorkshopRequestCreateWithoutEmployeeInput!
  where: JoinWorkshopRequestWhereUniqueInput!
}

input JoinWorkshopRequestCreateWithoutEmployeeInput {
  joinWorkshopRequestId: BigInt
  message: String
  user: UserCreateNestedOneWithoutJoinWorkshopRequestsInput!
  workshop: WorkshopCreateNestedOneWithoutJoinWorkshopRequestsInput!
}

input JoinWorkshopRequestListRelationFilter {
  every: JoinWorkshopRequestWhereInput
  none: JoinWorkshopRequestWhereInput
  some: JoinWorkshopRequestWhereInput
}

type JoinWorkshopRequestMaxAggregate {
  createdAt: DateTime
  createdBy: BigInt
  employeeId: BigInt
  joinWorkshopRequestId: BigInt
  message: String
  receiverId: BigInt
  resolvedAt: DateTime
  status: JoinWorkshopRequestStatus
  updatedAt: DateTime
  updatedBy: BigInt
  workshopId: BigInt
}

type JoinWorkshopRequestMinAggregate {
  createdAt: DateTime
  createdBy: BigInt
  employeeId: BigInt
  joinWorkshopRequestId: BigInt
  message: String
  receiverId: BigInt
  resolvedAt: DateTime
  status: JoinWorkshopRequestStatus
  updatedAt: DateTime
  updatedBy: BigInt
  workshopId: BigInt
}

input JoinWorkshopRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input JoinWorkshopRequestOrderByWithRelationInput {
  employee: EmployeeOrderByWithRelationInput
  employeeId: SortOrder
  joinWorkshopRequestId: SortOrder
  message: SortOrderInput
  receiverId: SortOrder
  status: SortOrder
  user: UserOrderByWithRelationInput
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
}

enum JoinWorkshopRequestScalarFieldEnum {
  createdAt
  createdBy
  employeeId
  joinWorkshopRequestId
  message
  receiverId
  resolvedAt
  status
  updatedAt
  updatedBy
  workshopId
}

input JoinWorkshopRequestScalarWhereInput {
  AND: [JoinWorkshopRequestScalarWhereInput!]
  NOT: [JoinWorkshopRequestScalarWhereInput!]
  OR: [JoinWorkshopRequestScalarWhereInput!]
  employeeId: BigIntFilter
  joinWorkshopRequestId: BigIntFilter
  message: StringNullableFilter
  receiverId: BigIntFilter
  status: EnumJoinWorkshopRequestStatusFilter
  workshopId: BigIntFilter
}

enum JoinWorkshopRequestStatus {
  ACCEPTED
  PENDING
  REJECTED
}

type JoinWorkshopRequestSumAggregate {
  createdBy: BigInt
  employeeId: BigInt
  joinWorkshopRequestId: BigInt
  receiverId: BigInt
  updatedBy: BigInt
  workshopId: BigInt
}

input JoinWorkshopRequestUpdateInput {
  joinWorkshopRequestId: BigInt
  message: String
  status: JoinWorkshopRequestStatus
}

input JoinWorkshopRequestUpdateManyMutationInput {
  joinWorkshopRequestId: BigInt
  message: String
  status: JoinWorkshopRequestStatus
}

input JoinWorkshopRequestUpdateManyWithWhereWithoutEmployeeInput {
  data: JoinWorkshopRequestUpdateManyMutationInput!
  where: JoinWorkshopRequestScalarWhereInput!
}

input JoinWorkshopRequestUpdateManyWithoutEmployeeNestedInput {
  connect: [JoinWorkshopRequestWhereUniqueInput!]
  connectOrCreate: [JoinWorkshopRequestCreateOrConnectWithoutEmployeeInput!]
  create: [JoinWorkshopRequestCreateWithoutEmployeeInput!]
  createMany: JoinWorkshopRequestCreateManyEmployeeInputEnvelope
  delete: [JoinWorkshopRequestWhereUniqueInput!]
  deleteMany: [JoinWorkshopRequestScalarWhereInput!]
  disconnect: [JoinWorkshopRequestWhereUniqueInput!]
  set: [JoinWorkshopRequestWhereUniqueInput!]
  update: [JoinWorkshopRequestUpdateWithWhereUniqueWithoutEmployeeInput!]
  updateMany: [JoinWorkshopRequestUpdateManyWithWhereWithoutEmployeeInput!]
  upsert: [JoinWorkshopRequestUpsertWithWhereUniqueWithoutEmployeeInput!]
}

input JoinWorkshopRequestUpdateWithWhereUniqueWithoutEmployeeInput {
  data: JoinWorkshopRequestUpdateWithoutEmployeeInput!
  where: JoinWorkshopRequestWhereUniqueInput!
}

input JoinWorkshopRequestUpdateWithoutEmployeeInput {
  joinWorkshopRequestId: BigInt
  message: String
  status: JoinWorkshopRequestStatus
}

input JoinWorkshopRequestUpsertWithWhereUniqueWithoutEmployeeInput {
  create: JoinWorkshopRequestCreateWithoutEmployeeInput!
  update: JoinWorkshopRequestUpdateWithoutEmployeeInput!
  where: JoinWorkshopRequestWhereUniqueInput!
}

input JoinWorkshopRequestWhereInput {
  AND: [JoinWorkshopRequestWhereInput!]
  NOT: [JoinWorkshopRequestWhereInput!]
  OR: [JoinWorkshopRequestWhereInput!]
  employee: EmployeeRelationFilter
  employeeId: BigIntFilter
  joinWorkshopRequestId: BigIntFilter
  message: StringNullableFilter
  receiverId: BigIntFilter
  status: EnumJoinWorkshopRequestStatusFilter
  user: UserRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input JoinWorkshopRequestWhereUniqueInput {
  AND: [JoinWorkshopRequestWhereInput!]
  NOT: [JoinWorkshopRequestWhereInput!]
  OR: [JoinWorkshopRequestWhereInput!]
  employee: EmployeeRelationFilter
  employeeId: BigIntFilter
  joinWorkshopRequestId: BigInt
  message: StringNullableFilter
  receiverId: BigIntFilter
  status: EnumJoinWorkshopRequestStatusFilter
  user: UserRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input JsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: String
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input LoginEmployeeInput {
  login: String!
  password: String!
  workshopId: BigInt!
}

type LoginEmployeeResponse {
  accessToken: String!
  employee: Employee!
  refreshToken: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

type LoginUserResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Mutation {
  acceptDeviceRegistration(data: AcceptWorkshopDeviceInput!, where: WorkshopWhereUniqueInput!): WorkshopDevice!
  acceptJoinWorkshopRequest(joinWorkshopRequestId: BigInt!): Boolean!
  acceptReview(reviewId: BigInt!): Review!
  acceptReviewResponse(where: ReviewResponseWhereUniqueInput!): Boolean!
  acceptServiceRequest(data: AcceptServiceRequestInput!): ServiceRequest!
  assignPermissionsToEmployee(employeeId: BigInt!, permissionIds: [BigInt!]!): Boolean!
  cancelTask(taskId: BigInt!): Task!
  changeEmployeePassword(changeEmployeePasswordInput: ChangePasswordInput!): Boolean!
  changeUserPassword(data: ChangePasswordInput!, where: UserWhereUniqueInput!): Boolean!
  closeService(data: CloseOneServiceInput!, where: ServiceWhereUniqueInput!): Service!
  completeTask(taskId: BigInt!): Task!
  createAddressForWorkshop(data: AddressCreateInput!, workshopId: BigInt!): Address!
  createAdmin(data: UserCreateInput!): User!
  createCustomer(data: CustomerCreateInput!): Customer!
  createEmployee(data: EmployeeCreateInput!): Employee!
  createEmployeePermission(data: EmployeePermissionCreateInput!): EmployeePermission!
  createJob(data: JobCreateInput!): Job!
  createJobCategory(data: JobCategoryCreateInput!): JobCategory!
  createReview(data: ReviewCreateInput!): Review!
  createReviewResponse(data: ReviewResponseCreateInput!): ReviewResponse!
  createService(data: ServiceCreateInput!): Service!
  createServiceRequestAsGuest(data: CreateServiceRequestAsGuestInput!): ServiceRequest!
  createServiceRequestAsUser(data: ServiceRequestCreateInput!): ServiceRequest!
  createSessionData(sessionDataCreateInput: SessionDataCreateInput!): SessionData!
  createTask(data: TaskCreateInput!): Task!
  createVehicleBrand(data: VehicleBrandCreateInput!): VehicleBrand!
  createVehicleDetails(data: VehicleDetailsCreateInput!): VehicleDetails!
  createVehicleForCustomer(data: VehicleCreateInput!): Vehicle!
  createVehicleForUser(data: CreateVehicleForUserInput!): Vehicle!
  createVehicleModel(data: VehicleModelCreateInput!): VehicleModel!
  createWorkshopDetails(data: WorkshopDetailsCreateInput!): WorkshopDetails!
  deleteAddress(where: AddressWhereUniqueInput!): Boolean!
  deleteCustomer(customerId: BigInt!): Boolean!
  deleteEmployee(employeeId: BigInt!): Boolean!
  deleteEmployeePermission(employeePermissionId: BigInt!): Boolean!
  deleteGuest(where: GuestWhereUniqueInput!): Boolean!
  deleteJob(where: JobWhereUniqueInput!): Boolean!
  deleteJobCategory(where: JobCategoryWhereUniqueInput!): Boolean!
  deleteJoinWorkshopRequest(where: JoinWorkshopRequestWhereUniqueInput!): Boolean!
  deleteReview(where: ReviewWhereUniqueInput!): Boolean!
  deleteReviewResponse(where: ReviewResponseWhereUniqueInput!): Boolean!
  deleteService(where: ServiceWhereUniqueInput!): Boolean!
  deleteServiceRequest(where: ServiceRequestWhereUniqueInput!): Boolean!
  deleteTask(where: TaskWhereUniqueInput!): Boolean!
  deleteVehicle(where: VehicleWhereUniqueInput!): Boolean!
  deleteVehicleBrand(where: VehicleBrandWhereUniqueInput!): Boolean!
  deleteVehicleDetails(where: VehicleDetailsWhereUniqueInput!): Boolean!
  deleteVehicleModel(where: VehicleModelWhereUniqueInput!): Boolean!
  deleteWorkshop(where: WorkshopWhereUniqueInput!): Boolean!
  deleteWorkshopDetails(where: WorkshopDetailsWhereUniqueInput!): Boolean!
  disableEmployee(employeeId: BigInt!): Boolean!
  editReview(data: EditReviewInput!, where: ReviewWhereUniqueInput!): Review!
  editReviewResponse(data: EditReviewResponseInput!, where: ReviewResponseWhereUniqueInput!): ReviewResponse!
  editTask(data: EditOneTaskInput!, where: TaskWhereUniqueInput!): Task!
  enableEmployee(employeeId: BigInt!): Boolean!
  generateDeviceOTP(workshopId: BigInt!): String!
  hideReviewResponse(where: ReviewResponseWhereUniqueInput!): Boolean!
  loginEmployeeFromDevice(loginEmployeeInput: LoginEmployeeInput!): LoginEmployeeResponse!
  loginEmployeeFromUser(loginEmployeeInput: LoginEmployeeInput!): LoginEmployeeResponse!
  loginUser(loginUserInput: LoginUserInput!): LoginUserResponse!
  logoutAllUserSessions(userId: BigInt): Boolean!
  logoutAnotherEmployee(employeeId: BigInt!): Boolean!
  logoutEmployee(refreshToken: String!): Boolean!
  logoutUser(refreshToken: String!): Boolean!
  refreshEmployeeTokens(refreshToken: String!): LoginEmployeeResponse!
  refreshUserTokens(refreshToken: String!): LoginUserResponse!
  registerUser(data: UserCreateInput!): User!
  registerWorkshop(data: RegisterWorkshopInput!): RegisterWorkshopResponse!
  rejectJoinWorkshopRequest(joinWorkshopRequestId: BigInt!): Boolean!
  rejectReview(reviewId: BigInt!): Review!
  rejectReviewResponse(where: ReviewResponseWhereUniqueInput!): Boolean!
  rejectServiceRequest(serviceRequestId: BigInt!): ServiceRequest!
  removeDevice(deviceId: BigInt!): Boolean!
  removePermissionsFromEmployee(employeeId: BigInt!, permissionIds: [BigInt!]!): Boolean!
  removeUserAccount(password: String!, userId: BigInt): Boolean!
  renameSessionData(data: RenameSessionDataInput!, where: SessionDataWhereUniqueInput!): SessionData!
  requestDeviceRegistration(data: RequestDeviceRegistrationInput!): Boolean!
  sendJoinWorkshopRequest(data: JoinWorkshopRequestCreateInput!): JoinWorkshopRequest!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  updateEmployee(data: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee!
  updateEmployeePermission(data: EmployeePermissionUpdateInput!, where: EmployeePermissionWhereUniqueInput!): EmployeePermission!
  updateGuest(data: GuestUpdateInput!, where: GuestWhereUniqueInput!): Guest!
  updateJob(data: JobUpdateInput!, where: JobWhereUniqueInput!): Job!
  updateJobCategory(data: JobCategoryUpdateInput!, where: JobCategoryWhereUniqueInput!): JobCategory!
  updateJoinWorkshopRequest(data: JoinWorkshopRequestUpdateInput!, where: JoinWorkshopRequestWhereUniqueInput!): JoinWorkshopRequest!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review!
  updateReviewResponse(data: ReviewResponseUpdateInput!, where: ReviewResponseWhereUniqueInput!): ReviewResponse!
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service!
  updateServiceRequest(data: ServiceRequestUpdateInput!, where: ServiceRequestWhereUniqueInput!): ServiceRequest!
  updateSessionData(data: SessionDataUpdateInput!, where: SessionDataWhereUniqueInput!): SessionData!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  updateVehicle(data: VehicleUpdateInput!, where: VehicleWhereUniqueInput!): Vehicle!
  updateVehicleBrand(data: VehicleBrandUpdateInput!, where: VehicleBrandWhereUniqueInput!): VehicleBrand!
  updateVehicleDetails(data: VehicleDetailsUpdateInput!, where: VehicleDetailsWhereUniqueInput!): VehicleDetails!
  updateVehicleModel(data: VehicleModelUpdateInput!, where: VehicleModelWhereUniqueInput!): VehicleModel!
  updateWorkshop(data: WorkshopUpdateInput!, where: WorkshopWhereUniqueInput!): Workshop!
  updateWorkshopDetails(data: WorkshopDetailsUpdateInput!, where: WorkshopDetailsWhereUniqueInput!): WorkshopDetails!
}

input NestedBigIntFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntFilter
  notIn: [String!]
}

input NestedBigIntNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedBigIntNullableFilter
  notIn: [String!]
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDecimalFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalFilter
  notIn: [Decimal!]
}

input NestedDecimalNullableFilter {
  equals: Decimal
  gt: Decimal
  gte: Decimal
  in: [Decimal!]
  lt: Decimal
  lte: Decimal
  not: NestedDecimalNullableFilter
  notIn: [Decimal!]
}

input NestedEnumBodyColorNullableFilter {
  equals: BodyColor
  in: [BodyColor!]
  not: NestedEnumBodyColorNullableFilter
  notIn: [BodyColor!]
}

input NestedEnumCustomerCreationSourceFilter {
  equals: CustomerCreationSource
  in: [CustomerCreationSource!]
  not: NestedEnumCustomerCreationSourceFilter
  notIn: [CustomerCreationSource!]
}

input NestedEnumEmployeeStatusFilter {
  equals: EmployeeStatus
  in: [EmployeeStatus!]
  not: NestedEnumEmployeeStatusFilter
  notIn: [EmployeeStatus!]
}

input NestedEnumFuelTypeNullableFilter {
  equals: FuelType
  in: [FuelType!]
  not: NestedEnumFuelTypeNullableFilter
  notIn: [FuelType!]
}

input NestedEnumJoinWorkshopRequestStatusFilter {
  equals: JoinWorkshopRequestStatus
  in: [JoinWorkshopRequestStatus!]
  not: NestedEnumJoinWorkshopRequestStatusFilter
  notIn: [JoinWorkshopRequestStatus!]
}

input NestedEnumReviewResponseStatusFilter {
  equals: ReviewResponseStatus
  in: [ReviewResponseStatus!]
  not: NestedEnumReviewResponseStatusFilter
  notIn: [ReviewResponseStatus!]
}

input NestedEnumReviewStatusFilter {
  equals: ReviewStatus
  in: [ReviewStatus!]
  not: NestedEnumReviewStatusFilter
  notIn: [ReviewStatus!]
}

input NestedEnumServiceRequestStatusNullableFilter {
  equals: ServiceRequestStatus
  in: [ServiceRequestStatus!]
  not: NestedEnumServiceRequestStatusNullableFilter
  notIn: [ServiceRequestStatus!]
}

input NestedEnumServiceStatusNullableFilter {
  equals: ServiceStatus
  in: [ServiceStatus!]
  not: NestedEnumServiceStatusNullableFilter
  notIn: [ServiceStatus!]
}

input NestedEnumTaskStatusNullableFilter {
  equals: TaskStatus
  in: [TaskStatus!]
  not: NestedEnumTaskStatusNullableFilter
  notIn: [TaskStatus!]
}

input NestedEnumUserReportReportedEntityTypeFilter {
  equals: UserReportReportedEntityType
  in: [UserReportReportedEntityType!]
  not: NestedEnumUserReportReportedEntityTypeFilter
  notIn: [UserReportReportedEntityType!]
}

input NestedEnumUserReportStatusFilter {
  equals: UserReportStatus
  in: [UserReportStatus!]
  not: NestedEnumUserReportStatusFilter
  notIn: [UserReportStatus!]
}

input NestedEnumUserReportTypeFilter {
  equals: UserReportType
  in: [UserReportType!]
  not: NestedEnumUserReportTypeFilter
  notIn: [UserReportType!]
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: NestedEnumUserRoleFilter
  notIn: [UserRole!]
}

input NestedEnumUserStatusNullableFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusNullableFilter
  notIn: [UserStatus!]
}

input NestedEnumWorkshopDetailsStatusNullableFilter {
  equals: WorkshopDetailsStatus
  in: [WorkshopDetailsStatus!]
  not: NestedEnumWorkshopDetailsStatusNullableFilter
  notIn: [WorkshopDetailsStatus!]
}

input NestedEnumWorkshopDeviceStatusNullableFilter {
  equals: WorkshopDeviceStatus
  in: [WorkshopDeviceStatus!]
  not: NestedEnumWorkshopDeviceStatusNullableFilter
  notIn: [WorkshopDeviceStatus!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

enum NullsOrder {
  first
  last
}

type Query {
  address(where: AddressWhereUniqueInput!): Address!
  addresses(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByWithRelationInput!], skip: Int, take: Int, where: AddressWhereInput): [Address!]!
  cancelServiceRequest(serviceRequestId: BigInt!): [ServiceRequest!]!
  customer(where: CustomerWhereUniqueInput!): Customer!
  customers(cursor: CustomerWhereUniqueInput, distinct: [CustomerScalarFieldEnum!], orderBy: [CustomerOrderByWithRelationInput!], skip: Int, take: Int, where: CustomerWhereInput): [Customer!]!
  employee(where: EmployeeWhereUniqueInput!): Employee!
  employeePermission(where: EmployeePermissionWhereUniqueInput!): EmployeePermission!
  employeePermissions(cursor: EmployeePermissionWhereUniqueInput, distinct: [EmployeePermissionScalarFieldEnum!], orderBy: [EmployeePermissionOrderByWithRelationInput!], skip: Int, take: Int, where: EmployeePermissionWhereInput): [EmployeePermission!]!
  employees(cursor: EmployeeWhereUniqueInput, distinct: [EmployeeScalarFieldEnum!], orderBy: [EmployeeOrderByWithRelationInput!], skip: Int, take: Int, where: EmployeeWhereInput): [Employee!]!
  findUserByEmail(email: String!): User!
  findUserById(userId: BigInt!): User!
  findUsers(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  guest(where: GuestWhereUniqueInput!): Guest!
  guests(cursor: GuestWhereUniqueInput, distinct: [GuestScalarFieldEnum!], orderBy: [GuestOrderByWithRelationInput!], skip: Int, take: Int, where: GuestWhereInput): [Guest!]!
  job(where: JobWhereUniqueInput!): Job!
  jobCategories(cursor: JobCategoryWhereUniqueInput, distinct: [JobCategoryScalarFieldEnum!], orderBy: [JobCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: JobCategoryWhereInput): [JobCategory!]!
  jobCategory(where: JobCategoryWhereUniqueInput!): JobCategory!
  jobs(cursor: JobWhereUniqueInput, distinct: [JobScalarFieldEnum!], orderBy: [JobOrderByWithRelationInput!], skip: Int, take: Int, where: JobWhereInput): [Job!]!
  joinWorkshopRequest(where: JoinWorkshopRequestWhereUniqueInput!): JoinWorkshopRequest!
  joinWorkshopRequests(cursor: JoinWorkshopRequestWhereUniqueInput, distinct: [JoinWorkshopRequestScalarFieldEnum!], orderBy: [JoinWorkshopRequestOrderByWithRelationInput!], skip: Int, take: Int, where: JoinWorkshopRequestWhereInput): [JoinWorkshopRequest!]!
  review(where: ReviewWhereUniqueInput!): Review!
  reviewResponse(where: ReviewResponseWhereUniqueInput!): ReviewResponse!
  reviewResponses(cursor: ReviewResponseWhereUniqueInput, distinct: [ReviewResponseScalarFieldEnum!], orderBy: [ReviewResponseOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewResponseWhereInput): [ReviewResponse!]!
  reviews(cursor: ReviewWhereUniqueInput, distinct: [ReviewScalarFieldEnum!], orderBy: [ReviewOrderByWithRelationInput!], skip: Int, take: Int, where: ReviewWhereInput): [Review!]!
  service(where: ServiceWhereUniqueInput!): Service!
  serviceRequest(where: ServiceRequestWhereUniqueInput!): ServiceRequest!
  serviceRequests(cursor: ServiceRequestWhereUniqueInput, distinct: [ServiceRequestScalarFieldEnum!], orderBy: [ServiceRequestOrderByWithRelationInput!], skip: Int, take: Int, where: ServiceRequestWhereInput): [ServiceRequest!]!
  services(cursor: ServiceWhereUniqueInput, distinct: [ServiceScalarFieldEnum!], orderBy: [ServiceOrderByWithRelationInput!], skip: Int, take: Int, where: ServiceWhereInput): [Service!]!
  sessionData(where: SessionDataWhereUniqueInput!): SessionData!
  sessionDatas(cursor: SessionDataWhereUniqueInput, distinct: [SessionDataScalarFieldEnum!], orderBy: [SessionDataOrderByWithRelationInput!], skip: Int, take: Int, where: SessionDataWhereInput): [SessionData!]!
  task(where: TaskWhereUniqueInput!): Task!
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  vehicle(where: VehicleWhereUniqueInput!): Vehicle!
  vehicleBrand(where: VehicleBrandWhereUniqueInput!): VehicleBrand!
  vehicleBrands(cursor: VehicleBrandWhereUniqueInput, distinct: [VehicleBrandScalarFieldEnum!], orderBy: [VehicleBrandOrderByWithRelationInput!], skip: Int, take: Int, where: VehicleBrandWhereInput): [VehicleBrand!]!
  vehicleDetails(where: VehicleDetailsWhereUniqueInput!): VehicleDetails!
  vehicleDetailsList(cursor: VehicleDetailsWhereUniqueInput, distinct: [VehicleDetailsScalarFieldEnum!], orderBy: [VehicleDetailsOrderByWithRelationInput!], skip: Int, take: Int, where: VehicleDetailsWhereInput): [VehicleDetails!]!
  vehicleModel(where: VehicleModelWhereUniqueInput!): VehicleModel!
  vehicleModels(cursor: VehicleModelWhereUniqueInput, distinct: [VehicleModelScalarFieldEnum!], orderBy: [VehicleModelOrderByWithRelationInput!], skip: Int, take: Int, where: VehicleModelWhereInput): [VehicleModel!]!
  vehicles(cursor: VehicleWhereUniqueInput, distinct: [VehicleScalarFieldEnum!], orderBy: [VehicleOrderByWithRelationInput!], skip: Int, take: Int, where: VehicleWhereInput): [Vehicle!]!
  workshop(where: WorkshopWhereUniqueInput!): Workshop!
  workshopDetails(where: WorkshopDetailsWhereUniqueInput!): WorkshopDetails!
  workshopDetailsList(cursor: WorkshopDetailsWhereUniqueInput, distinct: [WorkshopDetailsScalarFieldEnum!], orderBy: [WorkshopDetailsOrderByWithRelationInput!], skip: Int, take: Int, where: WorkshopDetailsWhereInput): [WorkshopDetails!]!
  workshops(cursor: WorkshopWhereUniqueInput, distinct: [WorkshopScalarFieldEnum!], orderBy: [WorkshopOrderByWithRelationInput!], skip: Int, take: Int, where: WorkshopWhereInput): [Workshop!]!
}

input RegisterWorkshopInput {
  ownerEmployee: EmployeeCreateInput!
  workshop: WorkshopCreateInput!
}

type RegisterWorkshopResponse {
  ownerEmployee: Employee!
  workshop: Workshop!
}

input RenameSessionDataInput {
  deviceInfo: String
  deviceName: String
}

input RequestDeviceRegistrationInput {
  code: String!
  deviceName: String!
  deviceSerialNumber: String!
}

type Review {
  _count: ReviewCount!
  createdAt: DateTime!
  originalRating: Decimal
  originalReviewText: String

  """Note: Optional because field defaults to 0.00"""
  rating: Decimal!
  responses: [ReviewResponse!]
  reviewId: BigInt!
  reviewResponses: [ReviewResponse!]
  reviewText: String!

  """Note: Optional because field defaults to PENDING"""
  status: ReviewStatus!
  updatedAt: DateTime
  user: User!
  userId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ReviewAvgAggregate {
  originalRating: Decimal
  rating: Decimal
  reviewId: Float
  userId: Float
  workshopId: Float
}

type ReviewCount {
  reviewResponses: Int!
}

type ReviewCountAggregate {
  _all: Int!
  createdAt: Int!
  originalRating: Int!
  originalReviewText: Int!
  rating: Int!
  reviewId: Int!
  reviewText: Int!
  status: Int!
  updatedAt: Int!
  userId: Int!
  workshopId: Int!
}

input ReviewCreateInput {
  rating: Decimal
  reviewText: String!
  status: ReviewStatus
  user: UserCreateNestedOneWithoutReviewsInput!
  workshop: WorkshopCreateNestedOneWithoutReviewsInput!
}

input ReviewCreateNestedOneWithoutReviewResponsesInput {
  connect: ReviewWhereUniqueInput
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

type ReviewMaxAggregate {
  createdAt: DateTime
  originalRating: Decimal
  originalReviewText: String
  rating: Decimal
  reviewId: BigInt
  reviewText: String
  status: ReviewStatus
  updatedAt: DateTime
  userId: BigInt
  workshopId: BigInt
}

type ReviewMinAggregate {
  createdAt: DateTime
  originalRating: Decimal
  originalReviewText: String
  rating: Decimal
  reviewId: BigInt
  reviewText: String
  status: ReviewStatus
  updatedAt: DateTime
  userId: BigInt
  workshopId: BigInt
}

input ReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewOrderByWithRelationInput {
  originalRating: SortOrderInput
  originalReviewText: SortOrderInput
  rating: SortOrder
  reviewId: SortOrder
  reviewResponses: ReviewResponseOrderByRelationAggregateInput
  reviewText: SortOrder
  status: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
}

input ReviewRelationFilter {
  is: ReviewWhereInput
  isNot: ReviewWhereInput
}

type ReviewResponse {
  _count: ReviewResponseCount!
  childrenResponses: [ReviewResponse!]
  createdAt: DateTime!
  originalResponseText: String
  parentResponse: ReviewResponse
  parentResponseId: BigInt
  responseText: String!
  review: Review!
  reviewId: BigInt!
  reviewResponseId: BigInt!

  """Note: Optional because field defaults to pending"""
  status: ReviewResponseStatus!
  updatedAt: DateTime
  user: User!
  userId: BigInt!
}

type ReviewResponseAvgAggregate {
  parentResponseId: Float
  reviewId: Float
  reviewResponseId: Float
  userId: Float
}

type ReviewResponseCount {
  childrenResponses: Int!
}

type ReviewResponseCountAggregate {
  _all: Int!
  createdAt: Int!
  originalResponseText: Int!
  parentResponseId: Int!
  responseText: Int!
  reviewId: Int!
  reviewResponseId: Int!
  status: Int!
  updatedAt: Int!
  userId: Int!
}

input ReviewResponseCreateInput {
  parentResponse: ReviewResponseCreateNestedOneWithoutChildrenResponsesInput
  responseText: String!
  review: ReviewCreateNestedOneWithoutReviewResponsesInput!
  user: UserCreateNestedOneWithoutReviewResponsesInput!
}

input ReviewResponseCreateNestedOneWithoutChildrenResponsesInput {
  connect: ReviewResponseWhereUniqueInput
}

input ReviewResponseListRelationFilter {
  every: ReviewResponseWhereInput
  none: ReviewResponseWhereInput
  some: ReviewResponseWhereInput
}

type ReviewResponseMaxAggregate {
  createdAt: DateTime
  originalResponseText: String
  parentResponseId: BigInt
  responseText: String
  reviewId: BigInt
  reviewResponseId: BigInt
  status: ReviewResponseStatus
  updatedAt: DateTime
  userId: BigInt
}

type ReviewResponseMinAggregate {
  createdAt: DateTime
  originalResponseText: String
  parentResponseId: BigInt
  responseText: String
  reviewId: BigInt
  reviewResponseId: BigInt
  status: ReviewResponseStatus
  updatedAt: DateTime
  userId: BigInt
}

input ReviewResponseNullableRelationFilter {
  is: ReviewResponseWhereInput
  isNot: ReviewResponseWhereInput
}

input ReviewResponseOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewResponseOrderByWithRelationInput {
  childrenResponses: ReviewResponseOrderByRelationAggregateInput
  originalResponseText: SortOrderInput
  parentResponse: ReviewResponseOrderByWithRelationInput
  parentResponseId: SortOrderInput
  responseText: SortOrder
  review: ReviewOrderByWithRelationInput
  reviewId: SortOrder
  reviewResponseId: SortOrder
  status: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ReviewResponseScalarFieldEnum {
  createdAt
  originalResponseText
  parentResponseId
  responseText
  reviewId
  reviewResponseId
  status
  updatedAt
  userId
}

enum ReviewResponseStatus {
  ACCEPTED
  HIDDEN
  PENDING
  REJECTED
}

type ReviewResponseSumAggregate {
  parentResponseId: BigInt
  reviewId: BigInt
  reviewResponseId: BigInt
  userId: BigInt
}

input ReviewResponseUpdateInput {
  responseText: String
  status: ReviewResponseStatus
}

input ReviewResponseWhereInput {
  AND: [ReviewResponseWhereInput!]
  NOT: [ReviewResponseWhereInput!]
  OR: [ReviewResponseWhereInput!]
  childrenResponses: ReviewResponseListRelationFilter
  originalResponseText: StringNullableFilter
  parentResponse: ReviewResponseNullableRelationFilter
  parentResponseId: BigIntNullableFilter
  responseText: StringFilter
  review: ReviewRelationFilter
  reviewId: BigIntFilter
  reviewResponseId: BigIntFilter
  status: EnumReviewResponseStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
}

input ReviewResponseWhereUniqueInput {
  AND: [ReviewResponseWhereInput!]
  NOT: [ReviewResponseWhereInput!]
  OR: [ReviewResponseWhereInput!]
  childrenResponses: ReviewResponseListRelationFilter
  originalResponseText: StringNullableFilter
  parentResponse: ReviewResponseNullableRelationFilter
  parentResponseId: BigIntNullableFilter
  responseText: StringFilter
  review: ReviewRelationFilter
  reviewId: BigIntFilter
  reviewResponseId: BigInt
  status: EnumReviewResponseStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
}

enum ReviewScalarFieldEnum {
  createdAt
  originalRating
  originalReviewText
  rating
  reviewId
  reviewText
  status
  updatedAt
  userId
  workshopId
}

enum ReviewStatus {
  ACCEPTED
  HIDDEN
  PENDING
  REJECTED
}

type ReviewSumAggregate {
  originalRating: Decimal
  rating: Decimal
  reviewId: BigInt
  userId: BigInt
  workshopId: BigInt
}

input ReviewUpdateInput {
  rating: Decimal
  reviewText: String
  status: ReviewStatus
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  originalRating: DecimalNullableFilter
  originalReviewText: StringNullableFilter
  rating: DecimalFilter
  reviewId: BigIntFilter
  reviewResponses: ReviewResponseListRelationFilter
  reviewText: StringFilter
  status: EnumReviewStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input ReviewWhereUniqueInput {
  AND: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  originalRating: DecimalNullableFilter
  originalReviewText: StringNullableFilter
  rating: DecimalFilter
  reviewId: BigInt
  reviewResponses: ReviewResponseListRelationFilter
  reviewText: StringFilter
  status: EnumReviewStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

type Service {
  _count: ServiceCount!
  addedAt: DateTime!
  addedBy: BigInt
  customer: Customer!
  customerId: BigInt!
  deletedAt: DateTime
  description: String
  employee: Employee!
  employeeId: BigInt!

  """Note: Optional because field defaults to false"""
  payedOff: Boolean!

  """Note: Optional because field defaults to 0.00"""
  paymentAmount: Decimal!
  resolvedAt: DateTime
  resolvedBy: BigInt
  serviceDescription: String
  serviceEndDate: DateTime
  serviceId: BigInt!
  serviceRequest: ServiceRequest
  serviceRequestId: BigInt

  """Note: Optional because field defaults to now()"""
  serviceStartDate: DateTime!
  status: ServiceStatus
  tasks: [Task!]
  updatedAt: DateTime
  updatedBy: BigInt
  vehicle: Vehicle!
  vehicleId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ServiceAvgAggregate {
  addedBy: Float
  customerId: Float
  employeeId: Float
  paymentAmount: Decimal
  resolvedBy: Float
  serviceId: Float
  serviceRequestId: Float
  updatedBy: Float
  vehicleId: Float
  workshopId: Float
}

type ServiceCount {
  tasks: Int!
}

type ServiceCountAggregate {
  _all: Int!
  addedAt: Int!
  addedBy: Int!
  customerId: Int!
  deletedAt: Int!
  description: Int!
  employeeId: Int!
  payedOff: Int!
  paymentAmount: Int!
  resolvedAt: Int!
  resolvedBy: Int!
  serviceDescription: Int!
  serviceEndDate: Int!
  serviceId: Int!
  serviceRequestId: Int!
  serviceStartDate: Int!
  status: Int!
  updatedAt: Int!
  updatedBy: Int!
  vehicleId: Int!
  workshopId: Int!
}

input ServiceCreateInput {
  customer: CustomerCreateNestedOneWithoutServicesInput!
  description: String
  employee: EmployeeCreateNestedOneWithoutServicesInput!
  serviceDescription: String
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  tasks: TaskCreateNestedManyWithoutServiceInput
  vehicle: VehicleCreateNestedOneWithoutServicesInput!
  workshop: WorkshopCreateNestedOneWithoutServicesInput!
}

input ServiceCreateNestedManyWithoutCustomerInput {
  connect: [ServiceWhereUniqueInput!]
}

input ServiceCreateNestedOneWithoutTasksInput {
  connect: ServiceWhereUniqueInput
}

input ServiceListRelationFilter {
  every: ServiceWhereInput
  none: ServiceWhereInput
  some: ServiceWhereInput
}

type ServiceMaxAggregate {
  addedAt: DateTime
  addedBy: BigInt
  customerId: BigInt
  deletedAt: DateTime
  description: String
  employeeId: BigInt
  payedOff: Boolean
  paymentAmount: Decimal
  resolvedAt: DateTime
  resolvedBy: BigInt
  serviceDescription: String
  serviceEndDate: DateTime
  serviceId: BigInt
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServiceStatus
  updatedAt: DateTime
  updatedBy: BigInt
  vehicleId: BigInt
  workshopId: BigInt
}

type ServiceMinAggregate {
  addedAt: DateTime
  addedBy: BigInt
  customerId: BigInt
  deletedAt: DateTime
  description: String
  employeeId: BigInt
  payedOff: Boolean
  paymentAmount: Decimal
  resolvedAt: DateTime
  resolvedBy: BigInt
  serviceDescription: String
  serviceEndDate: DateTime
  serviceId: BigInt
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServiceStatus
  updatedAt: DateTime
  updatedBy: BigInt
  vehicleId: BigInt
  workshopId: BigInt
}

input ServiceNullableRelationFilter {
  is: ServiceWhereInput
  isNot: ServiceWhereInput
}

input ServiceOrderByRelationAggregateInput {
  _count: SortOrder
}

input ServiceOrderByWithRelationInput {
  customer: CustomerOrderByWithRelationInput
  customerId: SortOrder
  description: SortOrderInput
  employee: EmployeeOrderByWithRelationInput
  employeeId: SortOrder
  payedOff: SortOrder
  paymentAmount: SortOrder
  serviceDescription: SortOrderInput
  serviceEndDate: SortOrderInput
  serviceId: SortOrder
  serviceRequest: ServiceRequestOrderByWithRelationInput
  serviceRequestId: SortOrderInput
  serviceStartDate: SortOrder
  status: SortOrderInput
  tasks: TaskOrderByRelationAggregateInput
  vehicle: VehicleOrderByWithRelationInput
  vehicleId: SortOrder
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
}

input ServiceRelationFilter {
  is: ServiceWhereInput
  isNot: ServiceWhereInput
}

type ServiceRequest {
  _count: ServiceRequestCount!
  approvedService: Service
  approvedServiceId: BigInt
  createdAt: DateTime!
  deletedAt: DateTime
  description: String

  """
  Note: Cannot fill guest while creating service request, because sr with guest can only be created by guest creation.
  """
  guest: Guest
  guestId: BigInt
  jobs: [Job!]
  resolvedAt: DateTime
  resolvedBy: BigInt
  serviceRequestId: BigInt!

  """Note: Optional because field defaults to pending"""
  status: ServiceRequestStatus
  user: User
  userId: BigInt
  vehicle: Vehicle!
  vehicleId: BigInt!
  workshop: Workshop!
  workshopId: BigInt!
}

type ServiceRequestAvgAggregate {
  approvedServiceId: Float
  guestId: Float
  resolvedBy: Float
  serviceRequestId: Float
  userId: Float
  vehicleId: Float
  workshopId: Float
}

type ServiceRequestCount {
  jobs: Int!
}

type ServiceRequestCountAggregate {
  _all: Int!
  approvedServiceId: Int!
  createdAt: Int!
  deletedAt: Int!
  description: Int!
  guestId: Int!
  resolvedAt: Int!
  resolvedBy: Int!
  serviceRequestId: Int!
  status: Int!
  userId: Int!
  vehicleId: Int!
  workshopId: Int!
}

input ServiceRequestCreateInput {
  description: String
  jobs: JobCreateNestedManyWithoutServiceRequestsInput
  user: UserCreateNestedOneWithoutServiceRequestsInput
  vehicle: VehicleCreateNestedOneWithoutServiceRequestsInput!
  workshop: WorkshopCreateNestedOneWithoutServiceRequestsInput!
}

input ServiceRequestCreateNestedOneWithoutGuestInput {
  create: ServiceRequestCreateWithoutGuestInput
}

input ServiceRequestCreateWithoutGuestInput {
  description: String
  jobs: JobCreateNestedManyWithoutServiceRequestsInput
  user: UserCreateNestedOneWithoutServiceRequestsInput
  vehicle: VehicleCreateNestedOneWithoutServiceRequestsInput!
  workshop: WorkshopCreateNestedOneWithoutServiceRequestsInput!
}

input ServiceRequestListRelationFilter {
  every: ServiceRequestWhereInput
  none: ServiceRequestWhereInput
  some: ServiceRequestWhereInput
}

type ServiceRequestMaxAggregate {
  approvedServiceId: BigInt
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  guestId: BigInt
  resolvedAt: DateTime
  resolvedBy: BigInt
  serviceRequestId: BigInt
  status: ServiceRequestStatus
  userId: BigInt
  vehicleId: BigInt
  workshopId: BigInt
}

type ServiceRequestMinAggregate {
  approvedServiceId: BigInt
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  guestId: BigInt
  resolvedAt: DateTime
  resolvedBy: BigInt
  serviceRequestId: BigInt
  status: ServiceRequestStatus
  userId: BigInt
  vehicleId: BigInt
  workshopId: BigInt
}

input ServiceRequestNullableRelationFilter {
  is: ServiceRequestWhereInput
  isNot: ServiceRequestWhereInput
}

input ServiceRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input ServiceRequestOrderByWithRelationInput {
  approvedService: ServiceOrderByWithRelationInput
  approvedServiceId: SortOrderInput
  description: SortOrderInput
  guest: GuestOrderByWithRelationInput
  guestId: SortOrderInput
  jobs: JobOrderByRelationAggregateInput
  serviceRequestId: SortOrder
  status: SortOrderInput
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
  vehicle: VehicleOrderByWithRelationInput
  vehicleId: SortOrder
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
}

enum ServiceRequestScalarFieldEnum {
  approvedServiceId
  createdAt
  deletedAt
  description
  guestId
  resolvedAt
  resolvedBy
  serviceRequestId
  status
  userId
  vehicleId
  workshopId
}

enum ServiceRequestStatus {
  ACCEPTED
  CANCELLED
  PENDING
  REJECTED
}

type ServiceRequestSumAggregate {
  approvedServiceId: BigInt
  guestId: BigInt
  resolvedBy: BigInt
  serviceRequestId: BigInt
  userId: BigInt
  vehicleId: BigInt
  workshopId: BigInt
}

input ServiceRequestUpdateInput {
  description: String
  jobs: JobUpdateManyWithoutServiceRequestsNestedInput
  status: ServiceRequestStatus
  vehicle: VehicleUpdateOneRequiredWithoutServiceRequestsNestedInput
}

input ServiceRequestWhereInput {
  AND: [ServiceRequestWhereInput!]
  NOT: [ServiceRequestWhereInput!]
  OR: [ServiceRequestWhereInput!]
  approvedService: ServiceNullableRelationFilter
  approvedServiceId: BigIntNullableFilter
  description: StringNullableFilter
  guest: GuestNullableRelationFilter
  guestId: BigIntNullableFilter
  jobs: JobListRelationFilter
  serviceRequestId: BigIntFilter
  status: EnumServiceRequestStatusNullableFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  vehicle: VehicleRelationFilter
  vehicleId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input ServiceRequestWhereUniqueInput {
  AND: [ServiceRequestWhereInput!]
  NOT: [ServiceRequestWhereInput!]
  OR: [ServiceRequestWhereInput!]
  approvedService: ServiceNullableRelationFilter
  approvedServiceId: BigInt
  description: StringNullableFilter
  guest: GuestNullableRelationFilter
  guestId: BigInt
  jobs: JobListRelationFilter
  serviceRequestId: BigInt
  status: EnumServiceRequestStatusNullableFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  vehicle: VehicleRelationFilter
  vehicleId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

enum ServiceScalarFieldEnum {
  addedAt
  addedBy
  customerId
  deletedAt
  description
  employeeId
  payedOff
  paymentAmount
  resolvedAt
  resolvedBy
  serviceDescription
  serviceEndDate
  serviceId
  serviceRequestId
  serviceStartDate
  status
  updatedAt
  updatedBy
  vehicleId
  workshopId
}

enum ServiceStatus {
  CANCELLED
  COMPLETED
  PENDING
}

type ServiceSumAggregate {
  addedBy: BigInt
  customerId: BigInt
  employeeId: BigInt
  paymentAmount: Decimal
  resolvedBy: BigInt
  serviceId: BigInt
  serviceRequestId: BigInt
  updatedBy: BigInt
  vehicleId: BigInt
  workshopId: BigInt
}

input ServiceUpdateInput {
  description: String
  payedOff: Boolean
  paymentAmount: Decimal
  serviceDescription: String
  serviceEndDate: DateTime
  serviceRequestId: BigInt
  serviceStartDate: DateTime
  status: ServiceStatus
  vehicle: VehicleUpdateOneRequiredWithoutServicesNestedInput
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  customer: CustomerRelationFilter
  customerId: BigIntFilter
  description: StringNullableFilter
  employee: EmployeeRelationFilter
  employeeId: BigIntFilter
  payedOff: BoolFilter
  paymentAmount: DecimalFilter
  serviceDescription: StringNullableFilter
  serviceEndDate: DateTimeNullableFilter
  serviceId: BigIntFilter
  serviceRequest: ServiceRequestNullableRelationFilter
  serviceRequestId: BigIntNullableFilter
  serviceStartDate: DateTimeFilter
  status: EnumServiceStatusNullableFilter
  tasks: TaskListRelationFilter
  vehicle: VehicleRelationFilter
  vehicleId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

input ServiceWhereUniqueInput {
  AND: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  customer: CustomerRelationFilter
  customerId: BigIntFilter
  description: StringNullableFilter
  employee: EmployeeRelationFilter
  employeeId: BigIntFilter
  payedOff: BoolFilter
  paymentAmount: DecimalFilter
  serviceDescription: StringNullableFilter
  serviceEndDate: DateTimeNullableFilter
  serviceId: BigInt
  serviceRequest: ServiceRequestNullableRelationFilter
  serviceRequestId: BigInt
  serviceStartDate: DateTimeFilter
  status: EnumServiceStatusNullableFilter
  tasks: TaskListRelationFilter
  vehicle: VehicleRelationFilter
  vehicleId: BigIntFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

type SessionData {
  deviceId: String!
  deviceInfo: String
  deviceName: String
  deviceSerialNumber: String
  expiresAt: DateTime!
  ipAddress: String
  issuedAt: DateTime!
  refreshToken: String!
  sessionDataId: String!
  user: User!
  userId: BigInt!
}

type SessionDataAvgAggregate {
  userId: Float
}

type SessionDataCountAggregate {
  _all: Int!
  deviceId: Int!
  deviceInfo: Int!
  deviceName: Int!
  deviceSerialNumber: Int!
  expiresAt: Int!
  ipAddress: Int!
  issuedAt: Int!
  refreshToken: Int!
  sessionDataId: Int!
  userId: Int!
}

input SessionDataCreateInput {
  deviceId: String!
  deviceInfo: String
  deviceName: String
  deviceSerialNumber: String
  expiresAt: DateTime!
  ipAddress: String
  issuedAt: DateTime
  refreshToken: String!
  sessionDataId: String!
  user: UserCreateNestedOneWithoutSessionDataInput!
}

input SessionDataListRelationFilter {
  every: SessionDataWhereInput
  none: SessionDataWhereInput
  some: SessionDataWhereInput
}

type SessionDataMaxAggregate {
  deviceId: String
  deviceInfo: String
  deviceName: String
  deviceSerialNumber: String
  expiresAt: DateTime
  ipAddress: String
  issuedAt: DateTime
  refreshToken: String
  sessionDataId: String
  userId: BigInt
}

type SessionDataMinAggregate {
  deviceId: String
  deviceInfo: String
  deviceName: String
  deviceSerialNumber: String
  expiresAt: DateTime
  ipAddress: String
  issuedAt: DateTime
  refreshToken: String
  sessionDataId: String
  userId: BigInt
}

input SessionDataOrderByRelationAggregateInput {
  _count: SortOrder
}

input SessionDataOrderByWithRelationInput {
  deviceId: SortOrder
  deviceInfo: SortOrderInput
  deviceName: SortOrderInput
  deviceSerialNumber: SortOrderInput
  expiresAt: SortOrder
  ipAddress: SortOrderInput
  issuedAt: SortOrder
  refreshToken: SortOrder
  sessionDataId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SessionDataScalarFieldEnum {
  deviceId
  deviceInfo
  deviceName
  deviceSerialNumber
  expiresAt
  ipAddress
  issuedAt
  refreshToken
  sessionDataId
  userId
}

type SessionDataSumAggregate {
  userId: BigInt
}

input SessionDataUpdateInput {
  deviceId: String
  deviceInfo: String
  deviceName: String
  deviceSerialNumber: String
  expiresAt: DateTime
  ipAddress: String
  issuedAt: DateTime
  refreshToken: String
  user: UserUpdateOneRequiredWithoutSessionDataNestedInput
}

input SessionDataUserIdDeviceIdCompoundUniqueInput {
  deviceId: String!
  userId: BigInt!
}

input SessionDataWhereInput {
  AND: [SessionDataWhereInput!]
  NOT: [SessionDataWhereInput!]
  OR: [SessionDataWhereInput!]
  deviceId: StringFilter
  deviceInfo: StringNullableFilter
  deviceName: StringNullableFilter
  deviceSerialNumber: StringNullableFilter
  expiresAt: DateTimeFilter
  ipAddress: StringNullableFilter
  issuedAt: DateTimeFilter
  refreshToken: StringFilter
  sessionDataId: StringFilter
  user: UserRelationFilter
  userId: BigIntFilter
}

input SessionDataWhereUniqueInput {
  AND: [SessionDataWhereInput!]
  NOT: [SessionDataWhereInput!]
  OR: [SessionDataWhereInput!]
  deviceId: StringFilter
  deviceInfo: StringNullableFilter
  deviceName: StringNullableFilter
  deviceSerialNumber: StringNullableFilter
  expiresAt: DateTimeFilter
  ipAddress: StringNullableFilter
  issuedAt: DateTimeFilter
  refreshToken: StringFilter
  sessionDataId: String
  user: UserRelationFilter
  userId: BigIntFilter
  userId_deviceId: SessionDataUserIdDeviceIdCompoundUniqueInput
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  _count: TaskCount!
  createdAt: DateTime!
  createdBy: BigInt
  customName: String
  description: String!
  employees: [Employee!]

  """Note: Optional because field defaults to 0.00"""
  executionTime: Float!

  """Note: Optional because field defaults to 0.00"""
  partsCost: Decimal!
  resolvedAt: DateTime
  resolvedBy: BigInt
  service: Service!
  serviceId: BigInt!

  """Note: Optional because field defaults to pending"""
  status: TaskStatus
  taskId: BigInt!
  updatedAt: DateTime
  updatedBy: BigInt
  workshopJob: WorkshopJob!
  workshopJobId: BigInt!
}

type TaskAvgAggregate {
  createdBy: Float
  executionTime: Float
  partsCost: Decimal
  resolvedBy: Float
  serviceId: Float
  taskId: Float
  updatedBy: Float
  workshopJobId: Float
}

type TaskCount {
  employees: Int!
}

type TaskCountAggregate {
  _all: Int!
  createdAt: Int!
  createdBy: Int!
  customName: Int!
  description: Int!
  executionTime: Int!
  partsCost: Int!
  resolvedAt: Int!
  resolvedBy: Int!
  serviceId: Int!
  status: Int!
  taskId: Int!
  updatedAt: Int!
  updatedBy: Int!
  workshopJobId: Int!
}

input TaskCreateInput {
  customName: String
  description: String!
  employees: EmployeeCreateNestedManyWithoutTasksInput
  executionTime: Float
  partsCost: Decimal
  service: ServiceCreateNestedOneWithoutTasksInput!
  status: TaskStatus
  workshopJob: WorkshopJobCreateNestedOneWithoutTasksInput!
}

input TaskCreateManyServiceInput {
  customName: String
  description: String!
  executionTime: Float
  partsCost: Decimal
  status: TaskStatus
  workshopJobId: BigInt!
}

input TaskCreateManyServiceInputEnvelope {
  data: [TaskCreateManyServiceInput!]!
  skipDuplicates: Boolean
}

input TaskCreateNestedManyWithoutServiceInput {
  create: [TaskCreateWithoutServiceInput!]
  createMany: TaskCreateManyServiceInputEnvelope
}

input TaskCreateWithoutServiceInput {
  customName: String
  description: String!
  employees: EmployeeCreateNestedManyWithoutTasksInput
  executionTime: Float
  partsCost: Decimal
  status: TaskStatus
  workshopJob: WorkshopJobCreateNestedOneWithoutTasksInput!
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

type TaskMaxAggregate {
  createdAt: DateTime
  createdBy: BigInt
  customName: String
  description: String
  executionTime: Float
  partsCost: Decimal
  resolvedAt: DateTime
  resolvedBy: BigInt
  serviceId: BigInt
  status: TaskStatus
  taskId: BigInt
  updatedAt: DateTime
  updatedBy: BigInt
  workshopJobId: BigInt
}

type TaskMinAggregate {
  createdAt: DateTime
  createdBy: BigInt
  customName: String
  description: String
  executionTime: Float
  partsCost: Decimal
  resolvedAt: DateTime
  resolvedBy: BigInt
  serviceId: BigInt
  status: TaskStatus
  taskId: BigInt
  updatedAt: DateTime
  updatedBy: BigInt
  workshopJobId: BigInt
}

input TaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input TaskOrderByWithRelationInput {
  customName: SortOrderInput
  description: SortOrder
  employees: EmployeeOrderByRelationAggregateInput
  executionTime: SortOrder
  partsCost: SortOrder
  service: ServiceOrderByWithRelationInput
  serviceId: SortOrder
  status: SortOrderInput
  taskId: SortOrder
  workshopJob: WorkshopJobOrderByWithRelationInput
  workshopJobId: SortOrder
}

enum TaskScalarFieldEnum {
  createdAt
  createdBy
  customName
  description
  executionTime
  partsCost
  resolvedAt
  resolvedBy
  serviceId
  status
  taskId
  updatedAt
  updatedBy
  workshopJobId
}

enum TaskStatus {
  CANCELLED
  COMPLETED
  PENDING
}

type TaskSumAggregate {
  createdBy: BigInt
  executionTime: Float
  partsCost: Decimal
  resolvedBy: BigInt
  serviceId: BigInt
  taskId: BigInt
  updatedBy: BigInt
  workshopJobId: BigInt
}

input TaskUpdateInput {
  customName: String
  description: String
  employees: EmployeeUpdateManyWithoutTasksNestedInput
  executionTime: Float
  partsCost: Decimal
  status: TaskStatus
  workshopJob: WorkshopJobUpdateOneRequiredWithoutTasksNestedInput
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  customName: StringNullableFilter
  description: StringFilter
  employees: EmployeeListRelationFilter
  executionTime: FloatFilter
  partsCost: DecimalFilter
  service: ServiceRelationFilter
  serviceId: BigIntFilter
  status: EnumTaskStatusNullableFilter
  taskId: BigIntFilter
  workshopJob: WorkshopJobRelationFilter
  workshopJobId: BigIntFilter
}

input TaskWhereUniqueInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  customName: StringNullableFilter
  description: StringFilter
  employees: EmployeeListRelationFilter
  executionTime: FloatFilter
  partsCost: DecimalFilter
  service: ServiceRelationFilter
  serviceId: BigIntFilter
  status: EnumTaskStatusNullableFilter
  taskId: BigInt
  workshopJob: WorkshopJobRelationFilter
  workshopJobId: BigIntFilter
}

"""Note: CREATE USER ONLY IF PHONE NUMBER IS CONFIRMED."""
type User {
  _count: UserCount!
  avatarURL: String
  createdAt: DateTime!
  customers: [Customer!]
  deletedAt: DateTime
  email: String!
  employees: [Employee!]
  firstName: String
  isVerified: Boolean
  joinWorkshopRequests: [JoinWorkshopRequest!]
  lastName: String
  reviewResponses: [ReviewResponse!]
  reviews: [Review!]
  role: UserRole!
  serviceRequests: [ServiceRequest!]
  sessionData: [SessionData!]
  status: UserStatus
  telephoneNumber: String!
  updatedAt: DateTime
  userId: BigInt!
  userReports: [UserReport!]
  username: String!
  vehicles: [Vehicle!]
  workshops: [Workshop!]
}

type UserAvgAggregate {
  userId: Float
}

type UserCount {
  customers: Int!
  employees: Int!
  joinWorkshopRequests: Int!
  reviewResponses: Int!
  reviews: Int!
  serviceRequests: Int!
  sessionData: Int!
  userReports: Int!
  vehicles: Int!
  workshops: Int!
}

type UserCountAggregate {
  _all: Int!
  avatarURL: Int!
  createdAt: Int!
  deletedAt: Int!
  email: Int!
  firstName: Int!
  isVerified: Int!
  lastName: Int!
  role: Int!
  status: Int!
  telephoneNumber: Int!
  updatedAt: Int!
  userId: Int!
  username: Int!
}

input UserCreateInput {
  avatarURL: String
  email: String!
  firstName: String
  lastName: String
  password: String!
  telephoneNumber: String!
  username: String!
}

input UserCreateNestedOneWithoutCustomersInput {
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutJoinWorkshopRequestsInput {
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutReviewResponsesInput {
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutServiceRequestsInput {
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutSessionDataInput {
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutVehiclesInput {
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutWorkshopsInput {
  connect: UserWhereUniqueInput
}

input UserCreateOrConnectWithoutSessionDataInput {
  create: UserCreateWithoutSessionDataInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutSessionDataInput {
  avatarURL: String
  email: String!
  firstName: String
  lastName: String
  password: String!
  telephoneNumber: String!
  username: String!
}

type UserMaxAggregate {
  avatarURL: String
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  firstName: String
  isVerified: Boolean
  lastName: String
  role: UserRole
  status: UserStatus
  telephoneNumber: String
  updatedAt: DateTime
  userId: BigInt
  username: String
}

type UserMinAggregate {
  avatarURL: String
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  firstName: String
  isVerified: Boolean
  lastName: String
  role: UserRole
  status: UserStatus
  telephoneNumber: String
  updatedAt: DateTime
  userId: BigInt
  username: String
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserOrderByWithRelationInput {
  avatarURL: SortOrderInput
  customers: CustomerOrderByRelationAggregateInput
  email: SortOrder
  employees: EmployeeOrderByRelationAggregateInput
  firstName: SortOrderInput
  isVerified: SortOrderInput
  joinWorkshopRequests: JoinWorkshopRequestOrderByRelationAggregateInput
  lastName: SortOrderInput
  password: SortOrder
  reviewResponses: ReviewResponseOrderByRelationAggregateInput
  reviews: ReviewOrderByRelationAggregateInput
  role: SortOrder
  serviceRequests: ServiceRequestOrderByRelationAggregateInput
  sessionData: SessionDataOrderByRelationAggregateInput
  status: SortOrderInput
  telephoneNumber: SortOrder
  userId: SortOrder
  userReports: UserReportOrderByRelationAggregateInput
  username: SortOrder
  vehicles: VehicleOrderByRelationAggregateInput
  workshops: WorkshopOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

type UserReport {
  createdAt: DateTime!
  reportId: BigInt!
  reportText: String!
  reportType: UserReportType!
  reportedEntityType: UserReportReportedEntityType!
  reportedId: BigInt!

  """Note: Optional because field defaults to pending"""
  status: UserReportStatus!
  updatedAt: DateTime
  updatedBy: BigInt
  user: User!
  userId: BigInt!
}

type UserReportAvgAggregate {
  reportId: Float
  reportedId: Float
  updatedBy: Float
  userId: Float
}

type UserReportCountAggregate {
  _all: Int!
  createdAt: Int!
  reportId: Int!
  reportText: Int!
  reportType: Int!
  reportedEntityType: Int!
  reportedId: Int!
  status: Int!
  updatedAt: Int!
  updatedBy: Int!
  userId: Int!
}

input UserReportListRelationFilter {
  every: UserReportWhereInput
  none: UserReportWhereInput
  some: UserReportWhereInput
}

type UserReportMaxAggregate {
  createdAt: DateTime
  reportId: BigInt
  reportText: String
  reportType: UserReportType
  reportedEntityType: UserReportReportedEntityType
  reportedId: BigInt
  status: UserReportStatus
  updatedAt: DateTime
  updatedBy: BigInt
  userId: BigInt
}

type UserReportMinAggregate {
  createdAt: DateTime
  reportId: BigInt
  reportText: String
  reportType: UserReportType
  reportedEntityType: UserReportReportedEntityType
  reportedId: BigInt
  status: UserReportStatus
  updatedAt: DateTime
  updatedBy: BigInt
  userId: BigInt
}

input UserReportOrderByRelationAggregateInput {
  _count: SortOrder
}

enum UserReportReportedEntityType {
  REVIEW
  REVIEW_RESPONSE
  USER
  WORKSHOP
}

enum UserReportStatus {
  ACTIVE
  CLOSED
  PENDING
}

type UserReportSumAggregate {
  reportId: BigInt
  reportedId: BigInt
  updatedBy: BigInt
  userId: BigInt
}

enum UserReportType {
  FAKE_PROFILE
  FAKE_WORKSHOP
  FRAUDULENT_ACTIVITY
  HARRASMENT
  OFFENSIVE_CONTENT
  OTHER
  PRIVACY_VIOLATION
  SPAM
  VIOLATION_OF_TERMS
  WORKSHOP_IMPERSONATION
}

input UserReportWhereInput {
  AND: [UserReportWhereInput!]
  NOT: [UserReportWhereInput!]
  OR: [UserReportWhereInput!]
  reportId: BigIntFilter
  reportText: StringFilter
  reportType: EnumUserReportTypeFilter
  reportedEntityType: EnumUserReportReportedEntityTypeFilter
  reportedId: BigIntFilter
  status: EnumUserReportStatusFilter
  user: UserRelationFilter
  userId: BigIntFilter
}

enum UserRole {
  ADMIN
  MODERATOR
  SUPERADMIN
  USER
}

enum UserScalarFieldEnum {
  avatarURL
  createdAt
  deletedAt
  email
  firstName
  isVerified
  lastName
  password
  role
  status
  telephoneNumber
  updatedAt
  userId
  username
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

type UserSumAggregate {
  userId: BigInt
}

input UserUpdateOneRequiredWithoutSessionDataNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionDataInput
  create: UserCreateWithoutSessionDataInput
  update: UserUpdateToOneWithWhereWithoutSessionDataInput
  upsert: UserUpsertWithoutSessionDataInput
}

input UserUpdateToOneWithWhereWithoutSessionDataInput {
  data: UserUpdateWithoutSessionDataInput!
  where: UserWhereInput
}

input UserUpdateWithoutSessionDataInput {
  avatarURL: String
  email: String
  firstName: String
  isVerified: Boolean
  lastName: String
  password: String
  status: UserStatus
  telephoneNumber: String
  username: String
}

input UserUpsertWithoutSessionDataInput {
  create: UserCreateWithoutSessionDataInput!
  update: UserUpdateWithoutSessionDataInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  avatarURL: StringNullableFilter
  customers: CustomerListRelationFilter
  email: StringFilter
  employees: EmployeeListRelationFilter
  firstName: StringNullableFilter
  isVerified: BoolNullableFilter
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  lastName: StringNullableFilter
  password: StringFilter
  reviewResponses: ReviewResponseListRelationFilter
  reviews: ReviewListRelationFilter
  role: EnumUserRoleFilter
  serviceRequests: ServiceRequestListRelationFilter
  sessionData: SessionDataListRelationFilter
  status: EnumUserStatusNullableFilter
  telephoneNumber: StringFilter
  userId: BigIntFilter
  userReports: UserReportListRelationFilter
  username: StringFilter
  vehicles: VehicleListRelationFilter
  workshops: WorkshopListRelationFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  avatarURL: StringNullableFilter
  customers: CustomerListRelationFilter
  email: String
  employees: EmployeeListRelationFilter
  firstName: StringNullableFilter
  isVerified: BoolNullableFilter
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  lastName: StringNullableFilter
  password: StringFilter
  reviewResponses: ReviewResponseListRelationFilter
  reviews: ReviewListRelationFilter
  role: EnumUserRoleFilter
  serviceRequests: ServiceRequestListRelationFilter
  sessionData: SessionDataListRelationFilter
  status: EnumUserStatusNullableFilter
  telephoneNumber: StringFilter
  userId: BigInt
  userReports: UserReportListRelationFilter
  username: String
  vehicles: VehicleListRelationFilter
  workshops: WorkshopListRelationFilter
}

type Vehicle {
  _count: VehicleCount!
  customer: Customer
  customerId: BigInt
  deletedAt: DateTime
  guest: Guest
  guestId: BigInt
  modelId: BigInt!
  serviceRequests: [ServiceRequest!]
  services: [Service!]
  user: User
  userId: BigInt
  vehicleDetails: VehicleDetails
  vehicleId: BigInt!
  vehicleModel: VehicleModel!
}

type VehicleAvgAggregate {
  customerId: Float
  guestId: Float
  modelId: Float
  userId: Float
  vehicleId: Float
}

type VehicleBrand {
  _count: VehicleBrandCount!
  brandName: String!
  createdAt: DateTime!
  updatedAt: DateTime
  vehicleModels: [VehicleModel!]
}

type VehicleBrandCount {
  vehicleModels: Int!
}

type VehicleBrandCountAggregate {
  _all: Int!
  brandName: Int!
  createdAt: Int!
  updatedAt: Int!
}

input VehicleBrandCreateInput {
  brandName: String!
}

input VehicleBrandCreateNestedOneWithoutVehicleModelsInput {
  connect: VehicleBrandWhereUniqueInput
  connectOrCreate: VehicleBrandCreateOrConnectWithoutVehicleModelsInput
  create: VehicleBrandCreateWithoutVehicleModelsInput
}

input VehicleBrandCreateOrConnectWithoutVehicleModelsInput {
  create: VehicleBrandCreateWithoutVehicleModelsInput!
  where: VehicleBrandWhereUniqueInput!
}

input VehicleBrandCreateWithoutVehicleModelsInput {
  brandName: String!
}

type VehicleBrandMaxAggregate {
  brandName: String
  createdAt: DateTime
  updatedAt: DateTime
}

type VehicleBrandMinAggregate {
  brandName: String
  createdAt: DateTime
  updatedAt: DateTime
}

input VehicleBrandOrderByWithRelationInput {
  brandName: SortOrder
  vehicleModels: VehicleModelOrderByRelationAggregateInput
}

input VehicleBrandRelationFilter {
  is: VehicleBrandWhereInput
  isNot: VehicleBrandWhereInput
}

enum VehicleBrandScalarFieldEnum {
  brandName
  createdAt
  updatedAt
}

input VehicleBrandUpdateInput {
  brandName: String
}

input VehicleBrandWhereInput {
  AND: [VehicleBrandWhereInput!]
  NOT: [VehicleBrandWhereInput!]
  OR: [VehicleBrandWhereInput!]
  brandName: StringFilter
  vehicleModels: VehicleModelListRelationFilter
}

input VehicleBrandWhereUniqueInput {
  AND: [VehicleBrandWhereInput!]
  NOT: [VehicleBrandWhereInput!]
  OR: [VehicleBrandWhereInput!]
  brandName: String
  vehicleModels: VehicleModelListRelationFilter
}

type VehicleCount {
  serviceRequests: Int!
  services: Int!
}

type VehicleCountAggregate {
  _all: Int!
  customerId: Int!
  deletedAt: Int!
  guestId: Int!
  modelId: Int!
  userId: Int!
  vehicleId: Int!
}

input VehicleCreateInput {
  customer: CustomerCreateNestedOneWithoutVehiclesInput
  user: UserCreateNestedOneWithoutVehiclesInput
  vehicleDetails: VehicleDetailsCreateNestedOneWithoutVehicleInput
  vehicleModel: VehicleModelCreateNestedOneWithoutVehiclesInput!
}

input VehicleCreateManyCustomerInput {
  guestId: BigInt
  modelId: BigInt!
  userId: BigInt
}

input VehicleCreateManyCustomerInputEnvelope {
  data: [VehicleCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input VehicleCreateNestedManyWithoutCustomerInput {
  connect: [VehicleWhereUniqueInput!]
  connectOrCreate: [VehicleCreateOrConnectWithoutCustomerInput!]
  create: [VehicleCreateWithoutCustomerInput!]
  createMany: VehicleCreateManyCustomerInputEnvelope
}

input VehicleCreateNestedOneWithoutGuestInput {
  create: VehicleCreateWithoutGuestInput
}

input VehicleCreateNestedOneWithoutServiceRequestsInput {
  connect: VehicleWhereUniqueInput
}

input VehicleCreateNestedOneWithoutServicesInput {
  connect: VehicleWhereUniqueInput
}

input VehicleCreateNestedOneWithoutVehicleDetailsInput {
  connect: VehicleWhereUniqueInput
}

input VehicleCreateOrConnectWithoutCustomerInput {
  create: VehicleCreateWithoutCustomerInput!
  where: VehicleWhereUniqueInput!
}

input VehicleCreateOrConnectWithoutServiceRequestsInput {
  create: VehicleCreateWithoutServiceRequestsInput!
  where: VehicleWhereUniqueInput!
}

input VehicleCreateOrConnectWithoutServicesInput {
  create: VehicleCreateWithoutServicesInput!
  where: VehicleWhereUniqueInput!
}

input VehicleCreateWithoutCustomerInput {
  user: UserCreateNestedOneWithoutVehiclesInput
  vehicleDetails: VehicleDetailsCreateNestedOneWithoutVehicleInput
  vehicleModel: VehicleModelCreateNestedOneWithoutVehiclesInput!
}

input VehicleCreateWithoutGuestInput {
  customer: CustomerCreateNestedOneWithoutVehiclesInput
  user: UserCreateNestedOneWithoutVehiclesInput
  vehicleDetails: VehicleDetailsCreateNestedOneWithoutVehicleInput
  vehicleModel: VehicleModelCreateNestedOneWithoutVehiclesInput!
}

input VehicleCreateWithoutServiceRequestsInput {
  customer: CustomerCreateNestedOneWithoutVehiclesInput
  user: UserCreateNestedOneWithoutVehiclesInput
  vehicleDetails: VehicleDetailsCreateNestedOneWithoutVehicleInput
  vehicleModel: VehicleModelCreateNestedOneWithoutVehiclesInput!
}

input VehicleCreateWithoutServicesInput {
  customer: CustomerCreateNestedOneWithoutVehiclesInput
  user: UserCreateNestedOneWithoutVehiclesInput
  vehicleDetails: VehicleDetailsCreateNestedOneWithoutVehicleInput
  vehicleModel: VehicleModelCreateNestedOneWithoutVehiclesInput!
}

type VehicleDetails {
  VIN: String
  bodyColor: BodyColor
  countryOfRegistration: String
  deletedAt: DateTime
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicle: Vehicle!
  vehicleDetailsId: BigInt!
  vehicleId: BigInt!
  yearOfProduction: Int
}

type VehicleDetailsAvgAggregate {
  vehicleDetailsId: Float
  vehicleId: Float
  yearOfProduction: Float
}

type VehicleDetailsCountAggregate {
  VIN: Int!
  _all: Int!
  bodyColor: Int!
  countryOfRegistration: Int!
  deletedAt: Int!
  engineCapacity: Int!
  engineNo: Int!
  fuelType: Int!
  licensePlate: Int!
  vehicleDetailsId: Int!
  vehicleId: Int!
  yearOfProduction: Int!
}

input VehicleDetailsCreateInput {
  VIN: String
  bodyColor: BodyColor
  countryOfRegistration: String
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicle: VehicleCreateNestedOneWithoutVehicleDetailsInput!
  vehicleDetailsId: BigInt
  yearOfProduction: Int
}

input VehicleDetailsCreateNestedOneWithoutVehicleInput {
  create: VehicleDetailsCreateWithoutVehicleInput
}

input VehicleDetailsCreateOrConnectWithoutVehicleInput {
  create: VehicleDetailsCreateWithoutVehicleInput!
  where: VehicleDetailsWhereUniqueInput!
}

input VehicleDetailsCreateWithoutVehicleInput {
  VIN: String
  bodyColor: BodyColor
  countryOfRegistration: String
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicleDetailsId: BigInt
  yearOfProduction: Int
}

type VehicleDetailsMaxAggregate {
  VIN: String
  bodyColor: BodyColor
  countryOfRegistration: String
  deletedAt: DateTime
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicleDetailsId: BigInt
  vehicleId: BigInt
  yearOfProduction: Int
}

type VehicleDetailsMinAggregate {
  VIN: String
  bodyColor: BodyColor
  countryOfRegistration: String
  deletedAt: DateTime
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicleDetailsId: BigInt
  vehicleId: BigInt
  yearOfProduction: Int
}

input VehicleDetailsNullableRelationFilter {
  is: VehicleDetailsWhereInput
  isNot: VehicleDetailsWhereInput
}

input VehicleDetailsOrderByWithRelationInput {
  VIN: SortOrderInput
  bodyColor: SortOrderInput
  countryOfRegistration: SortOrderInput
  engineCapacity: SortOrderInput
  engineNo: SortOrderInput
  fuelType: SortOrderInput
  licensePlate: SortOrderInput
  vehicle: VehicleOrderByWithRelationInput
  vehicleDetailsId: SortOrder
  vehicleId: SortOrder
  yearOfProduction: SortOrderInput
}

enum VehicleDetailsScalarFieldEnum {
  VIN
  bodyColor
  countryOfRegistration
  deletedAt
  engineCapacity
  engineNo
  fuelType
  licensePlate
  vehicleDetailsId
  vehicleId
  yearOfProduction
}

type VehicleDetailsSumAggregate {
  vehicleDetailsId: BigInt
  vehicleId: BigInt
  yearOfProduction: Int
}

input VehicleDetailsUpdateInput {
  VIN: String
  bodyColor: BodyColor
  countryOfRegistration: String
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicleDetailsId: BigInt
  yearOfProduction: Int
}

input VehicleDetailsUpdateOneWithoutVehicleNestedInput {
  connect: VehicleDetailsWhereUniqueInput
  connectOrCreate: VehicleDetailsCreateOrConnectWithoutVehicleInput
  create: VehicleDetailsCreateWithoutVehicleInput
  delete: VehicleDetailsWhereInput
  disconnect: VehicleDetailsWhereInput
  update: VehicleDetailsUpdateToOneWithWhereWithoutVehicleInput
  upsert: VehicleDetailsUpsertWithoutVehicleInput
}

input VehicleDetailsUpdateToOneWithWhereWithoutVehicleInput {
  data: VehicleDetailsUpdateWithoutVehicleInput!
  where: VehicleDetailsWhereInput
}

input VehicleDetailsUpdateWithoutVehicleInput {
  VIN: String
  bodyColor: BodyColor
  countryOfRegistration: String
  engineCapacity: String
  engineNo: String
  fuelType: FuelType
  licensePlate: String
  vehicleDetailsId: BigInt
  yearOfProduction: Int
}

input VehicleDetailsUpsertWithoutVehicleInput {
  create: VehicleDetailsCreateWithoutVehicleInput!
  update: VehicleDetailsUpdateWithoutVehicleInput!
  where: VehicleDetailsWhereInput
}

input VehicleDetailsWhereInput {
  AND: [VehicleDetailsWhereInput!]
  NOT: [VehicleDetailsWhereInput!]
  OR: [VehicleDetailsWhereInput!]
  VIN: StringNullableFilter
  bodyColor: EnumBodyColorNullableFilter
  countryOfRegistration: StringNullableFilter
  engineCapacity: StringNullableFilter
  engineNo: StringNullableFilter
  fuelType: EnumFuelTypeNullableFilter
  licensePlate: StringNullableFilter
  vehicle: VehicleRelationFilter
  vehicleDetailsId: BigIntFilter
  vehicleId: BigIntFilter
  yearOfProduction: IntNullableFilter
}

input VehicleDetailsWhereUniqueInput {
  AND: [VehicleDetailsWhereInput!]
  NOT: [VehicleDetailsWhereInput!]
  OR: [VehicleDetailsWhereInput!]
  VIN: StringNullableFilter
  bodyColor: EnumBodyColorNullableFilter
  countryOfRegistration: StringNullableFilter
  engineCapacity: StringNullableFilter
  engineNo: StringNullableFilter
  fuelType: EnumFuelTypeNullableFilter
  licensePlate: StringNullableFilter
  vehicle: VehicleRelationFilter
  vehicleDetailsId: BigInt
  vehicleId: BigInt
  yearOfProduction: IntNullableFilter
}

input VehicleListRelationFilter {
  every: VehicleWhereInput
  none: VehicleWhereInput
  some: VehicleWhereInput
}

type VehicleMaxAggregate {
  customerId: BigInt
  deletedAt: DateTime
  guestId: BigInt
  modelId: BigInt
  userId: BigInt
  vehicleId: BigInt
}

type VehicleMinAggregate {
  customerId: BigInt
  deletedAt: DateTime
  guestId: BigInt
  modelId: BigInt
  userId: BigInt
  vehicleId: BigInt
}

type VehicleModel {
  _count: VehicleModelCount!
  brand: String!
  createdAt: DateTime!
  modelId: BigInt!
  modelName: String!
  updatedAt: DateTime
  vehicleBrand: VehicleBrand!
  vehicles: [Vehicle!]
}

type VehicleModelAvgAggregate {
  modelId: Float
}

type VehicleModelCount {
  vehicles: Int!
}

type VehicleModelCountAggregate {
  _all: Int!
  brand: Int!
  createdAt: Int!
  modelId: Int!
  modelName: Int!
  updatedAt: Int!
}

input VehicleModelCreateInput {
  modelName: String!
  vehicleBrand: VehicleBrandCreateNestedOneWithoutVehicleModelsInput!
}

input VehicleModelCreateNestedOneWithoutVehiclesInput {
  connect: VehicleModelWhereUniqueInput
}

input VehicleModelListRelationFilter {
  every: VehicleModelWhereInput
  none: VehicleModelWhereInput
  some: VehicleModelWhereInput
}

type VehicleModelMaxAggregate {
  brand: String
  createdAt: DateTime
  modelId: BigInt
  modelName: String
  updatedAt: DateTime
}

type VehicleModelMinAggregate {
  brand: String
  createdAt: DateTime
  modelId: BigInt
  modelName: String
  updatedAt: DateTime
}

input VehicleModelModelNameBrandCompoundUniqueInput {
  brand: String!
  modelName: String!
}

input VehicleModelOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleModelOrderByWithRelationInput {
  brand: SortOrder
  modelId: SortOrder
  modelName: SortOrder
  vehicleBrand: VehicleBrandOrderByWithRelationInput
  vehicles: VehicleOrderByRelationAggregateInput
}

input VehicleModelRelationFilter {
  is: VehicleModelWhereInput
  isNot: VehicleModelWhereInput
}

enum VehicleModelScalarFieldEnum {
  brand
  createdAt
  modelId
  modelName
  updatedAt
}

type VehicleModelSumAggregate {
  modelId: BigInt
}

input VehicleModelUpdateInput {
  modelName: String
}

input VehicleModelWhereInput {
  AND: [VehicleModelWhereInput!]
  NOT: [VehicleModelWhereInput!]
  OR: [VehicleModelWhereInput!]
  brand: StringFilter
  modelId: BigIntFilter
  modelName: StringFilter
  vehicleBrand: VehicleBrandRelationFilter
  vehicles: VehicleListRelationFilter
}

input VehicleModelWhereUniqueInput {
  AND: [VehicleModelWhereInput!]
  NOT: [VehicleModelWhereInput!]
  OR: [VehicleModelWhereInput!]
  brand: StringFilter
  modelId: BigInt
  modelName: StringFilter
  modelName_brand: VehicleModelModelNameBrandCompoundUniqueInput
  vehicleBrand: VehicleBrandRelationFilter
  vehicles: VehicleListRelationFilter
}

input VehicleNullableRelationFilter {
  is: VehicleWhereInput
  isNot: VehicleWhereInput
}

input VehicleOrderByRelationAggregateInput {
  _count: SortOrder
}

input VehicleOrderByWithRelationInput {
  customer: CustomerOrderByWithRelationInput
  customerId: SortOrderInput
  guest: GuestOrderByWithRelationInput
  guestId: SortOrderInput
  modelId: SortOrder
  serviceRequests: ServiceRequestOrderByRelationAggregateInput
  services: ServiceOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
  vehicleDetails: VehicleDetailsOrderByWithRelationInput
  vehicleId: SortOrder
  vehicleModel: VehicleModelOrderByWithRelationInput
}

input VehicleRelationFilter {
  is: VehicleWhereInput
  isNot: VehicleWhereInput
}

enum VehicleScalarFieldEnum {
  customerId
  deletedAt
  guestId
  modelId
  userId
  vehicleId
}

type VehicleSumAggregate {
  customerId: BigInt
  guestId: BigInt
  modelId: BigInt
  userId: BigInt
  vehicleId: BigInt
}

input VehicleUpdateInput {
  vehicleDetails: VehicleDetailsUpdateOneWithoutVehicleNestedInput
}

input VehicleUpdateOneRequiredWithoutServiceRequestsNestedInput {
  connect: VehicleWhereUniqueInput
  connectOrCreate: VehicleCreateOrConnectWithoutServiceRequestsInput
  create: VehicleCreateWithoutServiceRequestsInput
  update: VehicleUpdateToOneWithWhereWithoutServiceRequestsInput
  upsert: VehicleUpsertWithoutServiceRequestsInput
}

input VehicleUpdateOneRequiredWithoutServicesNestedInput {
  connect: VehicleWhereUniqueInput
  connectOrCreate: VehicleCreateOrConnectWithoutServicesInput
  create: VehicleCreateWithoutServicesInput
  update: VehicleUpdateToOneWithWhereWithoutServicesInput
  upsert: VehicleUpsertWithoutServicesInput
}

input VehicleUpdateToOneWithWhereWithoutServiceRequestsInput {
  data: VehicleUpdateWithoutServiceRequestsInput!
  where: VehicleWhereInput
}

input VehicleUpdateToOneWithWhereWithoutServicesInput {
  data: VehicleUpdateWithoutServicesInput!
  where: VehicleWhereInput
}

input VehicleUpdateWithoutServiceRequestsInput {
  vehicleDetails: VehicleDetailsUpdateOneWithoutVehicleNestedInput
}

input VehicleUpdateWithoutServicesInput {
  vehicleDetails: VehicleDetailsUpdateOneWithoutVehicleNestedInput
}

input VehicleUpsertWithoutServiceRequestsInput {
  create: VehicleCreateWithoutServiceRequestsInput!
  update: VehicleUpdateWithoutServiceRequestsInput!
  where: VehicleWhereInput
}

input VehicleUpsertWithoutServicesInput {
  create: VehicleCreateWithoutServicesInput!
  update: VehicleUpdateWithoutServicesInput!
  where: VehicleWhereInput
}

input VehicleWhereInput {
  AND: [VehicleWhereInput!]
  NOT: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  customer: CustomerNullableRelationFilter
  customerId: BigIntNullableFilter
  guest: GuestNullableRelationFilter
  guestId: BigIntNullableFilter
  modelId: BigIntFilter
  serviceRequests: ServiceRequestListRelationFilter
  services: ServiceListRelationFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  vehicleDetails: VehicleDetailsNullableRelationFilter
  vehicleId: BigIntFilter
  vehicleModel: VehicleModelRelationFilter
}

input VehicleWhereUniqueInput {
  AND: [VehicleWhereInput!]
  NOT: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  customer: CustomerNullableRelationFilter
  customerId: BigIntNullableFilter
  guest: GuestNullableRelationFilter
  guestId: BigInt
  modelId: BigIntFilter
  serviceRequests: ServiceRequestListRelationFilter
  services: ServiceListRelationFilter
  user: UserNullableRelationFilter
  userId: BigIntNullableFilter
  vehicleDetails: VehicleDetailsNullableRelationFilter
  vehicleId: BigInt
  vehicleModel: VehicleModelRelationFilter
}

type Workshop {
  WorkshopDeviceOtp: WorkshopDeviceOtp
  _count: WorkshopCount!
  address: Address
  addressId: BigInt
  createdAt: DateTime!
  customers: [Customer!]
  deletedAt: DateTime
  email: String!
  employees: [Employee!]
  isManagingWork: Boolean
  isOfferingService: Boolean
  isVerified: Boolean
  jobCategories: [JobCategory!]
  joinWorkshopRequests: [JoinWorkshopRequest!]
  ownerId: BigInt!
  reviews: [Review!]
  serviceRequests: [ServiceRequest!]
  services: [Service!]
  telephoneNumber: String!
  updatedAt: DateTime
  updatedBy: BigInt
  user: User!
  workshopDetails: WorkshopDetails
  workshopDevices: [WorkshopDevice!]
  workshopId: BigInt!
  workshopJobs: [WorkshopJob!]
}

type WorkshopAvgAggregate {
  addressId: Float
  ownerId: Float
  updatedBy: Float
  workshopId: Float
}

type WorkshopCount {
  customers: Int!
  employees: Int!
  jobCategories: Int!
  joinWorkshopRequests: Int!
  reviews: Int!
  serviceRequests: Int!
  services: Int!
  workshopDevices: Int!
  workshopJobs: Int!
}

type WorkshopCountAggregate {
  _all: Int!
  addressId: Int!
  createdAt: Int!
  deletedAt: Int!
  email: Int!
  isManagingWork: Int!
  isOfferingService: Int!
  isVerified: Int!
  ownerId: Int!
  telephoneNumber: Int!
  updatedAt: Int!
  updatedBy: Int!
  workshopId: Int!
}

input WorkshopCreateInput {
  address: AddressCreateNestedOneWithoutWorkshopInput
  email: String!
  isManagingWork: Boolean
  isOfferingService: Boolean
  jobCategories: JobCategoryCreateNestedManyWithoutWorkshopsInput
  telephoneNumber: String!
  user: UserCreateNestedOneWithoutWorkshopsInput!
  workshopDetails: WorkshopDetailsCreateNestedOneWithoutWorkshopInput
  workshopJobs: WorkshopJobCreateNestedManyWithoutWorkshopInput
}

input WorkshopCreateNestedOneWithoutCustomersInput {
  connect: WorkshopWhereUniqueInput
}

input WorkshopCreateNestedOneWithoutEmployeesInput {
  connect: WorkshopWhereUniqueInput
}

input WorkshopCreateNestedOneWithoutJoinWorkshopRequestsInput {
  connect: WorkshopWhereUniqueInput
}

input WorkshopCreateNestedOneWithoutReviewsInput {
  connect: WorkshopWhereUniqueInput
}

input WorkshopCreateNestedOneWithoutServiceRequestsInput {
  connect: WorkshopWhereUniqueInput
}

input WorkshopCreateNestedOneWithoutServicesInput {
  connect: WorkshopWhereUniqueInput
}

input WorkshopCreateNestedOneWithoutWorkshopDetailsInput {
  connect: WorkshopWhereUniqueInput
}

input WorkshopCreateNestedOneWithoutWorkshopJobsInput {
  connect: WorkshopWhereUniqueInput
}

type WorkshopDetails {
  NIP: String
  deletedAt: DateTime
  description: String
  logoURL: String

  """Note: Optional because it is set to 0.00 by default"""
  rating: Decimal
  status: WorkshopDetailsStatus
  updatedAt: DateTime
  updatedBy: BigInt
  workshop: Workshop!
  workshopId: BigInt!
  workshopName: String!
}

type WorkshopDetailsAvgAggregate {
  rating: Decimal
  updatedBy: Float
  workshopId: Float
}

type WorkshopDetailsCountAggregate {
  NIP: Int!
  _all: Int!
  deletedAt: Int!
  description: Int!
  logoURL: Int!
  rating: Int!
  status: Int!
  updatedAt: Int!
  updatedBy: Int!
  workshopId: Int!
  workshopName: Int!
}

input WorkshopDetailsCreateInput {
  NIP: String
  description: String
  logoURL: String
  rating: Decimal
  workshop: WorkshopCreateNestedOneWithoutWorkshopDetailsInput!
  workshopName: String!
}

input WorkshopDetailsCreateNestedOneWithoutWorkshopInput {
  create: WorkshopDetailsCreateWithoutWorkshopInput
}

input WorkshopDetailsCreateOrConnectWithoutWorkshopInput {
  create: WorkshopDetailsCreateWithoutWorkshopInput!
  where: WorkshopDetailsWhereUniqueInput!
}

input WorkshopDetailsCreateWithoutWorkshopInput {
  NIP: String
  description: String
  logoURL: String
  rating: Decimal
  workshopName: String!
}

type WorkshopDetailsMaxAggregate {
  NIP: String
  deletedAt: DateTime
  description: String
  logoURL: String
  rating: Decimal
  status: WorkshopDetailsStatus
  updatedAt: DateTime
  updatedBy: BigInt
  workshopId: BigInt
  workshopName: String
}

type WorkshopDetailsMinAggregate {
  NIP: String
  deletedAt: DateTime
  description: String
  logoURL: String
  rating: Decimal
  status: WorkshopDetailsStatus
  updatedAt: DateTime
  updatedBy: BigInt
  workshopId: BigInt
  workshopName: String
}

input WorkshopDetailsNullableRelationFilter {
  is: WorkshopDetailsWhereInput
  isNot: WorkshopDetailsWhereInput
}

input WorkshopDetailsOrderByWithRelationInput {
  NIP: SortOrderInput
  description: SortOrderInput
  logoURL: SortOrderInput
  rating: SortOrderInput
  status: SortOrderInput
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
  workshopName: SortOrder
}

enum WorkshopDetailsScalarFieldEnum {
  NIP
  deletedAt
  description
  logoURL
  rating
  status
  updatedAt
  updatedBy
  workshopId
  workshopName
}

enum WorkshopDetailsStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

type WorkshopDetailsSumAggregate {
  rating: Decimal
  updatedBy: BigInt
  workshopId: BigInt
}

input WorkshopDetailsUpdateInput {
  NIP: String
  description: String
  logoURL: String
  rating: Decimal
  status: WorkshopDetailsStatus
  workshopName: String
}

input WorkshopDetailsUpdateOneWithoutWorkshopNestedInput {
  connect: WorkshopDetailsWhereUniqueInput
  connectOrCreate: WorkshopDetailsCreateOrConnectWithoutWorkshopInput
  create: WorkshopDetailsCreateWithoutWorkshopInput
  delete: WorkshopDetailsWhereInput
  disconnect: WorkshopDetailsWhereInput
  update: WorkshopDetailsUpdateToOneWithWhereWithoutWorkshopInput
  upsert: WorkshopDetailsUpsertWithoutWorkshopInput
}

input WorkshopDetailsUpdateToOneWithWhereWithoutWorkshopInput {
  data: WorkshopDetailsUpdateWithoutWorkshopInput!
  where: WorkshopDetailsWhereInput
}

input WorkshopDetailsUpdateWithoutWorkshopInput {
  NIP: String
  description: String
  logoURL: String
  rating: Decimal
  status: WorkshopDetailsStatus
  workshopName: String
}

input WorkshopDetailsUpsertWithoutWorkshopInput {
  create: WorkshopDetailsCreateWithoutWorkshopInput!
  update: WorkshopDetailsUpdateWithoutWorkshopInput!
  where: WorkshopDetailsWhereInput
}

input WorkshopDetailsWhereInput {
  AND: [WorkshopDetailsWhereInput!]
  NIP: StringNullableFilter
  NOT: [WorkshopDetailsWhereInput!]
  OR: [WorkshopDetailsWhereInput!]
  description: StringNullableFilter
  logoURL: StringNullableFilter
  rating: DecimalNullableFilter
  status: EnumWorkshopDetailsStatusNullableFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
  workshopName: StringFilter
}

input WorkshopDetailsWhereUniqueInput {
  AND: [WorkshopDetailsWhereInput!]
  NIP: StringNullableFilter
  NOT: [WorkshopDetailsWhereInput!]
  OR: [WorkshopDetailsWhereInput!]
  description: StringNullableFilter
  logoURL: StringNullableFilter
  rating: DecimalNullableFilter
  status: EnumWorkshopDetailsStatusNullableFilter
  workshop: WorkshopRelationFilter
  workshopId: BigInt
  workshopName: StringFilter
}

type WorkshopDevice {
  acceptedAt: DateTime
  acceptedBy: BigInt
  deviceName: String!
  lastLoginAt: DateTime
  lastLoginBy: BigInt
  serialNumber: String!
  status: WorkshopDeviceStatus
  updatedAt: DateTime
  updatedBy: BigInt
  workshop: Workshop!
  workshopDeviceId: BigInt!
  workshopId: BigInt!
}

type WorkshopDeviceAvgAggregate {
  acceptedBy: Float
  lastLoginBy: Float
  updatedBy: Float
  workshopDeviceId: Float
  workshopId: Float
}

type WorkshopDeviceCountAggregate {
  _all: Int!
  acceptedAt: Int!
  acceptedBy: Int!
  deviceName: Int!
  lastLoginAt: Int!
  lastLoginBy: Int!
  serialNumber: Int!
  status: Int!
  updatedAt: Int!
  updatedBy: Int!
  workshopDeviceId: Int!
  workshopId: Int!
}

input WorkshopDeviceListRelationFilter {
  every: WorkshopDeviceWhereInput
  none: WorkshopDeviceWhereInput
  some: WorkshopDeviceWhereInput
}

type WorkshopDeviceMaxAggregate {
  acceptedAt: DateTime
  acceptedBy: BigInt
  deviceName: String
  lastLoginAt: DateTime
  lastLoginBy: BigInt
  serialNumber: String
  status: WorkshopDeviceStatus
  updatedAt: DateTime
  updatedBy: BigInt
  workshopDeviceId: BigInt
  workshopId: BigInt
}

type WorkshopDeviceMinAggregate {
  acceptedAt: DateTime
  acceptedBy: BigInt
  deviceName: String
  lastLoginAt: DateTime
  lastLoginBy: BigInt
  serialNumber: String
  status: WorkshopDeviceStatus
  updatedAt: DateTime
  updatedBy: BigInt
  workshopDeviceId: BigInt
  workshopId: BigInt
}

input WorkshopDeviceOrderByRelationAggregateInput {
  _count: SortOrder
}

type WorkshopDeviceOtp {
  WorkshopDeviceOtpId: BigInt!
  code: String!
  createdAt: DateTime!
  employeeId: BigInt
  expiresAt: DateTime!
  workshop: Workshop!
  workshopId: BigInt!
}

type WorkshopDeviceOtpAvgAggregate {
  WorkshopDeviceOtpId: Float
  employeeId: Float
  workshopId: Float
}

type WorkshopDeviceOtpCountAggregate {
  WorkshopDeviceOtpId: Int!
  _all: Int!
  code: Int!
  createdAt: Int!
  employeeId: Int!
  expiresAt: Int!
  workshopId: Int!
}

type WorkshopDeviceOtpMaxAggregate {
  WorkshopDeviceOtpId: BigInt
  code: String
  createdAt: DateTime
  employeeId: BigInt
  expiresAt: DateTime
  workshopId: BigInt
}

type WorkshopDeviceOtpMinAggregate {
  WorkshopDeviceOtpId: BigInt
  code: String
  createdAt: DateTime
  employeeId: BigInt
  expiresAt: DateTime
  workshopId: BigInt
}

input WorkshopDeviceOtpNullableRelationFilter {
  is: WorkshopDeviceOtpWhereInput
  isNot: WorkshopDeviceOtpWhereInput
}

input WorkshopDeviceOtpOrderByWithRelationInput {
  WorkshopDeviceOtpId: SortOrder
  code: SortOrder
  employeeId: SortOrderInput
  expiresAt: SortOrder
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
}

type WorkshopDeviceOtpSumAggregate {
  WorkshopDeviceOtpId: BigInt
  employeeId: BigInt
  workshopId: BigInt
}

input WorkshopDeviceOtpWhereInput {
  AND: [WorkshopDeviceOtpWhereInput!]
  NOT: [WorkshopDeviceOtpWhereInput!]
  OR: [WorkshopDeviceOtpWhereInput!]
  WorkshopDeviceOtpId: BigIntFilter
  code: StringFilter
  employeeId: BigIntNullableFilter
  expiresAt: DateTimeFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
}

enum WorkshopDeviceStatus {
  DISABLED
  ENABLED
  INACTIVE
}

type WorkshopDeviceSumAggregate {
  acceptedBy: BigInt
  lastLoginBy: BigInt
  updatedBy: BigInt
  workshopDeviceId: BigInt
  workshopId: BigInt
}

input WorkshopDeviceWhereInput {
  AND: [WorkshopDeviceWhereInput!]
  NOT: [WorkshopDeviceWhereInput!]
  OR: [WorkshopDeviceWhereInput!]
  acceptedAt: DateTimeNullableFilter
  acceptedBy: BigIntNullableFilter
  deviceName: StringFilter
  lastLoginAt: DateTimeNullableFilter
  lastLoginBy: BigIntNullableFilter
  serialNumber: StringFilter
  status: EnumWorkshopDeviceStatusNullableFilter
  workshop: WorkshopRelationFilter
  workshopDeviceId: BigIntFilter
  workshopId: BigIntFilter
}

type WorkshopJob {
  _count: WorkshopJobCount!

  """Note: Optional because field defaults to true"""
  availability: Boolean!
  createdAt: DateTime!
  createdBy: BigInt
  job: Job!
  jobId: BigInt!
  maxPrice: Decimal
  minPrice: Decimal
  tasks: [Task!]
  updatedAt: DateTime
  updatedBy: BigInt
  workshop: Workshop!
  workshopId: BigInt!
  workshopJobDescription: String
  workshopJobId: BigInt!
}

type WorkshopJobAvgAggregate {
  createdBy: Float
  jobId: Float
  maxPrice: Decimal
  minPrice: Decimal
  updatedBy: Float
  workshopId: Float
  workshopJobId: Float
}

type WorkshopJobCount {
  tasks: Int!
}

type WorkshopJobCountAggregate {
  _all: Int!
  availability: Int!
  createdAt: Int!
  createdBy: Int!
  jobId: Int!
  maxPrice: Int!
  minPrice: Int!
  updatedAt: Int!
  updatedBy: Int!
  workshopId: Int!
  workshopJobDescription: Int!
  workshopJobId: Int!
}

input WorkshopJobCreateManyWorkshopInput {
  availability: Boolean
  jobId: BigInt!
  maxPrice: Decimal
  minPrice: Decimal
  workshopJobDescription: String
}

input WorkshopJobCreateManyWorkshopInputEnvelope {
  data: [WorkshopJobCreateManyWorkshopInput!]!
  skipDuplicates: Boolean
}

input WorkshopJobCreateNestedManyWithoutWorkshopInput {
  create: [WorkshopJobCreateWithoutWorkshopInput!]
  createMany: WorkshopJobCreateManyWorkshopInputEnvelope
}

input WorkshopJobCreateNestedOneWithoutTasksInput {
  connect: WorkshopJobWhereUniqueInput
}

input WorkshopJobCreateOrConnectWithoutTasksInput {
  create: WorkshopJobCreateWithoutTasksInput!
  where: WorkshopJobWhereUniqueInput!
}

input WorkshopJobCreateWithoutTasksInput {
  availability: Boolean
  job: JobCreateNestedOneWithoutJobWorkshopsInput!
  maxPrice: Decimal
  minPrice: Decimal
  workshop: WorkshopCreateNestedOneWithoutWorkshopJobsInput!
  workshopJobDescription: String
}

input WorkshopJobCreateWithoutWorkshopInput {
  availability: Boolean
  job: JobCreateNestedOneWithoutJobWorkshopsInput!
  maxPrice: Decimal
  minPrice: Decimal
  workshopJobDescription: String
}

input WorkshopJobListRelationFilter {
  every: WorkshopJobWhereInput
  none: WorkshopJobWhereInput
  some: WorkshopJobWhereInput
}

type WorkshopJobMaxAggregate {
  availability: Boolean
  createdAt: DateTime
  createdBy: BigInt
  jobId: BigInt
  maxPrice: Decimal
  minPrice: Decimal
  updatedAt: DateTime
  updatedBy: BigInt
  workshopId: BigInt
  workshopJobDescription: String
  workshopJobId: BigInt
}

type WorkshopJobMinAggregate {
  availability: Boolean
  createdAt: DateTime
  createdBy: BigInt
  jobId: BigInt
  maxPrice: Decimal
  minPrice: Decimal
  updatedAt: DateTime
  updatedBy: BigInt
  workshopId: BigInt
  workshopJobDescription: String
  workshopJobId: BigInt
}

input WorkshopJobOrderByRelationAggregateInput {
  _count: SortOrder
}

input WorkshopJobOrderByWithRelationInput {
  availability: SortOrder
  job: JobOrderByWithRelationInput
  jobId: SortOrder
  maxPrice: SortOrderInput
  minPrice: SortOrderInput
  tasks: TaskOrderByRelationAggregateInput
  workshop: WorkshopOrderByWithRelationInput
  workshopId: SortOrder
  workshopJobDescription: SortOrderInput
  workshopJobId: SortOrder
}

input WorkshopJobRelationFilter {
  is: WorkshopJobWhereInput
  isNot: WorkshopJobWhereInput
}

type WorkshopJobSumAggregate {
  createdBy: BigInt
  jobId: BigInt
  maxPrice: Decimal
  minPrice: Decimal
  updatedBy: BigInt
  workshopId: BigInt
  workshopJobId: BigInt
}

input WorkshopJobUpdateOneRequiredWithoutTasksNestedInput {
  connect: WorkshopJobWhereUniqueInput
  connectOrCreate: WorkshopJobCreateOrConnectWithoutTasksInput
  create: WorkshopJobCreateWithoutTasksInput
  update: WorkshopJobUpdateToOneWithWhereWithoutTasksInput
  upsert: WorkshopJobUpsertWithoutTasksInput
}

input WorkshopJobUpdateToOneWithWhereWithoutTasksInput {
  data: WorkshopJobUpdateWithoutTasksInput!
  where: WorkshopJobWhereInput
}

input WorkshopJobUpdateWithoutTasksInput {
  availability: Boolean
  job: JobUpdateOneRequiredWithoutJobWorkshopsNestedInput
  maxPrice: Decimal
  minPrice: Decimal
  workshopJobDescription: String
}

input WorkshopJobUpsertWithoutTasksInput {
  create: WorkshopJobCreateWithoutTasksInput!
  update: WorkshopJobUpdateWithoutTasksInput!
  where: WorkshopJobWhereInput
}

input WorkshopJobWhereInput {
  AND: [WorkshopJobWhereInput!]
  NOT: [WorkshopJobWhereInput!]
  OR: [WorkshopJobWhereInput!]
  availability: BoolFilter
  job: JobRelationFilter
  jobId: BigIntFilter
  maxPrice: DecimalNullableFilter
  minPrice: DecimalNullableFilter
  tasks: TaskListRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
  workshopJobDescription: StringNullableFilter
  workshopJobId: BigIntFilter
}

input WorkshopJobWhereUniqueInput {
  AND: [WorkshopJobWhereInput!]
  NOT: [WorkshopJobWhereInput!]
  OR: [WorkshopJobWhereInput!]
  availability: BoolFilter
  job: JobRelationFilter
  jobId: BigIntFilter
  maxPrice: DecimalNullableFilter
  minPrice: DecimalNullableFilter
  tasks: TaskListRelationFilter
  workshop: WorkshopRelationFilter
  workshopId: BigIntFilter
  workshopId_jobId: WorkshopJobWorkshopIdJobIdCompoundUniqueInput
  workshopJobDescription: StringNullableFilter
  workshopJobId: BigInt
}

input WorkshopJobWorkshopIdJobIdCompoundUniqueInput {
  jobId: BigInt!
  workshopId: BigInt!
}

input WorkshopListRelationFilter {
  every: WorkshopWhereInput
  none: WorkshopWhereInput
  some: WorkshopWhereInput
}

type WorkshopMaxAggregate {
  addressId: BigInt
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isManagingWork: Boolean
  isOfferingService: Boolean
  isVerified: Boolean
  ownerId: BigInt
  telephoneNumber: String
  updatedAt: DateTime
  updatedBy: BigInt
  workshopId: BigInt
}

type WorkshopMinAggregate {
  addressId: BigInt
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  isManagingWork: Boolean
  isOfferingService: Boolean
  isVerified: Boolean
  ownerId: BigInt
  telephoneNumber: String
  updatedAt: DateTime
  updatedBy: BigInt
  workshopId: BigInt
}

input WorkshopNullableRelationFilter {
  is: WorkshopWhereInput
  isNot: WorkshopWhereInput
}

input WorkshopOrderByRelationAggregateInput {
  _count: SortOrder
}

input WorkshopOrderByWithRelationInput {
  WorkshopDeviceOtp: WorkshopDeviceOtpOrderByWithRelationInput
  address: AddressOrderByWithRelationInput
  addressId: SortOrderInput
  customers: CustomerOrderByRelationAggregateInput
  email: SortOrder
  employees: EmployeeOrderByRelationAggregateInput
  isManagingWork: SortOrderInput
  isOfferingService: SortOrderInput
  isVerified: SortOrderInput
  jobCategories: JobCategoryOrderByRelationAggregateInput
  joinWorkshopRequests: JoinWorkshopRequestOrderByRelationAggregateInput
  ownerId: SortOrder
  reviews: ReviewOrderByRelationAggregateInput
  serviceRequests: ServiceRequestOrderByRelationAggregateInput
  services: ServiceOrderByRelationAggregateInput
  telephoneNumber: SortOrder
  user: UserOrderByWithRelationInput
  workshopDetails: WorkshopDetailsOrderByWithRelationInput
  workshopDevices: WorkshopDeviceOrderByRelationAggregateInput
  workshopId: SortOrder
  workshopJobs: WorkshopJobOrderByRelationAggregateInput
}

input WorkshopRelationFilter {
  is: WorkshopWhereInput
  isNot: WorkshopWhereInput
}

enum WorkshopScalarFieldEnum {
  addressId
  createdAt
  deletedAt
  email
  isManagingWork
  isOfferingService
  isVerified
  ownerId
  telephoneNumber
  updatedAt
  updatedBy
  workshopId
}

type WorkshopSumAggregate {
  addressId: BigInt
  ownerId: BigInt
  updatedBy: BigInt
  workshopId: BigInt
}

input WorkshopUpdateInput {
  address: AddressUpdateOneWithoutWorkshopNestedInput
  email: String
  isManagingWork: Boolean
  isOfferingService: Boolean
  isVerified: Boolean
  telephoneNumber: String
  workshopDetails: WorkshopDetailsUpdateOneWithoutWorkshopNestedInput
}

input WorkshopWhereInput {
  AND: [WorkshopWhereInput!]
  NOT: [WorkshopWhereInput!]
  OR: [WorkshopWhereInput!]
  WorkshopDeviceOtp: WorkshopDeviceOtpNullableRelationFilter
  address: AddressNullableRelationFilter
  addressId: BigIntNullableFilter
  customers: CustomerListRelationFilter
  email: StringFilter
  employees: EmployeeListRelationFilter
  isManagingWork: BoolNullableFilter
  isOfferingService: BoolNullableFilter
  isVerified: BoolNullableFilter
  jobCategories: JobCategoryListRelationFilter
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  ownerId: BigIntFilter
  reviews: ReviewListRelationFilter
  serviceRequests: ServiceRequestListRelationFilter
  services: ServiceListRelationFilter
  telephoneNumber: StringFilter
  user: UserRelationFilter
  workshopDetails: WorkshopDetailsNullableRelationFilter
  workshopDevices: WorkshopDeviceListRelationFilter
  workshopId: BigIntFilter
  workshopJobs: WorkshopJobListRelationFilter
}

input WorkshopWhereUniqueInput {
  AND: [WorkshopWhereInput!]
  NOT: [WorkshopWhereInput!]
  OR: [WorkshopWhereInput!]
  WorkshopDeviceOtp: WorkshopDeviceOtpNullableRelationFilter
  address: AddressNullableRelationFilter
  addressId: BigInt
  customers: CustomerListRelationFilter
  email: String
  employees: EmployeeListRelationFilter
  isManagingWork: BoolNullableFilter
  isOfferingService: BoolNullableFilter
  isVerified: BoolNullableFilter
  jobCategories: JobCategoryListRelationFilter
  joinWorkshopRequests: JoinWorkshopRequestListRelationFilter
  ownerId: BigIntFilter
  reviews: ReviewListRelationFilter
  serviceRequests: ServiceRequestListRelationFilter
  services: ServiceListRelationFilter
  telephoneNumber: StringFilter
  user: UserRelationFilter
  workshopDetails: WorkshopDetailsNullableRelationFilter
  workshopDevices: WorkshopDeviceListRelationFilter
  workshopId: BigInt
  workshopJobs: WorkshopJobListRelationFilter
}